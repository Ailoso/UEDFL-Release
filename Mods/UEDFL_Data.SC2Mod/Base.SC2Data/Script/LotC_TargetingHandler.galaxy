//static trigger LOTC_Targeting_gt_ForceOff;
//static trigger LOTC_Targeting_gt_Deactivated;
//static trigger LOTC_Targeting_gt_PointChosen;
//static trigger LOTC_Targeting_gt_DirectionChosen;
//static trigger LOTC_Targeting_gt_EffectFired;
//static trigger LOTC_Targeting_gt_Cancel;
//static trigger LOTC_Targeting_gt_CancelFromUI;
//static trigger LOTC_Targeting_gt_CameraShake;
//static int[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingChargesSpent;
//static int[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingChargesTotal;
//static unit[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoACasterUnit;
//static unitgroup[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoACasterGroup;
//
//
//static const int libCOMI_gv_cMC_SOATARGETCOUNTMAX = 5;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingBehavior;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingActivateAbility;
//static abilcmd[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingExecuteCommand;
//static text[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingInstructionsPrimary;
//static text[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingInstructionsSecondary;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingCooldown;
//static order[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingOrder;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingModel;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnitType;
//static unit[libCOMI_gv_cMC_SOATARGETCOUNTMAX + 1][libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnit;
//static actor[libCOMI_gv_cMC_SOATARGETCOUNTMAX + 1][libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingActors;
//
//static bool[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingTransitioning;
//static bool[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnrefundableStageEntered;
//static bool[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingAlreadyCanceled;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingModel;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnitType;

bool libCOMI_gf_PlayerInCinematicModeCampaign(){return false;}
void libCOMI_gf_CM_SetFogAlphaOverTime(fixed a, fixed b, int c){}
void libCOMI_gf_CM_ResetFogAlphaOverTime(fixed a, int b){}

trigger LOTC_Targeting_gt_Activated;
trigger LOTC_Targeting_gt_ForceOff;
trigger LOTC_Targeting_gt_Deactivated;
trigger LOTC_Targeting_gt_PointChosen;
trigger LOTC_Targeting_gt_DirectionChosen;
trigger LOTC_Targeting_gt_EffectFired;
trigger LOTC_Targeting_gt_Cancel;
trigger LOTC_Targeting_gt_CancelFromUI;
trigger LOTC_Targeting_gt_CameraShake;


const int c_TargetingPhaseType_None = 0;
const int c_TargetingPhaseType_Location = 1;
const int c_TargetingPhaseType_Direction = 2;
static const int c_TARGETCOUNTMAX = 5;

struct LOTC_TargetingStruct{
	int lv_ChargesSpent;
	int lv_ChargesTotal;
	int lv_UsageCount;
	int lv_Phase;
	bool lv_Transitioning;
	bool lv_UnrefundableStageEntered;
	bool lv_AlreadyCanceled;
	string lv_Model;
	string lv_UnitType;
	unit[c_TARGETCOUNTMAX + 1] lv_Unit;
	actor[c_TARGETCOUNTMAX + 1] lv_Actors;
	string lv_Behavior;
	string lv_ActivateAbility;
	abilcmd lv_ExecuteCommand;
	text lv_InstructionsPrimary;
	text lv_InstructionsSecondary;
	string lv_Cooldown;
	order lv_Order;
	unitgroup lv_DirectionGroup;
	bool lv_Cycling;
	bool lv_ExitInstantly;
	unit lv_CasterUnit;
	unitgroup lv_CasterGroup;
};

typedef structref<LOTC_TargetingStruct> LOTC_TargetingStructRef;
LOTC_TargetingStruct[c_maxPlayers] LOTC_TargetingGlobal;


void LOTC_Targeting_ModeEnter (int lp_player) {

	int lv_count;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];

	Targeting.lv_UnrefundableStageEntered = false;
	Targeting.lv_AlreadyCanceled = false;
	Targeting.lv_Transitioning = false;
	while (!((Targeting.lv_Transitioning == false))) {
		Wait(0.0625, c_timeGame);
	}
	if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
		return ;
	}

	TriggerEnable(LOTC_Targeting_gt_Cancel, true);
	Targeting.lv_ExitInstantly = false;
	Targeting.lv_UsageCount += 1;
	Targeting.lv_ChargesSpent = 0;
	////libCOUI_gf_CU_TargetingSetCharges(Targeting.lv_ChargesTotal, Targeting.lv_ChargesTotal, lp_player);
	if ((Targeting.lv_Order != null)) {
		TriggerEnable(LOTC_Targeting_gt_PointChosen, true);
		TriggerEnable(LOTC_Targeting_gt_DirectionChosen, true);
		UISetTargetingOrder(PlayerGroupSingle(lp_player), Targeting.lv_CasterGroup, Targeting.lv_Order, false);
		Targeting.lv_Phase = c_TargetingPhaseType_Location;
	}
	else {
		Targeting.lv_Phase = c_TargetingPhaseType_None;
	}
	Targeting.lv_Transitioning = true;
	//libCOUI_gf_PU_TargetingUI_EnterTargetingMode(true, false, lp_player);
	//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsPrimary, lp_player);
	libCOMI_gf_CM_SetFogAlphaOverTime(100.0, 0.5, lp_player);
	CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
	CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
	CameraSetData(PlayerGroupSingle(lp_player), "SOATargetingModeCamera");
	Targeting.lv_Transitioning = false;
	Targeting.lv_Cycling = false;
}

void LOTC_Targeting_ModeExit (int lp_player) {
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];

	Targeting.lv_Phase = c_TargetingPhaseType_None;
	while (!((Targeting.lv_Transitioning == false))) {
		Wait(0.0625, c_timeGame);
	}
	Targeting.lv_Transitioning = true;
	if ((Targeting.lv_ExitInstantly == true)) {
		CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
		CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
	}
	else {
		CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
		CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
	}
	CameraSetData(PlayerGroupSingle(lp_player), "Dflt");
	if ((Targeting.lv_ExitInstantly == true)) {
		VisResetFoWAlpha(lp_player);
		//libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, true, lp_player);
	}
	else {
		libCOMI_gf_CM_ResetFogAlphaOverTime(0.5, lp_player);
		//libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, false, lp_player);
	}
	libNtve_gf_RestoreUnitSelection(lp_player);
	Targeting.lv_ActivateAbility = null;
	Targeting.lv_Transitioning = false;
	Targeting.lv_UsageCount -= 1;
	if ((Targeting.lv_UsageCount == 0)) {
		TriggerEnable(LOTC_Targeting_gt_Cancel, false);
		TriggerEnable(LOTC_Targeting_gt_PointChosen, false);
		TriggerEnable(LOTC_Targeting_gt_DirectionChosen, false);
	}

}

void LOTC_Targeting_CleanupActorsAndUnits (int lp_player) {
	int lv_i;
	const int lv_count = c_TARGETCOUNTMAX;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];

	for (lv_i = 1; (lv_i <= lv_count); lv_i += 1 ) {
		if ((Targeting.lv_Actors[lv_i] != null)) {
			ActorSend(Targeting.lv_Actors[lv_i], "Signal Destroy");
			Targeting.lv_Actors[lv_i] = null;
		}

		if ((Targeting.lv_Unit[lv_i] != null)) {
			UnitRemove(Targeting.lv_Unit[lv_i]);
			Targeting.lv_Unit[lv_i] = null;
		}

	}
}

void LOTC_Targeting_Cancel (int lp_player) {
	string lv_cost;
	string lv_costField;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];
	lv_cost = "";
	lv_costField = "";

	// Implementation
	UnitIssueOrder(Targeting.lv_CasterUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
	Targeting.lv_AlreadyCanceled = true;
	LOTC_Targeting_CleanupActorsAndUnits(lp_player);
	if ((Targeting.lv_UnitType != null) && (Targeting.lv_Phase == c_TargetingPhaseType_Direction)) {
		Targeting.lv_ChargesSpent -= 1;
	}

	if ((Targeting.lv_ChargesSpent == 0) && (Targeting.lv_UnrefundableStageEntered == false)) {
		libNtve_gf_UnitAbilityRemoveCooldown(Targeting.lv_CasterUnit, Targeting.lv_ActivateAbility, Targeting.lv_Cooldown);
		lv_costField = ("Cost[0].Vital[" + "Energy" + "]");
		lv_cost = CatalogFieldValueGet(c_gameCatalogAbil, Targeting.lv_ActivateAbility, (lv_costField), lp_player);
		UnitSetPropertyFixed(Targeting.lv_CasterUnit, c_unitPropEnergy, (UnitGetPropertyFixed(Targeting.lv_CasterUnit, c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(lv_cost)));

	}

	UnitBehaviorRemove(Targeting.lv_CasterUnit, Targeting.lv_Behavior, 1);
	Targeting.lv_UnrefundableStageEntered = true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_EffectFired
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_EffectFired_Func (bool testConds, bool runActions) {
	// Automatic Variable Declarations
	// Actions
	if (!runActions) {
		return true;
	}

	LOTC_Targeting_CleanupActorsAndUnits(EventPlayer());
	return true;
}



//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_Deactivated
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_Deactivated_Func (bool testConds, bool runActions) {
	int lv_casterPlayer = UnitGetOwner(EventUnit());
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];

	if (!runActions) {
		return true;
	}

	UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_CasterGroup, null, false);
	Targeting.lv_ChargesSpent = 0;
	LOTC_Targeting_ModeExit(lv_casterPlayer);
	return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_TargetingForceOff
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_TargetingForceOff_Func (bool testConds, bool runActions) {
	// Variable Declarations
	int lv_indexPlayer = 0;
	LOTC_TargetingStructRef Targeting;// = LOTC_TargetingGlobal[lv_indexPlayer];
	// Automatic Variable Declarations
	playergroup pg;

	// Variable Initialization

	// Actions
	if (!runActions) {
		return true;
	}

	TriggerEnable(LOTC_Targeting_gt_Cancel, false);
	TriggerEnable(LOTC_Targeting_gt_PointChosen, false);
	TriggerEnable(LOTC_Targeting_gt_DirectionChosen, false);
	pg = PlayerGroupActive();//libCOOC_gf_CommanderPlayers();
	lv_indexPlayer = -1;
	while (true) {
		lv_indexPlayer = PlayerGroupNextPlayer(pg, lv_indexPlayer);
		if (lv_indexPlayer < 0) { break; }
		Targeting = LOTC_TargetingGlobal[lv_indexPlayer];
		Targeting.lv_ExitInstantly = true;
		if ((Targeting.lv_Phase != c_TargetingPhaseType_None)) {
			Targeting.lv_Transitioning = false;
			UISetTargetingOrder(PlayerGroupSingle(lv_indexPlayer), Targeting.lv_CasterGroup, null, false);
			LOTC_Targeting_Cancel(lv_indexPlayer);
		}

	}
	Targeting.lv_UsageCount = 0;
	return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_TargetingPointChosen
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_TargetingPointChosen_Func (bool testConds, bool runActions) {
	int lv_casterPlayer = EventPlayer();
	point lv_targetPoint= OrderGetTargetPoint(EventUnitOrder());
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];

	if (testConds) {

		if (!(Targeting.lv_Phase == c_TargetingPhaseType_Location)) {
			return false;
		}

		if (!(Targeting.lv_ChargesSpent < Targeting.lv_ChargesTotal)) {
			return false;
		}
	}

	// Actions
	if (!runActions) {
		return true;
	}

	lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
	lv_casterPlayer = EventPlayer();
	if ((VisIsVisibleForPlayer(lv_casterPlayer, lv_targetPoint) == false)) {
		return true;
	}

	Targeting.lv_Cycling = true;
	Targeting.lv_ChargesSpent += 1;
	libNtve_gf_CreateActorAtPoint(Targeting.lv_Model, lv_targetPoint);
	Targeting.lv_Actors[Targeting.lv_ChargesSpent] = libNtve_gf_ActorLastCreated();
	libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
	if ((Targeting.lv_UnitType == null)) {
		UnitIssueOrder(Targeting.lv_CasterUnit, OrderTargetingPoint(Targeting.lv_ExecuteCommand, lv_targetPoint), c_orderQueueAddToEnd);
		////libCOUI_gf_CU_TargetingSetCharges((Targeting.lv_ChargesTotal-Targeting.lv_ChargesSpent), Targeting.lv_ChargesTotal, lv_casterPlayer);
		if ((Targeting.lv_ChargesSpent == Targeting.lv_ChargesTotal)) {
			Wait(0.125, c_timeGame);
			UnitBehaviorRemove(Targeting.lv_CasterUnit, Targeting.lv_Behavior, 1);
		}
		else {
			Wait(0.1, c_timeGame);
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_CasterGroup, Targeting.lv_Order, false);
		}
	}
	else {
		libNtve_gf_CreateUnitsWithDefaultFacing(1, Targeting.lv_UnitType, 0, lv_casterPlayer, lv_targetPoint);
		Targeting.lv_Unit[Targeting.lv_ChargesSpent] = UnitLastCreated();
		UnitSetState(Targeting.lv_Unit[Targeting.lv_ChargesSpent], c_unitStateTooltipable, false);
		Targeting.lv_DirectionGroup = libNtve_gf_ConvertUnitToUnitGroup(Targeting.lv_Unit[Targeting.lv_ChargesSpent]);
		Wait(0.1, c_timeGame);
		if ((UnitIsValid(Targeting.lv_Unit[Targeting.lv_ChargesSpent]) == true)) {
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_DirectionGroup, OrderTargetingPoint(Targeting.lv_ExecuteCommand, UnitGetPosition(Targeting.lv_Unit[Targeting.lv_ChargesSpent])), false);
			//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsSecondary, lv_casterPlayer);
			Targeting.lv_Phase = c_TargetingPhaseType_Direction;
		}

	}
	Targeting.lv_Cycling = false;
	return true;
}


//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_DirectionChosen
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_DirectionChosen_Func (bool testConds, bool runActions) {

	int lv_casterPlayer = EventPlayer();
	point lv_targetPoint= OrderGetTargetPoint(EventUnitOrder());
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];

	if (testConds) {
		if (!((Targeting.lv_Phase == c_TargetingPhaseType_Direction))) {
			return false;
		}
	}

	Targeting.lv_Cycling = true;

	Targeting.lv_UnrefundableStageEntered = true;
	libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
	ActorSend(Targeting.lv_Actors[Targeting.lv_ChargesSpent], "Signal Destroy");
	if ((UnitIsValid(Targeting.lv_Unit[Targeting.lv_ChargesSpent]) == false)) {
		return true;
	}

	libNtve_gf_MakeUnitFacePoint(Targeting.lv_Unit[Targeting.lv_ChargesSpent], lv_targetPoint, 0.0);
	////libCOUI_gf_CU_TargetingSetCharges((Targeting.lv_ChargesTotal-Targeting.lv_ChargesSpent), Targeting.lv_ChargesTotal, lv_casterPlayer);
	if ((Targeting.lv_ChargesSpent == Targeting.lv_ChargesTotal)) {
		UnitBehaviorRemove(Targeting.lv_CasterUnit, Targeting.lv_Behavior, 1);
		Wait(0.1, c_timeGame);
	}
	else {
		//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsPrimary, lv_casterPlayer);
		Wait(0.1, c_timeGame);
		if ((Targeting.lv_AlreadyCanceled == false)) {
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_CasterGroup, Targeting.lv_Order, false);
		}

		Targeting.lv_Phase = c_TargetingPhaseType_Location;
	}
	Targeting.lv_Cycling = false;
	return true;
}





bool LOTC_Targeting_Activated_Func (bool testConds, bool runActions) {
	unit lv_caster = EventUnit();
	int lv_casterPlayer = 1;//UnitGetOwner(lv_caster);
	string UDType = "LotC_Targetable";
	string UDInstance = "Test_HornerAirFleet";
	string BehaviorActivated = EventUnitBehavior();
	int lv_HornerAirFleet_Cost;

	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	Targeting.lv_CasterUnit = EventUnit();
	Targeting.lv_CasterGroup = libNtve_gf_ConvertUnitToUnitGroup(Targeting.lv_CasterUnit);
	Targeting.lv_ActivateAbility = UserDataGetGameLink(UDType,UDInstance,"ActivateAbility",1); //"HornerAirFleetActivate";
	Targeting.lv_ExecuteCommand = UserDataGetAbilCmd(UDType,UDInstance,"ExecuteCommand",1);//AbilityCommand("HornerAirFleetExecute", 0);
	Targeting.lv_Cooldown = UserDataGetString(UDType,UDInstance,"Cooldown",1);//"Abil/HornerAirFleetActivate";
	Targeting.lv_Behavior = UserDataGetGameLink(UDType,UDInstance,"Behavior",1);//"HornerAirFleetActivate";
	Targeting.lv_Model = UserDataGetGameLink(UDType,UDInstance,"Model",1);//"HornerAirFleetTargetingModel";
	Targeting.lv_Order = OrderTargetingPoint(UserDataGetAbilCmd(UDType,UDInstance,"Order",1), UnitGetPosition(Targeting.lv_CasterUnit));//"HornerAirFleetTargetingDummy"
	Targeting.lv_UnitType = UserDataGetGameLink(UDType,UDInstance,"UnitType",1);//"HornerAirFleetTargeter";
	Targeting.lv_ChargesTotal = UserDataGetInt(UDType,UDInstance,"ChargesTotal",1);//1;
	Targeting.lv_InstructionsPrimary = UserDataGetText(UDType,UDInstance,"InstructionsPrimary",1);//StringExternal("Param/Value/lib_COMI_BE46DBD9");//Fleet Starting Location
	Targeting.lv_InstructionsSecondary = UserDataGetText(UDType,UDInstance,"InstructionsSecondary",1);//StringExternal("Param/Value/lib_COMI_A3DA54C0");//Choose Fleet Direction
	lv_HornerAirFleet_Cost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, Targeting.lv_ActivateAbility, "Cost[0].Resource[0]", lv_casterPlayer);

	//Targeting.lv_ActivateAbility = "SOAOrbitalStrikeActivate";
	//Targeting.lv_ExecuteCommand = AbilityCommand("SOAOrbitalStrikeExecute", 0);
	//Targeting.lv_Cooldown = "Abil/SOAOrbitalStrikeActivate";
	//Targeting.lv_Behavior = "SOAOrbitalStrikeActivate";
	//Targeting.lv_Model = "SOAOrbitalStrikeTargetModel";
	//Targeting.lv_Order = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), UnitGetPosition(Targeting.lv_CasterUnit));
	//Targeting.lv_UnitType = null;
	//Targeting.lv_ChargesTotal = 5;
	//Targeting.lv_InstructionsPrimary = StringExternal("Param/Value/lib_COMI_84BC1D9B");
	//Targeting.lv_InstructionsSecondary = null;
	LOTC_Targeting_ModeEnter(lv_casterPlayer);
	return true;
}

void LOTC_Targeting_Init(){
	trigger t;
	string ActivateBehavior = "Test_HornerAirFleetActivate";


	//LOTC_Targeting_gt_Cancel;
	//LOTC_Targeting_gt_CancelFromUI;
	//LOTC_Targeting_gt_CameraShake;

	LOTC_Targeting_gt_Activated = TriggerCreate("LOTC_Targeting_Activated_Func");
	TriggerAddEventUnitBehaviorChange(LOTC_Targeting_gt_Activated, null, ActivateBehavior, c_unitBehaviorChangeActivate);

	LOTC_Targeting_gt_Deactivated = TriggerCreate("LOTC_Targeting_Deactivated_Func");
	TriggerAddEventUnitBehaviorChange(LOTC_Targeting_gt_Deactivated, null, ActivateBehavior, c_unitBehaviorChangeDeactivate);


	LOTC_Targeting_gt_PointChosen = TriggerCreate("LOTC_Targeting_TargetingPointChosen_Func");
	TriggerEnable(LOTC_Targeting_gt_PointChosen, false);
	TriggerAddEventUnitOrder(LOTC_Targeting_gt_PointChosen, null, AbilityCommand("Test_HornerAirFleetTargetingDummy", 0));

	LOTC_Targeting_gt_DirectionChosen = TriggerCreate("LOTC_Targeting_DirectionChosen_Func");
	TriggerEnable(LOTC_Targeting_gt_DirectionChosen, false);
	TriggerAddEventUnitOrder(LOTC_Targeting_gt_DirectionChosen, null, AbilityCommand("Test_HornerAirFleetExecute", 0));



	LOTC_Targeting_gt_ForceOff = TriggerCreate("LOTC_Targeting_TargetingForceOff_Func");
	TriggerAddEventGeneric(LOTC_Targeting_gt_ForceOff, "CinematicModeOn");

	LOTC_Targeting_gt_EffectFired = TriggerCreate("LOTC_Targeting_EffectFired_Func");
	//TriggerAddEventPlayerEffectUsed(LOTC_Targeting_gt_EffectFired, c_playerAny, "SOAOrbitalStrikeCP");
	//TriggerAddEventPlayerEffectUsed(LOTC_Targeting_gt_EffectFired, c_playerAny, "SOAGravitonBombLM");

}
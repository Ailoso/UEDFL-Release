include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (Koprulu Classic)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib1926661B_ge_SpeakerDefault_Speaker = 0;
const int lib1926661B_ge_TransportMode_Land = 0;
const int lib1926661B_ge_TransportMode_Air = 1;
const int lib1926661B_ge_DirectiveType_Hint = 0;
const int lib1926661B_ge_DirectiveType_Warning = 1;
const int lib1926661B_ge_DirectiveType_Chip = 2;
const int lib1926661B_ge_TimerWindowPosition_TopRight = 0;
const int lib1926661B_ge_TimerWindowPosition_TopCenter = 1;
const int lib1926661B_ge_TimerWindowPosition_BottomRight = 2;
const int lib1926661B_ge_BossBarRaceDeprecated_Terran = 0;
const int lib1926661B_ge_BossBarRaceDeprecated_Zerg = 1;
const int lib1926661B_ge_ForceType_Tank = 0;
const int lib1926661B_ge_ForceType_Infantry = 1;
const int lib1926661B_ge_ForceType_Air = 2;
const int lib1926661B_ge_ForceType_AA = 3;
const int lib1926661B_ge_VolumeChannelModeCampaign_CinematicInTransmission = 0;
const int lib1926661B_ge_VolumeChannelModeCampaign_Speech = 1;
const int lib1926661B_ge_VolumeChannelModeCampaign_Game = 2;
const int lib1926661B_ge_VolumeChannelModeCampaign_Victory = 3;
const int lib1926661B_ge_VolumeChannelModeCampaign_Speech2 = 4;
const int lib1926661B_ge_VolumeChannelModeCampaign_Speech3 = 5;
const int lib1926661B_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects = 6;
const int lib1926661B_ge_VolumeChannelModeCampaign_LowHealthBegin = 7;
const int lib1926661B_ge_VolumeChannelModeCampaign_LowHealthEnd = 8;
const int lib1926661B_ge_VolumeChannelModeCampaign_Game2 = 9;
const int lib1926661B_ge_VolumeChannelModeCampaign_Game3 = 10;
const int lib1926661B_ge_VolumeChannelModeCampaign_CinematicOutofTransmission = 11;
const int lib1926661B_ge_CacheResourceType_CustomResource = 0;
const int lib1926661B_ge_CacheResourceType_Mineral = 1;
const int lib1926661B_ge_CacheResourceType_Vespene = 2;
const int lib1926661B_ge_CacheResourceType_Mutagen = 3;
const int lib1926661B_ge_CacheResourceType_InfestationLife = 4;
const int lib1926661B_ge_CacheResourceType_InfestationEnergy = 5;
const int lib1926661B_ge_CacheResourceType_InfestationDamage = 6;
const int lib1926661B_ge_CacheResourceType_Influence = 7;
const int lib1926661B_ge_CacheResourceType_KerriganLevel = 8;
const int lib1926661B_ge_CampaginReticleType_ProtossMainObjective = 0;
const int lib1926661B_ge_CampaginReticleType_ProtossBonusObjective = 1;
const int lib1926661B_ge_CampaginReticleType_ProtossEnemy = 2;
const int lib1926661B_ge_CampaginReticleType_ZergMainObjective = 3;
const int lib1926661B_ge_CampaginReticleType_ZergBonusObjective = 4;
const int lib1926661B_ge_CampaginReticleType_ZergEnemy = 5;
const int lib1926661B_ge_CampaginReticleType_TerranMainObjective = 6;
const int lib1926661B_ge_CampaginReticleType_TerranBonusObjective = 7;
const int lib1926661B_ge_CampaginReticleType_TerranEnemy = 8;
const int lib1926661B_ge_CampaginReticleSize_Large = 0;
const int lib1926661B_ge_CampaginReticleSize_Medium = 1;
const int lib1926661B_ge_CampaginReticleSize_Small = 2;
const int lib1926661B_ge_MissionStatus_Locked = 0;
const int lib1926661B_ge_MissionStatus_Available = 1;
const int lib1926661B_ge_MissionStatus_Completed = 2;
const int lib1926661B_ge_MissionCountOptions_Locked = 0;
const int lib1926661B_ge_MissionCountOptions_Available = 1;
const int lib1926661B_ge_MissionCountOptions_Completed = 2;
const int lib1926661B_ge_MissionCountOptions_All = 3;
const int lib1926661B_ge_MissionObjectiveState_Undiscovered = 0;
const int lib1926661B_ge_MissionObjectiveState_Available = 1;
const int lib1926661B_ge_MissionObjectiveState_Completed = 2;
const int lib1926661B_ge_MissionObjectiveState_Failed = 3;
const int lib1926661B_ge_HeroCreatePurpose_GamePlay = 0;
const int lib1926661B_ge_HeroCreatePurpose_Cinematic = 1;
const int lib1926661B_ge_HeroUnit_JackFrost = 0;
const int lib1926661B_ge_HeroUnit_GhostKefren = 1;
const int lib1926661B_ge_HeroUnit_GhostKeops = 2;
const int lib1926661B_ge_HeroUnit_GhostMicerinos = 3;
const int lib1926661B_ge_MissionCondition_Sucessful = 0;
const int lib1926661B_ge_MissionCondition_Simulation = 1;
const int lib1926661B_ge_KC_ArchivesType_Mission = 0;
const int lib1926661B_ge_KC_ArchivesType_Scene = 1;

// Constants
const string lib1926661B_gv_kL_StorySectionConstant = "LotC|Story";
const int lib1926661B_gv_kC_RePing_MAX = 12;
const fixed lib1926661B_gv_kL_CheckPointFlashDuration = 5.8;
const int lib1926661B_gv_kL_MaxActiveTimerWindows = 3;
const fixed lib1926661B_gv_kL_HighlightDuration = 6.0;
const fixed lib1926661B_gv_kC_HeroUIUpdateFrequency = 0.25;
const fixed lib1926661B_gv_kC_ForceTimerTime = 60.0;
const fixed lib1926661B_gv_kC_ForceCondorHeight = 35.0;
const fixed lib1926661B_gv_kC_ForceCondorHeightBase = 4.0;
const int lib1926661B_gv_kCC_DifficultyCount = 2;
const int lib1926661B_gv_UEDFL_MapCount = 12;
const int lib1926661B_gv_kCC_HelpUnitPanel_EnabledUnitTypeCountMax = 100;
const string lib1926661B_gv_kCC_ArmyCategoryStateKey = "KC_ArmyCategoryState_";

// Structures
struct lib1926661B_gs_KL_BossBar {
    int lv_panel;
    int lv_portrait;
    int lv_progressBar;
    int lv_title;
    unit lv_unit;
};

struct lib1926661B_gs_KL_ContaminationPanel {
    int lv_panel;
    int lv_valueLabel;
    int lv_progressBar;
};

struct lib1926661B_gs_KL_LoreWindow {
    int lv_window;
    int lv_closeButton;
    int lv_descriptionLabel;
    int lv_backgroundImage;
    int lv_titleLabel;
};

struct lib1926661B_gs_KL_TimerPanel {
    int lv_panel;
    timer lv_timer;
    int lv_titleLabel;
    int lv_timeLabel;
    bool lv_timerActive;
    bool lv_timerType;
    fixed lv_timerDangerThreshold;
};

struct lib1926661B_gs_KC_TimerWindow {
    int lv_pU_TimerWindowHighlightFrame;
    fixed lv_pU_TimerWindowHighlightDuration;
    fixed lv_pU_TimerWindowDangerThreshold;
    bool lv_pU_TimerWindowInDanger;
    timer lv_pU_TimerWindowTimer;
};

struct lib1926661B_gs_KC_HeroPanel {
    unit lv_unit;
    string lv_icon;
    int lv_panel;
    int lv_iconImage;
    int lv_cooldownImage;
    int lv_damageTakenImage;
    int lv_damageTakenLabel;
    int lv_nameLabel;
    int lv_button;
    fixed lv_damageTimer;
};

struct lib1926661B_gs_KC_NukePanel {
    unit lv_casterUnit;
    int lv_nukePanel;
    int lv_commandPanel;
    bool lv_panelActive;
};

struct lib1926661B_gs_KC_ForcePanel {
    int lv_panel;
    int lv_titleLabel;
    int[5] lv_button;
    int[5] lv_buttonCooldown;
    bool lv_forceOnCooldown;
    timer lv_forceTimer;
    unit lv_forceCondor;
    unitgroup lv_forceGroup;
    int lv_type;
};

struct lib1926661B_gs_KC_PhasePanel {
    int lv_panel;
    int lv_phaseNumber;
};

struct lib1926661B_gs_KC_PConfirmPanel {
    int lv_panel;
    int lv_cofirmButton;
    int lv_warningLabel;
};

struct lib1926661B_gs_KC_UnitChoicePanel {
    int lv_panel;
    int[3] lv_choiceButtons;
};

struct lib1926661B_gs_KC_VictoryScreen {
    int lv_pU_VSPanel;
    int lv_pU_VSMainPanel;
    int lv_pU_VSBackgroundImage;
    int lv_pU_VSLabelMissionTitle;
    int lv_pU_VSLabelVictoryTitle;
    int lv_pU_VSLabelTime;
    int lv_pU_VSBtnContinue;
    int lv_pU_VSBtnContinue2;
    int lv_pU_VSBtnPlayAgain;
    int lv_pU_VSBtnPlayAgain2;
    int lv_pU_VSRestartPanel;
    int lv_pU_VSRestartDifficultyPulldown;
    int lv_pU_VSRestartRestartButton;
    int lv_pU_VSRestartCancelButton;
    int lv_pU_VSAchievementTitle7;
    int lv_pU_VSAchievementTitle9;
    int[11] lv_pU_VSAchievementTitle5;
    int[11] lv_pU_VSAchievementTitle6;
    int[11] lv_pU_VSAchievementTitle8;
    int[4] lv_pU_VSAchievementTitle;
    int[4] lv_pU_VSAchievementTitle2;
    int[4] lv_pU_VSAchievementTitle3;
    int[4] lv_pU_VSAchievementTitle4;
    int[4] lv_zS_VSAchievementTitle2;
};

// Variable Declarations
timer lib1926661B_gv_kL_GameTimer;
string lib1926661B_gv_CURRENT_WORD;
int lib1926661B_gv_CURRENT_WORD_INDEX;
int lib1926661B_gv_talkingPortrait;
string lib1926661B_gv_talkingSpeaker;
string lib1926661B_gv_talkingPortraitActor;
int lib1926661B_gv_talkingTransmission;
int lib1926661B_gv_kC_RePingCount;
int[lib1926661B_gv_kC_RePing_MAX + 1] lib1926661B_gv_kC_RePingArray;
fixed lib1926661B_gv_kC_RePingInterval;
bool lib1926661B_gv_kC_MissionVictoryActionQueyeEmpty;
int lib1926661B_gv_kC_MissionCompleteTime;
bool lib1926661B_gv_kC_GameOver;
int lib1926661B_gv__FadeDialog;
int lib1926661B_gv__FadeImage;
int lib1926661B_gv_kC_PlanetPortrait;
camerainfo lib1926661B_gv_kC_PlanetPortraitPlayerCamera;
string lib1926661B_gv_kC_PlanetPortraitEvoMissionLight;
int lib1926661B_gv_kC_ObjectivePanel;
int lib1926661B_gv_kC_ErrorPanel;
timer lib1926661B_gv_kC_CombatTimer;
int lib1926661B_gv_kC_MissionUIContainer;
text[21] lib1926661B_gv_kC_MissionTipTitle;
text[21] lib1926661B_gv_kC_MissionTipDescription;
string[21] lib1926661B_gv_kC_MissionTipIcons;
int[21] lib1926661B_gv_kC_MissionTipType;
int lib1926661B_gv_kC_MissionTipCount;
int lib1926661B_gv_kC_MissionHelpButton;
string[21] lib1926661B_gv_kC_MissionTip;
int lib1926661B_gv_kC_MissionHelpButtonTipPanel;
bool lib1926661B_gv_kC_ErrorPanelMaskOn;
int lib1926661B_gv_kC_SaveIndex;
int lib1926661B_gv_kC_SavePanel;
int lib1926661B_gv_kC_SaveLabel;
lib1926661B_gs_KL_BossBar[4] lib1926661B_gv_bossBar;
int lib1926661B_gv_kL_CheckpointDirective;
lib1926661B_gs_KL_ContaminationPanel lib1926661B_gv_contaminationPanel;
int lib1926661B_gv_uED_CreditsPanel;
int lib1926661B_gv_uED_CreditsBackground;
int lib1926661B_gv_uED_CreditsButton;
int lib1926661B_gv_uED_CreditsCycle;
lib1926661B_gs_KL_LoreWindow lib1926661B_gv_kL_LoreWindow;
bool lib1926661B_gv_kL_LoreWindowVisible;
string lib1926661B_gv_kL_LastLoreShown;
int lib1926661B_gv_kL_MaxLoreEarned;
int lib1926661B_gv_kL_MaxLore;
lib1926661B_gs_KL_TimerPanel[lib1926661B_gv_kL_MaxActiveTimerWindows + 1] lib1926661B_gv_timerPanel;
timer[4] lib1926661B_gv_kL_WindowTimer;
lib1926661B_gs_KC_HeroPanel lib1926661B_gv_timerWindow;
int lib1926661B_gv_kC_TimerWindowHighlightFrame;
fixed lib1926661B_gv_kC_TimerWindowHighlightDuration;
fixed lib1926661B_gv_kC_TimerWindowDangerThreshold;
bool lib1926661B_gv_kC_TimerWindowInDanger;
timer lib1926661B_gv_kCTimerWindowTimer;
int lib1926661B_gv_kC_ArmyButton;
int lib1926661B_gv_kC_ArmyButtonTipPanel;
bool lib1926661B_gv_kC_ArmyButtonTipReady;
int lib1926661B_gv_kC_VictoryStatDlg;
int lib1926661B_gv_pP_ProgressBarPanel;
int lib1926661B_gv_pP_ProgressBarLabelTitle;
int lib1926661B_gv_pP_ProgressBarLabelBarLeft;
int lib1926661B_gv_pP_ProgressBarLabelBarRight;
int lib1926661B_gv_pP_ProgressBarImageBar;
int lib1926661B_gv_pP_ProgressBarMax;
int lib1926661B_gv_pP_ProgressBarMin;
int lib1926661B_gv_pP_ProgressBarProgress;
bool lib1926661B_gv_pP_ProgressBarShowing;
int lib1926661B_gv_pPC_ProgressBarWidth;
int lib1926661B_gv_pPC_ProgressBarHeight;
int lib1926661B_gv_pP_BB_Race;
string lib1926661B_gv_pP_BB_Portraits;
text lib1926661B_gv_pP_BB_Title;
unit lib1926661B_gv_pP_BB_Boss;
fixed lib1926661B_gv_pP_BB_MaxValue;
fixed lib1926661B_gv_pP_BB_CurrentValue;
int lib1926661B_gv_pP_BB_HPOldWidth;
int lib1926661B_gv_pP_BB_Panel;
int lib1926661B_gv_pP_BB_PortraitImage;
int lib1926661B_gv_pP_BB_TitleLabel;
int lib1926661B_gv_pP_BB_HpLabel;
int lib1926661B_gv_pP_BB_HpFullImage;
int lib1926661B_gv_pP_BB_HpCurrentImage;
int lib1926661B_gv_pP_BB_BorderImage;
int lib1926661B_gv_pP_BB_HpBackground;
lib1926661B_gs_KC_HeroPanel[4] lib1926661B_gv_kC_HeroPanel;
bool[4] lib1926661B_gv_kC_HeroPanelHidden;
fixed lib1926661B_gv_kC_HeroUIDamage;
lib1926661B_gs_KC_NukePanel lib1926661B_gv_kC_NukePanel;
lib1926661B_gs_KC_ForcePanel lib1926661B_gv_kC_ForcePanel;
text lib1926661B_gv_kC_ForceNameCD;
text lib1926661B_gv_kC_ForceNameDeploying;
text lib1926661B_gv_kC_ForceNameReady;
text lib1926661B_gv_kC_ForceNameSupplies;
int lib1926661B_gv_kC_ForcePlayerOwner;
point lib1926661B_gv_kC_ForceLandPoint;
region lib1926661B_gv_kC_ForceSpawnRegion;
bool lib1926661B_gv_kC_ForcePanelUsed;
lib1926661B_gs_KC_PhasePanel lib1926661B_gv_kC_PhasePanel;
lib1926661B_gs_KC_PConfirmPanel lib1926661B_gv_kC_PConfirm;
lib1926661B_gs_KC_UnitChoicePanel lib1926661B_gv_kC_UnitChoicePanel;
bool lib1926661B_gv_kC_VolumeChannelModeInSpeech;
bool lib1926661B_gv_kC_VolumeChannelModeInLowHP;
int lib1926661B_gv_kCX_CampaignDifficulty;
string[lib1926661B_gv_UEDFL_MapCount + 1] lib1926661B_gv_UEDFL_Maps;
int[3] lib1926661B_gv_kC_MissionCompletionBestTime;
int lib1926661B_gv_zSX_MissionObjRewardsEarnedCurrent;
string lib1926661B_gv_kC_CutsceneTimestamp;
string lib1926661B_gv_kC_PlaySceneCurrentScene;
int lib1926661B_gv_kC_CurrentCampaignCutscene;
bool lib1926661B_gv_kC_CampaignCutsceneSkippable;
int lib1926661B_gv_kC_CampaignCutsceneDialog;
bool lib1926661B_gv_kC_CampaignCutsceneSkipped;
bool lib1926661B_gv_kC_ApplyingCampaignTech;
int lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypeCount;
string[lib1926661B_gv_kCC_HelpUnitPanel_EnabledUnitTypeCountMax + 1] lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypes;
unit lib1926661B_gv_zS_PrimaryHatchery;
unit lib1926661B_gv_zS_Kerrigan;
unit lib1926661B_gv_zS_Kerrigan4;
unit lib1926661B_gv_zS_Kerrigan2;
unit lib1926661B_gv_zS_Kerrigan3;
int lib1926661B_gv_zS_KerriganPing;
string lib1926661B_gv_kC_CurrentMap;
bool lib1926661B_gv_kC_InStoryMode;
bool lib1926661B_gv_kC_InCompletedCampaign;
string lib1926661B_gv_kCX_LastSuccessfulMission;
bool lib1926661B_gv_kCX_LastMissionSimulation;
bool lib1926661B_gv_kCX_LastMissionSuccess;
string lib1926661B_gv_kCX_LastMission;
bool lib1926661B_gv_kCX_LastMapSuccess;
string lib1926661B_gv_kCX_LastMap;
bool lib1926661B_gv_kCX_IsVictoryPlayAgain;
bool lib1926661B_gv_kCX_IsSimulation;
string lib1926661B_gv_kC_CampaignBankName;
bank lib1926661B_gv_kC_CampaignBank;
int lib1926661B_gv_kC_CampaignDataBackup_MissionBestTime;
int lib1926661B_gv_kC_MLDialog;
int lib1926661B_gv_kC_MLPanel;
int lib1926661B_gv_kC_MLTitle;
int lib1926661B_gv_kC_MLObjective;
int lib1926661B_gv_kC_MLContactPortrait;
int lib1926661B_gv_kC_MLSubtitleFrame;
int[4] lib1926661B_gv_kC_MLAchievements;
int lib1926661B_gv_kC_MLPlanetView;
int lib1926661B_gv_kC_MLPlanetViewChoice;
int lib1926661B_gv_kC_MLChoiceAButton;
int lib1926661B_gv_kC_MLChoiceBButton;
int lib1926661B_gv_kC_MLChoiceCButton;
int lib1926661B_gv_kC_MLLaunchButton;
int lib1926661B_gv_kC_MLQuitButton;
int lib1926661B_gv_kC_MLBackButton;
int lib1926661B_gv_kC_MLPitchPlayButton;
int lib1926661B_gv_kC_MLPitchStopButton;
int lib1926661B_gv_kC_MLDifficultyPulldown;
string lib1926661B_gv_kC_NextMission;
bool lib1926661B_gv_kC_MissionLaunchQuitToggled;
bool lib1926661B_gv_kC_MissionLaunchedToggled;
bool lib1926661B_gv_kC_MissionLaunchPitchPlaying;
int lib1926661B_gv_kC_StatsIndex;
text[11] lib1926661B_gv_kC_StatatisticsTitle;
text[11] lib1926661B_gv_kC_StatatisticsValue;
bool lib1926661B_gv_kC_EndCinematicFinished;
bool lib1926661B_gv_kC_EndCreditFinished;
lib1926661B_gs_KC_VictoryScreen lib1926661B_gv_kC_VictoryScreen;
int lib1926661B_gv_kC_ArchivesPanel;
int lib1926661B_gv_kC_ArchivesTitle;
int lib1926661B_gv_kC_ArchivesBackButton;
int lib1926661B_gv_kC_ArchivesQuitButton;
int lib1926661B_gv_kC_ArchivesMissionPanel;
int lib1926661B_gv_kC_ArchivesMissionTitle;
int lib1926661B_gv_kC_ArchivesMissionBonusLabel;
int lib1926661B_gv_kC_ArchivesMissionImage;
int lib1926661B_gv_kC_ArchivesAchievementPanel;
int[4] lib1926661B_gv_kC_ArchivesAchievements;
int lib1926661B_gv_kC_ArchivesDifficultyPanel;
int[5] lib1926661B_gv_kC_ArchivesDifficultyLabels;
int[5] lib1926661B_gv_kC_ArchivesDifficultyTimes;
int lib1926661B_gv_kC_ArchivesMissionPlayButton;
int lib1926661B_gv_kC_ArchivesScenePanel;
int lib1926661B_gv_kC_ArchivesSceneTitle;
int lib1926661B_gv_kC_ArchivesSceneImage;
int lib1926661B_gv_kC_ArchivesScenePlayButton;
int lib1926661B_gv_kC_ArchivesLoadingDialog;
int lib1926661B_gv_kC_ArchivesLoadingLabel;
bool lib1926661B_gv_kC_MissionArchiveOverlayCreated;
bool lib1926661B_gv_kC_ArchivesSynced;
bool lib1926661B_gv_pU_ArchivesFirstOpen;
bool lib1926661B_gv_kC_MasterArchivesEnabled;
int lib1926661B_gv_pUC_ArchivesMissionLoadingWidth;
int lib1926661B_gv_pUC_ArchivesMissionLoadingHeight;
int lib1926661B_gv_pUC_ArchivesMissionTargetWidth;
int lib1926661B_gv_pUC_ArchivesMissionTargetHeight;
trigger lib1926661B_gv_kC_TechLimitsCallback;
int lib1926661B_gv_objectiveRescueStalkers;

// Function Declarations
void lib1926661B_gf_LotCInitialize ();
bool lib1926661B_gf_IsDebug (bool lp_inBool);
void lib1926661B_gf_SetTimeScaleOverTime (fixed lp_startTimeScale, fixed lp_endTimeScale, fixed lp_over, int lp_timeType);
void lib1926661B_gf_SetGameSpeedOverTime (fixed lp_startSpeed, fixed lp_endSpeed, fixed lp_over, int lp_timeType);
string lib1926661B_gf_CurrentWord ();
int lib1926661B_gf_CurrentWordIndex ();
void lib1926661B_gf_AddRemoveBehaviorForUnitGroup (bool lp_addRemove, string lp_behavior, int lp_count, unitgroup lp_group);
void lib1926661B_gf_CreateUnitDestructorTrigger (unit lp_unit, bool lp_death, bool lp_removal, string lp_dataIdentifier, trigger lp_triggerToRun);
void lib1926661B_gf_CreateUnitDestructorEvent (unit lp_unit, bool lp_death, bool lp_removal, string lp_dataIdentifier, string lp_genericEventToSend);
void lib1926661B_gf_TurnUnitDestructorOnOff (unit lp_unit, string lp_dataIdentifier, bool lp_onOff);
void lib1926661B_gf_DestroyUnitDestructor (unit lp_unit, string lp_dataIdentifier);
unit lib1926661B_gf_DestructorEventUnit ();
text lib1926661B_gf_FormatTimeCampaign (int lp_second);
string lib1926661B_gf_KC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player);
void lib1926661B_gf_KC_CheckProgressionAchievements ();
void lib1926661B_gf_KC_MissionInit ();
void lib1926661B_gf_SendTransmissionLotC (bool lp_showPortrait, int lp_portrait, string lp_line, string lp_speaker, bool lp_waitDontWait, unit lp_unit, bool lp_playCue);
void lib1926661B_gf_SendTransmissionAdvancedLotC (text lp_name, int lp_portrait, string lp_line, string lp_speaker, bool lp_waitDontWait, unit lp_unit, bool lp_playCue, int lp_durationType, fixed lp_duration);
void lib1926661B_gf_playTalkingTransmission (string lp_conversation, string lp_model, unit lp_unit, int lp_portrait, string lp_actor, string lp_speaker);
int lib1926661B_gf_GetLastTalkingTransmission ();
void lib1926661B_gf_CreateTransportUnitLotC (string lp_unitType, int lp_amount, int lp_player, point lp_point, int lp_mode);
void lib1926661B_gf_SetTransportUnitModeLotC (unit lp_unit, int lp_mode);
void lib1926661B_gf_CampaignDirective (int lp_type, text lp_message);
void lib1926661B_gf_SaveStoryKey (string lp_string);
bool lib1926661B_gf_LoadStoryKey (string lp_string, string lp_map);
void lib1926661B_gf_AddRemoveObjectiveRePing (int lp_ping, bool lp_addRemove, fixed lp_wait, fixed lp_interval);
void lib1926661B_gf_ObjectiveRePing (int lp_ping);
void lib1926661B_gf_KC_PostMissionVictoryUpdate ();
void lib1926661B_gf_KC_GameOver ();
void lib1926661B_gf_EndCampaignMission (int lp_player, int lp_type);
void lib1926661B_gf_RunMissionVictorySequence (trigger lp_victoryCinematic);
void lib1926661B_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone);
void lib1926661B_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void lib1926661B_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void lib1926661B_gf__FadeCreateDialog ();
void lib1926661B_gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light);
void lib1926661B_gf_ZoomInPlanetPortrait ();
void lib1926661B_gf_HidePlanetPortrait ();
void lib1926661B_gf_KC_UseUnitNameAsUnitTip (unit lp_unit);
void lib1926661B_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void lib1926661B_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
bool lib1926661B_gf_KC_DisplayResourcePickupInfo ();
bool lib1926661B_gf_KC_ResourcePickupUnit (unit lp_resource);
void lib1926661B_gf_AddMissionTipUserData (string lp_tipData);
void lib1926661B_gf_DisplayMissionTip (text lp_buttonText);
void lib1926661B_gf_ShowHideMissionTip (bool lp_showHide);
void lib1926661B_gf_KC_RefreshTip ();
void lib1926661B_gf_CreateAutoSave ();
void lib1926661B_gf_CinematicModeStarted (trigger t);
void lib1926661B_gf_CinematicModeEnded (trigger t);
void lib1926661B_gf_DifficultySetting (int lp_difficulty);
void lib1926661B_gf_KC_UpdateObjectivePanelMask ();
void lib1926661B_gf_KC_UpdateErrorPanelMask ();
void lib1926661B_gf_KC_UpdateErrorPanelMaskSingle ();
void lib1926661B_gf_KC_HookAchiRedirect (string lp_map);
void lib1926661B_gf_KC_HookSave ();
void lib1926661B_gf_KL_HookupBossBar (int lp_index);
void lib1926661B_gf_DisplayBossBarLotC (int lp_index, text lp_title, string lp_portrait, int lp_maximumValue, string lp_style);
void lib1926661B_gf_SetBossBarCurrentValueLotC (int lp_index, int lp_value);
void lib1926661B_gf_SetBossBarMaximumValueLotC (int lp_index, int lp_value);
void lib1926661B_gf_ShowHideBossBarLotC (int lp_index, bool lp_showHide);
void lib1926661B_gf_KL_HookupCheckpointDirective ();
void lib1926661B_gf_FlashCheckpointReminder ();
void lib1926661B_gf_KL_HookupContPanel ();
void lib1926661B_gf_ShowHideContaminationPanel (bool lp_showHide);
void lib1926661B_gf_SetCurrentContaminationValue (fixed lp_vaue);
void lib1926661B_gf_SetMaxContaminationValue (fixed lp_vaue);
void lib1926661B_gf_SetContaminationText (text lp_text);
void lib1926661B_gf_UED_CreateCreditsPanel ();
void lib1926661B_gf_ShowHideCreditsPanel (bool lp_showHide);
void lib1926661B_gf_CreditsExitButtonPressed (trigger t);
bool lib1926661B_gf_KL_ReturnLoreState (string lp_instance);
bool lib1926661B_gf_LoreFoundLotC (string lp_instance);
void lib1926661B_gf_KL_CreateLoreWindow ();
void lib1926661B_gf_DisplayLoreWindow (string lp_instance);
void lib1926661B_gf_UpdateCodexItems ();
void lib1926661B_gf_EarnAudiologLore (string lp_instance);
void lib1926661B_gf_KL_HookupTimerWindow (int lp_index);
void lib1926661B_gf_CreateTimerWindowLotC (timer lp_timer, text lp_title, bool lp_visibility, bool lp_elapsed, int lp_index);
void lib1926661B_gf_ShowHideTimerWindowLotC (bool lp_showHide, int lp_index);
void lib1926661B_gf_DestroyTimerWindowLotC (int lp_index);
void lib1926661B_gf_KL_UpdateTimerWindow (int lp_index);
void lib1926661B_gf_TimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed, int lp_position);
void lib1926661B_gf_RepositionTimerWindowDeprecated (int lp_timerWindow);
void lib1926661B_gf_FlashTimerWindowDeprecated (fixed lp_duration, bool lp_waitOption);
void lib1926661B_gf_SetTimerWindowDangerThresholdDeprecated (fixed lp_thresholdTime);
color lib1926661B_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps);
void lib1926661B_gf_DisplayArmyButton (bool lp_doDoNot);
void lib1926661B_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max);
void lib1926661B_gf_SetProgressBarTitle (text lp_title);
void lib1926661B_gf_SetProgressBarValueRange (int lp_min, int lp_max);
void lib1926661B_gf_SetProgressBarLabel (text lp_label);
void lib1926661B_gf_SetProgressBarProgress (int lp_progress);
void lib1926661B_gf_SetProgressBarColor (color lp_color);
void lib1926661B_gf_ShowHideProgressBar (bool lp_showHide);
void lib1926661B_gf_PP_UpdateProgressBar ();
color lib1926661B_gf_GetProgressBarColorCampaign ();
int lib1926661B_gf_PP_BB_HPBarCurrentWidth ();
text lib1926661B_gf_PP_BB_HPBarFormatLabel ();
void lib1926661B_gf_PP_BB_HPBarChange ();
void lib1926661B_gf_DisplaySingularBossBarSwarmCampaign (string lp_portrait, text lp_title, int lp_max);
void lib1926661B_gf_SetSingularBossBarMaximumValueSwarmCampaign (int lp_max, bool lp_refresh);
void lib1926661B_gf_SetSingularBossBarCurrentValueSwarmCampaign (int lp_current, bool lp_refresh);
void lib1926661B_gf_SetSingularBossBarBossSwarmCampaign (unit lp_boss, bool lp_refresh);
void lib1926661B_gf_ShowHideSingularBossBarSwarmCampaign (bool lp_showHide);
void lib1926661B_gf_RefreshSingularBossBarSwarmCampaign ();
void lib1926661B_gf_SetSingularBossBarColor (color lp_color);
void lib1926661B_gf_SetSingularBossBarTitleColor (color lp_color);
void lib1926661B_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit);
void lib1926661B_gf_ShowHideHeroPanel (int lp_slot, bool lp_showHide);
void lib1926661B_gf_KC_ShowHideAllHeroPanels (bool lp_showHide);
void lib1926661B_gf_KC_CreateHeroPanel (int lp_index);
void lib1926661B_gf_KC_UpdateHeroPanel (int lp_index);
void lib1926661B_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip);
void lib1926661B_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color);
void lib1926661B_gf_KC_HookupCastingPanel (unit lp_caster);
void lib1926661B_gf_ShowHideNukeCastingPanel (bool lp_showHide);
void lib1926661B_gf_KC_CreateForcePanel ();
int lib1926661B_gf_KC_ReturnUnitSupplyCost (int lp_amount, string lp_unitType);
int lib1926661B_gf_KC_SuppliesAvailable (int lp_player);
void lib1926661B_gf_ShowHideForcePanel (int lp_playerOwner, bool lp_showHide, region lp_spawnRegion, point lp_landPoint);
void lib1926661B_gf_FlashForcePanel ();
void lib1926661B_gf_KC_CreateForceCondor (int lp_type);
void lib1926661B_gf_KC_CreateForceUnits (int lp_type);
void lib1926661B_gf_KC_UnloadForceUnits (point lp_point);
void lib1926661B_gf_KC_CreatePhasePanel ();
void lib1926661B_gf_SetPhasePanelPhase (int lp_phase);
void lib1926661B_gf_ShowHidePhasePanel (bool lp_showHide);
void lib1926661B_gf_KC_CreatePConfirm ();
void lib1926661B_gf_ShowHidePhaseConfirmationPanel (bool lp_showHide);
void lib1926661B_gf_SetPhaseConfirmationPanelText (text lp_text);
void lib1926661B_gf_EnableDisableConfirmationPanel (bool lp_enableDisable);
void lib1926661B_gf_KC_CreateUnitChoicePanel ();
void lib1926661B_gf_ShowHideUnitChoicePanel (bool lp_showHide);
void lib1926661B_gf_CreateTipCampaign (string lp_tipData, int lp_tipType, playergroup lp_players);
void lib1926661B_gf_SetAllSoundChannelVolumesCampaign (int lp_mode);
void lib1926661B_gf_MuteUnmuteAllSoundChannels (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players);
unit lib1926661B_gf_KC_TownBestWorkerRallyMineral (unit lp_town);
void lib1926661B_gf_SetWorkerRallyPointforTown (unit lp_town);
void lib1926661B_gf_SetWorkerRallyPointsforPlayersTowns (int lp_player);
void lib1926661B_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player);
void lib1926661B_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void lib1926661B_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void lib1926661B_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void lib1926661B_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount);
text lib1926661B_gf_FormatTextWithReplacement (text lp_text, text lp_replacement1, text lp_replacement2, text lp_replacement3, text lp_replacement4);
unit lib1926661B_gf_KC_HatcheryBestWorkerRallyMineral (unit lp_hatcher);
void lib1926661B_gf_SetHatcheryRallyPoint (unit lp_hatchery, point lp_rallyPoint);
void lib1926661B_gf_SetAllHatcheriesRallyPoints (int lp_player);
string lib1926661B_gf_KC_ReticleModelOfStyle (int lp_type, int lp_size);
string lib1926661B_gf_KC_ReticleTextFontOfStyle (int lp_type);
void lib1926661B_gf_KC_ReticleApplyTint (actor lp_reticle, int lp_type2);
void lib1926661B_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location);
void lib1926661B_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint);
void lib1926661B_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound);
bool lib1926661B_gf_PlayerIsInCombatCampaign (int lp_player);
void lib1926661B_gf_ShareVisionAmongPlayers (playergroup lp_players);
void lib1926661B_gf_CinematicModeSwarmCampaign (bool lp_onOff, fixed lp_duration);
bool lib1926661B_gf_KC_StartingWorkerAutoHarvestEnabled ();
void lib1926661B_gf_StartingWorkersAutoHarvest (region lp_regionMineralWorker, region lp_regionGasWorker);
void lib1926661B_gf_KC_ResetAbilityCD (abilcmd lp_abilityCommand, unit lp_hero);
int lib1926661B_gf_KC_DifficultyIndex (int lp_difficulty);
int lib1926661B_gf_KC_DifficultyFromIndex (int lp_index);
void lib1926661B_gf_KC_SetCampaignDifficulty (int lp_difficulty);
int lib1926661B_gf_ReturnCampaignDifficulty ();
int lib1926661B_gf_DifficultyValueInteger (int lp_normal, int lp_hard);
fixed lib1926661B_gf_DifficultyValueReal (fixed lp_normal, fixed lp_hard);
bool lib1926661B_gf_DifficultyValueBoolean (bool lp_normal, bool lp_hard);
string lib1926661B_gf_DifficultyValueUnitType (string lp_normal, string lp_hard);
string lib1926661B_gf_StoryMapLoadingScreenImage (string lp_map);
string lib1926661B_gf_StoryMapLoadingScreenVictoryImage (string lp_map);
string lib1926661B_gf_StoryMapMissionArchiveBackgroundImage (string lp_map);
string lib1926661B_gf_StoryMapMissionArchiveIconImage (string lp_map);
string lib1926661B_gf_StoryMapMissionSummaryImage (string lp_map);
bool lib1926661B_gf_StoryMapTypeCheck (string lp_map, int lp_mapType);
string lib1926661B_gf_StoryMapFile (string lp_map);
text lib1926661B_gf_StoryMapName (string lp_map);
text lib1926661B_gf_StoryMapNameLowerCase (string lp_map);
text lib1926661B_gf_StoryMapHelp (string lp_map);
text lib1926661B_gf_StoryMapHelp2 (string lp_map);
text lib1926661B_gf_StoryMapHelp3 (string lp_map);
text lib1926661B_gf_StoryMapHelp4 (string lp_map);
string lib1926661B_gf_StoryMapContactPortrait (string lp_map);
int lib1926661B_gf_MissionStatusAge (string lp_mission, int lp_status);
int lib1926661B_gf_MissionStatusAge2 (string lp_mission, int lp_status);
bool lib1926661B_gf_MissionStatusAge3 (string lp_mission, int lp_status);
int lib1926661B_gf_MissionStatus (string lp_mission);
int lib1926661B_gf_MissionStatus2 (string lp_mission);
bool lib1926661B_gf_MissionStatusCheck (string lp_mission, int lp_status);
bool lib1926661B_gf_MissionStatusCheck2 (string lp_mission, int lp_status);
string lib1926661B_gf_MissionPitch (string lp_mission);
string lib1926661B_gf_TravelPitch (string lp_mission);
int lib1926661B_gf_NumberOfMissions (int lp_options);
int lib1926661B_gf_NumberOfMissionsAll (int lp_options);
int lib1926661B_gf_NumberOfMissionArcsCompleted ();
int lib1926661B_gf_MissionCompleteBestTime (string lp_mission, int lp_difficulty);
int lib1926661B_gf_MissionCompleteBestTImeArchives (string lp_mission, int lp_difficulty);
bool lib1926661B_gf_ReturnNotificationState (string lp_notifactionName);
void lib1926661B_gf_SaveNotificationState (string lp_notifactionName, bool lp_state);
string lib1926661B_gf_CurrentMap ();
string lib1926661B_gf_MissionArmyCategoryUnlocked (string lp_mission);
int lib1926661B_gf_MissionRewardTotalEarned (string lp_mission, string lp_type);
int lib1926661B_gf_MissionRewardTotal (string lp_mission, string lp_type);
string lib1926661B_gf_MissionDefaultMusic ();
bool lib1926661B_gf_MissionIsUEDFL (string lp_mission);
bool lib1926661B_gf_MissionCompletedOnDifficulty (string lp_mission, int lp_difficulty);
bool lib1926661B_gf_MissionCompletedOnDifficulty2 (string lp_mission, int lp_difficulty);
string lib1926661B_gf_KC_MapUserDataInstance (string lp_map);
string lib1926661B_gf_KC_MapDataFromUserDataInstance (string lp_map);
string lib1926661B_gf_KC_StoryMapBankID (string lp_map);
bool lib1926661B_gf_KC_MissionisInstallation (string lp_mission);
int lib1926661B_gf_KC_CompletedMissionCountOnDifficulty (int lp_difficulty);
void lib1926661B_gf_LaunchMission (string lp_mission, bool lp_simulation, int lp_difficulty);
void lib1926661B_gf_StoryMapSwitch (string lp_nextMap);
void lib1926661B_gf_UpdateMissionFlow ();
void lib1926661B_gf_KC_SetMissionStatusAge (string lp_mission, int lp_status, int lp_age);
void lib1926661B_gf_KC_IncreaseMissionAge (string lp_mission);
void lib1926661B_gf_KC_CompleteMission (string lp_mission);
void lib1926661B_gf_KC_UpdateSimulationMissionAges (string lp_simulationMap);
void lib1926661B_gf_KC_MarkMissionAsStatus (string lp_mission, int lp_status);
void lib1926661B_gf_KC_LockUnlockMissionIfCondition (bool lp_lockUnlock, string lp_mission, bool lp_condition);
void lib1926661B_gf_KC_SetMissionCompletionBestTime (string lp_mIssion, int lp_difficulty, int lp_time);
void lib1926661B_gf_KC_SaveMapToBank (string lp_bankMap, bank lp_targetBank, bool lp_isSimulation);
void lib1926661B_gf_KC_LoadMapFromBank (string lp_bankMap, bank lp_sourceBank);
void lib1926661B_gf_UEDFL_InitMaps ();
int lib1926661B_gf_KC_GetObjectiveForData (string lp_objectiveData);
string lib1926661B_gf_KC_ObjectiveUserDataInstance (string lp_objective);
text lib1926661B_gf_MissionObjectiveDescription (string lp_objective);
bool lib1926661B_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state);
bool lib1926661B_gf_MissionObjectiveIsPrimary (string lp_objective);
text lib1926661B_gf_MissionObjectiveName (string lp_objective);
int lib1926661B_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type);
int lib1926661B_gf_MissionObjectiveRewardsAvailable (string lp_objective, string lp_type);
int lib1926661B_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type);
int lib1926661B_gf_MissionObjectiveItemCount (string lp_objective);
int lib1926661B_gf_MissionObjectiveProgress (string lp_objective);
int lib1926661B_gf_MissionObjectiveRewards (string lp_objective, string lp_type);
int lib1926661B_gf_KC_MissionObjectivePreviousProgress (string lp_objective);
int lib1926661B_gf_KC_GetObjectiveTypeInteger (string lp_objective);
bool lib1926661B_gf_KC_GetObjectiveTypeBoolean (string lp_objective);
bool lib1926661B_gf_KC_AllObjectivesCompletedForMission (string lp_mission);
bool lib1926661B_gf_KC_ObjectiveRewardDivided (string lp_objective);
string lib1926661B_gf_KC_ObjectiveTableString (string lp_objective);
text lib1926661B_gf_KC_CampaignObjectiveBonusText (string lp_objective);
void lib1926661B_gf_SetMissionObjectiveProgress2 (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label, bool lp_updatetext);
void lib1926661B_gf_SetMissionObjectiveProgressAdvanced (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label, bool lp_updatetext, bool lp_updateObjectiveStateOption);
void lib1926661B_gf_UpdateMissionObjectiveText (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label);
void lib1926661B_gf_CreateObjectiveCampaign (string lp_objectiveData);
void lib1926661B_gf_SetObjectiveStateCampaign (string lp_objective, int lp_state);
void lib1926661B_gf_KC_MissionObjectiveProgressDataSet (string lp_objective, int lp_progress, bool lp_updateObjectiveState);
void lib1926661B_gf_KC_MissionObjectivePreviousProgressSet (string lp_objective, int lp_progress);
void lib1926661B_gf_DisplayConversationTimestamp (string lp_conversation);
void lib1926661B_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait);
void lib1926661B_gf_HaltTimestamp ();
void lib1926661B_gf_KC_DisplayCinematicTimestamp (string lp_scene);
void lib1926661B_gf_PlayCinematic (string lp_scene, bool lp_animatic);
string lib1926661B_gf_KC_CinematicCutscene (string lp_scene);
void lib1926661B_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip);
void lib1926661B_gf_CampaignPlayCutscene2 (string lp_file, bool lp_waitDontWait, bool lp_allowSkip);
bool lib1926661B_gf_CampaignCutsceneWasSkipped ();
void lib1926661B_gf_SetStoryScenePlayed (string lp_scene, bool lp_played);
void lib1926661B_gf_KC_FadeAllSoundsExceptMusic (fixed lp_duration, bool lp_wait);
text lib1926661B_gf_StorySceneName (string lp_scene);
bool lib1926661B_gf_StoryScenePlayed (string lp_scene);
string lib1926661B_gf_KC_SceneMovie (string lp_scene);
void lib1926661B_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player);
bool lib1926661B_gf_CampaignTechUnitIsEnabled (string lp_techUnit);
string lib1926661B_gf_KC_CampaignTechUnitType (string lp_techUnit);
void lib1926661B_gf_KC_UpdateWeaponArmorUpgrades (int lp_player);
void lib1926661B_gf_KC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player);
void lib1926661B_gf_KC_ApplyTech (int lp_player);
void lib1926661B_gf_KC_UpdateGlossary (string lp_map, int lp_player);
void lib1926661B_gf_KC_UpdateTechStates (int lp_player);
void lib1926661B_gf_KC_ResetTech ();
void lib1926661B_gf_KC_StoreTechBonusAtMissionBeginning ();
void lib1926661B_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player);
string lib1926661B_gf_KC_HelpUnitPanel_EnabledUnitTypeStringID (string lp_unitType);
bool lib1926661B_gf_KC_HelpUnitPanel_UnitTypeEnabled (string lp_unitType);
void lib1926661B_gf_KC_HelpUnitPanel_AddEnabledUnitType (string lp_unitType);
void lib1926661B_gf_KC_HelpUnitPanel_Reset ();
void lib1926661B_gf_KC_HelpUnitPanel_UpdatePanel ();
void lib1926661B_gf_KC_HelpTechTree_UpdatePanel ();
void lib1926661B_gf_ZerglingRespawnSetPrimaryHatchery (unit lp_hatchery);
string lib1926661B_gf_ZS_HeroUnitType (int lp_hero);
void lib1926661B_gf_CreateHero2 (point lp_spawnPoint, int lp_player, int lp_type, fixed lp_facing, int lp_flags, int lp_purpose);
void lib1926661B_gf_ZS_CreateKerriganPing ();
void lib1926661B_gf_RegisterCampaignKerrigan (unit lp_kerrigan);
text lib1926661B_gf_StoryArmyCategoryName (string lp_armyCategory);
text lib1926661B_gf_StoryArmyCategoryName2 (string lp_armyCategory);
string lib1926661B_gf_StoryArmyCategoryIcon (string lp_armyCategory);
bool lib1926661B_gf_StoryArmyCategoryStateCheck (string lp_armyCategory, int lp_state);
string lib1926661B_gf_StoryArmyCategoryPlanetCamera (string lp_armyCategory);
string lib1926661B_gf_StoryArmyCategoryEvolutionMission (string lp_armyCategory);
void lib1926661B_gf_KC_SetArmyCategoryState (string lp_armyCategory, int lp_state);
void lib1926661B_gf_KC_UpdateArmyCategoryStates (int lp_player);
string lib1926661B_gf_KC_TechUnitOfArmyCategory (string lp_armyCategory);
string lib1926661B_gf_KC_ArmyCategoryOfTechUnit (string lp_techUnit);
string lib1926661B_gf_KC_StoryArmyCategoryUnitType (string lp_armyCategory);
int lib1926661B_gf_KC_StoryArmyCategoryState (string lp_armyCategory);
void lib1926661B_gf_KC_SaveArmyCategoryToBank (bank lp_bank, string lp_section);
void lib1926661B_gf_KC_LoadArmyCategoryFromBank (bank lp_bank, string lp_section);
void lib1926661B_gf_KC_ApplyArmyTech (int lp_player);
void lib1926661B_gf_KC_ResetArmyTech ();
bool lib1926661B_gf_LastMap2 ();
void lib1926661B_gf_ULoadCampaignData (string lp_map);
void lib1926661B_gf_KC_AutoHeatMapTestMode ();
void lib1926661B_gf_PC_CompletedSavesEnable ();
void lib1926661B_gf_PrepareForMission (string lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryAgain, int lp_difficulty);
void lib1926661B_gf_PrepareForStoryMode (int lp_victoryDefeat, int lp_difficulty);
void lib1926661B_gf_PrepareForStoryMapSwitch (string lp_nextMap);
void lib1926661B_gf_PrepareForStoryModeTransitionalSave ();
void lib1926661B_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition);
string lib1926661B_gf_PP_NextMission (string lp_mission, bool lp_simulation, int lp_victoryDefeat);
string lib1926661B_gf_LastMap3 (string lp_mission, bool lp_simulation, int lp_victoryDefeat);
bool lib1926661B_gf_CurrentMissionIsSimulation ();
string lib1926661B_gf_LastMap ();
bool lib1926661B_gf_LastMapConditionCheck (int lp_condition);
string lib1926661B_gf_LastMission ();
bool lib1926661B_gf_LastMissionConditionCheck (int lp_condition);
string lib1926661B_gf_LastSuccessfulMission ();
void lib1926661B_gf_KC_ClearSaveData ();
void lib1926661B_gf_KC_ClearSavedTimes ();
void lib1926661B_gf_KC_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat);
void lib1926661B_gf_KC_LoadAllTransitionData (string lp_map);
void lib1926661B_gf_KC_SaveTransitionVars (bank lp_targetBank, string lp_map, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, bool lp_resultFromSimulation, bool lp_resultFromVictoryAgain);
void lib1926661B_gf_KC_LoadTransitionVars (bank lp_sourceBank, string lp_map);
void lib1926661B_gf_KC_PrepareLoadingScreen (string lp_nextMap, bool lp_restart);
void lib1926661B_gf_KC_UpdateCampaignScreen (string lp_mission);
void lib1926661B_gf_KC_CampaignPreload ();
void lib1926661B_gf_ResetCampaignData ();
void lib1926661B_gf_KC_OpenCampaignBank ();
bool lib1926661B_gf_KC_CampaignBankExists ();
void lib1926661B_gf_KC_SaveCampaignBank ();
bool lib1926661B_gf_KC_MissionSectionExists (string lp_mission);
void lib1926661B_gf_KC_SetMissionSectionExists (string lp_mission, bool lp_exist);
void lib1926661B_gf_KC_LoadMissionSections ();
void lib1926661B_gf_KC_ClampProgressToMission (string lp_mission);
string lib1926661B_gf_KC_BankSectionName (string lp_map, string lp_section);
int lib1926661B_gf_KC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default);
bool lib1926661B_gf_KC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default);
string lib1926661B_gf_KC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default);
void lib1926661B_gf_KC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default);
void lib1926661B_gf_KC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default);
void lib1926661B_gf_KC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default);
string lib1926661B_gf_KC_BankMIssionDifficultyKey (string lp_mission, int lp_difficulty);
void lib1926661B_gf_KC_MissionLaunchClose ();
void lib1926661B_gf_KC_MissionLaunchPlayPitch ();
int lib1926661B_gf_KC_MissionLaunchSelectedDifficulty ();
string lib1926661B_gf_KC_MissionLaunchBackground (string lp_map);
string lib1926661B_gf_KC_MissionProperty (string lp_field);
void lib1926661B_gf_AddVictoryPanelStatistic (string lp_statistic);
void lib1926661B_gf_AddVictoryPanelCustomStatistic (string lp_name, string lp_progress);
void lib1926661B_gf_KC_CampaignVictory ();
void lib1926661B_gf_DisplayCampaignVictoryScoreScreen (string lp_mission);
void lib1926661B_gf_PU_CreateVictoryScreen ();
void lib1926661B_gf_PU_UpdateVictoryScreen (string lp_mission);
void lib1926661B_gf_KC_VSDisplayRestartDialog ();
string lib1926661B_gf_KC_VictoryScreenBackground (string lp_map);
string lib1926661B_gf_MissionCatalogPropertyVictoryScreen (string lp_field, string lp_mission);
string lib1926661B_gf_KC_ArchivesDataString (int lp_archive);
string lib1926661B_gf_KC_ArchivesDataTypeString (int lp_archive);
void lib1926661B_gf_KC_ArchivesOverlayCreate ();
void lib1926661B_gf_KC_ArchivesClosed ();
void lib1926661B_gf_DisplayMissionArchives ();
string lib1926661B_gf_KC_ArchivesLastMissionSelected ();
void lib1926661B_gf_KC_ArchivesUpdate ();
int lib1926661B_gf_KC_ArchivesScenePriority (string lp_scene);
int lib1926661B_gf_KC_ArchivesMissionPriority (string lp_mission);
string lib1926661B_gf_PU_ArchivesSelectedScene ();
void lib1926661B_gf_PU_ArchivesSetUV (string lp_side, fixed lp_value);
void lib1926661B_gf_PU_ArchivesSetUVs (fixed lp_centerX, fixed lp_centerY, fixed lp_scale);
bool lib1926661B_gf_CampaignDebugModeIsOn (string lp_mode);
void lib1926661B_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger);
void lib1926661B_gf_PurchaseStorymodeTech ();
void lib1926661B_gf_KC_DefaultTechProgress (string lp_mission);

// Trigger Declarations
trigger lib1926661B_gt_KL_StartGameTimer;
trigger lib1926661B_gt_KL_GamePaused;
trigger lib1926661B_gt_KL_GameResumed;
trigger lib1926661B_gt_KC_CheckPorgressionAchievements;
trigger lib1926661B_gt_KC_ObjectiveRePingController;
trigger lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueueOneMinute;
trigger lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueue;
trigger lib1926661B_gt_KC_AbortMission;
trigger lib1926661B_gt_KC_CampaignUnit;
trigger lib1926661B_gt_KC_CampaignUnitCreated;
trigger lib1926661B_gt_KC_CampaignUnitChangeOwner;
trigger lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes;
trigger lib1926661B_gt_KC_ResourcePickupTip;
trigger lib1926661B_gt_KC_ResourcePickup;
trigger lib1926661B_gt_KC_MissionTipClicked;
trigger lib1926661B_gt_KC_CineModeStart;
trigger lib1926661B_gt_KC_CineModeEnd;
trigger lib1926661B_gt_CinematicModeOn;
trigger lib1926661B_gt_CinematicModeOff;
trigger lib1926661B_gt_UED_CycleCreditSplash;
trigger lib1926661B_gt_UED_CreditsButtonPushed;
trigger lib1926661B_gt_UED_HideCredits;
trigger lib1926661B_gt_KL_LoreWindowClosed;
trigger lib1926661B_gt_KC_LoreWindowCineHide;
trigger lib1926661B_gt_KL_UpdateTimerWindow;
trigger lib1926661B_gt_KL_TimerExpires1;
trigger lib1926661B_gt_KL_TimerExpires2;
trigger lib1926661B_gt_KL_TimerExpires3;
trigger lib1926661B_gt_PU_TimerWindowFlash;
trigger lib1926661B_gt_PU_TimerWindowThresholdCrossed;
trigger lib1926661B_gt_PU_TimerWindowLoadUpdate;
trigger lib1926661B_gt_KC_FlashArmyButtonHelpTip;
trigger lib1926661B_gt_KC_ArmyButtonUsed;
trigger lib1926661B_gt_KC_ArmyButtonMissionInit;
trigger lib1926661B_gt_KC_BB_BossHPChanged;
trigger lib1926661B_gt_PP_BB_MouseHoverText;
trigger lib1926661B_gt_KC_HeroPanelUpdate;
trigger lib1926661B_gt_KC_HeroUIUnitDamaged;
trigger lib1926661B_gt_KC_HeroUnitDead;
trigger lib1926661B_gt_KC_HeroPanelCineShow;
trigger lib1926661B_gt_KC_HeroPanelCineHide;
trigger lib1926661B_gt_KopruluCampaignPingSound;
trigger lib1926661B_gt_KC_HideNukePanelAfterCast;
trigger lib1926661B_gt_KC_NukeHideCinematic;
trigger lib1926661B_gt_KC_ForceButtonPressed;
trigger lib1926661B_gt_KC_ForceTimersUpdate;
trigger lib1926661B_gt_KC_ForceTimerEnd;
trigger lib1926661B_gt_KC_ConfirmPanel_Btn;
trigger lib1926661B_gt_KC_UnitChoice_Ultralisk;
trigger lib1926661B_gt_KC_UnitChoice_Mutalisk;
trigger lib1926661B_gt_KC_SetCasualRallyPoints;
trigger lib1926661B_gt_DisplayTimestamp;
trigger lib1926661B_gt_DisplayTimestampSkippable;
trigger lib1926661B_gt_KC_CampaignCutsceneSkipped;
trigger lib1926661B_gt_KC_PlayCinematicSkippable;
trigger lib1926661B_gt_KC_CinematicDetectSkipping;
trigger lib1926661B_gt_KC_CinematicHandleSkipping;
trigger lib1926661B_gt_KC_WaitForDialogCutscene;
trigger lib1926661B_gt_KC_WaitForCutscene;
trigger lib1926661B_gt_UntitledTrigger001;
trigger lib1926661B_gt_KC_CommandCenterPrimarySearch;
trigger lib1926661B_gt_KC_CreateLaunchScreen;
trigger lib1926661B_gt_KC_MissionLaunchQuitOKClicked;
trigger lib1926661B_gt_KC_MissionLaunchQuitCanceledClicked;
trigger lib1926661B_gt_KC_MissionLaunchQuitClicked;
trigger lib1926661B_gt_KC_MissionLaunchBackClicked;
trigger lib1926661B_gt_KC_MissionPitchPlayClicked;
trigger lib1926661B_gt_KC_MissionPitchStopClicked;
trigger lib1926661B_gt_KC_MissionLaunchClicked;
trigger lib1926661B_gt_KC_EndCinematic;
trigger lib1926661B_gt_KC_EndCredits;
trigger lib1926661B_gt_KC_EndCreditsEnds;
trigger lib1926661B_gt_KC_VSAchievements;
trigger lib1926661B_gt_KC_VSScreenQuit;
trigger lib1926661B_gt_KC_VSScreenContinue;
trigger lib1926661B_gt_KC_VSScreenPlayAgain;
trigger lib1926661B_gt_KC_VSRestartCancel;
trigger lib1926661B_gt_KC_VSRestartRestart;
trigger lib1926661B_gt_KC_ArchivesCreate;
trigger lib1926661B_gt_KC_ArchivesSelectionChanged;
trigger lib1926661B_gt_KC_ArchivesMissionPlayClicked;
trigger lib1926661B_gt_KC_ArchivesScenePlayClicked;
trigger lib1926661B_gt_KC_ArchivesCloseClicked;
trigger lib1926661B_gt_KC_ArchivesSynced;
trigger lib1926661B_gt_ObjectiveRescueStalkersCreate;
trigger lib1926661B_gt_ObjectiveRescueStalkersComplete;
trigger lib1926661B_gt_ObjectiveRescueStalkersUpdate;
trigger lib1926661B_gt_ObjectiveRescueStalkersFailed;

// Library Initialization
void lib1926661B_InitVariables ();


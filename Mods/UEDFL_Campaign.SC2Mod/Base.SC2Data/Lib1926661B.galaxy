include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "LibAE8FC9D3"

include "Lib1926661B_h"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (Koprulu Classic)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1926661B_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libVCMI_InitVariables();
    libAE8FC9D3_InitVariables();
}

// Variable Initialization
bool lib1926661B_InitVariables_completed = false;

void lib1926661B_InitVariables () {
    int init_i;
    int init_i1;

    if (lib1926661B_InitVariables_completed) {
        return;
    }

    lib1926661B_InitVariables_completed = true;

    lib1926661B_gv_talkingPortrait = c_invalidPortraitId;
    lib1926661B_gv_talkingPortraitActor = "";
    lib1926661B_gv_talkingTransmission = c_invalidTransmissionId;
    for (init_i = 0; init_i <= lib1926661B_gv_kC_RePing_MAX; init_i += 1) {
        lib1926661B_gv_kC_RePingArray[init_i] = c_invalidPingId;
    }
    lib1926661B_gv__FadeDialog = c_invalidDialogId;
    lib1926661B_gv__FadeImage = c_invalidDialogControlId;
    lib1926661B_gv_kC_PlanetPortrait = c_invalidPortraitId;
    lib1926661B_gv_kC_ObjectivePanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_ErrorPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_MissionUIContainer = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lib1926661B_gv_kC_MissionTipType[init_i] = libNtve_ge_TipType_NormalTip;
    }
    lib1926661B_gv_kC_MissionHelpButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_MissionHelpButtonTipPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_SavePanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_SaveLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib1926661B_gv_bossBar[init_i].lv_panel = c_invalidDialogControlId;
        lib1926661B_gv_bossBar[init_i].lv_portrait = c_invalidDialogControlId;
        lib1926661B_gv_bossBar[init_i].lv_progressBar = c_invalidDialogControlId;
        lib1926661B_gv_bossBar[init_i].lv_title = c_invalidDialogControlId;
    }
    lib1926661B_gv_kL_CheckpointDirective = c_invalidDialogControlId;
    lib1926661B_gv_contaminationPanel.lv_panel = c_invalidDialogControlId;
    lib1926661B_gv_contaminationPanel.lv_valueLabel = c_invalidDialogControlId;
    lib1926661B_gv_contaminationPanel.lv_progressBar = c_invalidDialogControlId;
    lib1926661B_gv_uED_CreditsPanel = c_invalidDialogControlId;
    lib1926661B_gv_uED_CreditsBackground = c_invalidDialogControlId;
    lib1926661B_gv_uED_CreditsButton = c_invalidDialogControlId;
    lib1926661B_gv_kL_LoreWindow.lv_window = c_invalidDialogControlId;
    lib1926661B_gv_kL_LoreWindow.lv_closeButton = c_invalidDialogControlId;
    lib1926661B_gv_kL_LoreWindow.lv_descriptionLabel = c_invalidDialogControlId;
    lib1926661B_gv_kL_LoreWindow.lv_backgroundImage = c_invalidDialogControlId;
    lib1926661B_gv_kL_LoreWindow.lv_titleLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= lib1926661B_gv_kL_MaxActiveTimerWindows; init_i += 1) {
        lib1926661B_gv_timerPanel[init_i].lv_panel = c_invalidDialogControlId;
        lib1926661B_gv_timerPanel[init_i].lv_titleLabel = c_invalidDialogControlId;
        lib1926661B_gv_timerPanel[init_i].lv_timeLabel = c_invalidDialogControlId;
    }
    lib1926661B_gv_timerWindow.lv_panel = c_invalidDialogControlId;
    lib1926661B_gv_timerWindow.lv_iconImage = c_invalidDialogControlId;
    lib1926661B_gv_timerWindow.lv_cooldownImage = c_invalidDialogControlId;
    lib1926661B_gv_timerWindow.lv_damageTakenImage = c_invalidDialogControlId;
    lib1926661B_gv_timerWindow.lv_damageTakenLabel = c_invalidDialogControlId;
    lib1926661B_gv_timerWindow.lv_nameLabel = c_invalidDialogControlId;
    lib1926661B_gv_timerWindow.lv_button = c_invalidDialogControlId;
    lib1926661B_gv_kC_TimerWindowHighlightFrame = c_invalidDialogControlId;
    lib1926661B_gv_kC_TimerWindowDangerThreshold = 180.0;
    lib1926661B_gv_kCTimerWindowTimer = TimerCreate();
    lib1926661B_gv_kC_ArmyButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArmyButtonTipPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryStatDlg = c_invalidDialogId;
    lib1926661B_gv_pP_ProgressBarPanel = c_invalidDialogControlId;
    lib1926661B_gv_pP_ProgressBarLabelTitle = c_invalidDialogControlId;
    lib1926661B_gv_pP_ProgressBarLabelBarLeft = c_invalidDialogControlId;
    lib1926661B_gv_pP_ProgressBarLabelBarRight = c_invalidDialogControlId;
    lib1926661B_gv_pP_ProgressBarImageBar = c_invalidDialogControlId;
    lib1926661B_gv_pP_ProgressBarMax = 100;
    lib1926661B_gv_pPC_ProgressBarWidth = 399;
    lib1926661B_gv_pPC_ProgressBarHeight = 27;
    lib1926661B_gv_pP_BB_Race = lib1926661B_ge_BossBarRaceDeprecated_Terran;
    lib1926661B_gv_pP_BB_Panel = c_invalidDialogControlId;
    lib1926661B_gv_pP_BB_PortraitImage = c_invalidDialogControlId;
    lib1926661B_gv_pP_BB_TitleLabel = c_invalidDialogControlId;
    lib1926661B_gv_pP_BB_HpLabel = c_invalidDialogControlId;
    lib1926661B_gv_pP_BB_HpFullImage = c_invalidDialogControlId;
    lib1926661B_gv_pP_BB_HpCurrentImage = c_invalidDialogControlId;
    lib1926661B_gv_pP_BB_BorderImage = c_invalidDialogControlId;
    lib1926661B_gv_pP_BB_HpBackground = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib1926661B_gv_kC_HeroPanel[init_i].lv_panel = c_invalidDialogControlId;
        lib1926661B_gv_kC_HeroPanel[init_i].lv_iconImage = c_invalidDialogControlId;
        lib1926661B_gv_kC_HeroPanel[init_i].lv_cooldownImage = c_invalidDialogControlId;
        lib1926661B_gv_kC_HeroPanel[init_i].lv_damageTakenImage = c_invalidDialogControlId;
        lib1926661B_gv_kC_HeroPanel[init_i].lv_damageTakenLabel = c_invalidDialogControlId;
        lib1926661B_gv_kC_HeroPanel[init_i].lv_nameLabel = c_invalidDialogControlId;
        lib1926661B_gv_kC_HeroPanel[init_i].lv_button = c_invalidDialogControlId;
    }
    lib1926661B_gv_kC_NukePanel.lv_nukePanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_NukePanel.lv_commandPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_ForcePanel.lv_panel = c_invalidDialogControlId;
    lib1926661B_gv_kC_ForcePanel.lv_titleLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        lib1926661B_gv_kC_ForcePanel.lv_button[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        lib1926661B_gv_kC_ForcePanel.lv_buttonCooldown[init_i1] = c_invalidDialogControlId;
    }
    lib1926661B_gv_kC_ForcePanel.lv_forceTimer = TimerCreate();
    lib1926661B_gv_kC_ForcePanel.lv_forceGroup = UnitGroupEmpty();
    lib1926661B_gv_kC_ForceNameCD = StringExternal("Param/Value/lib_1926661B_5183E82B");
    lib1926661B_gv_kC_ForceNameDeploying = StringExternal("Param/Value/lib_1926661B_1F03A357");
    lib1926661B_gv_kC_ForceNameReady = StringExternal("Param/Value/lib_1926661B_B1FB8E97");
    lib1926661B_gv_kC_ForceNameSupplies = StringExternal("Param/Value/lib_1926661B_0329F5F8");
    lib1926661B_gv_kC_PhasePanel.lv_panel = c_invalidDialogControlId;
    lib1926661B_gv_kC_PhasePanel.lv_phaseNumber = c_invalidDialogControlId;
    lib1926661B_gv_kC_PConfirm.lv_panel = c_invalidDialogControlId;
    lib1926661B_gv_kC_PConfirm.lv_cofirmButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_PConfirm.lv_warningLabel = c_invalidDialogControlId;
    lib1926661B_gv_kC_UnitChoicePanel.lv_panel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        lib1926661B_gv_kC_UnitChoicePanel.lv_choiceButtons[init_i1] = c_invalidDialogControlId;
    }
    lib1926661B_gv_kCX_CampaignDifficulty = 3;
    lib1926661B_gv_kC_CurrentCampaignCutscene = c_cutsceneNone;
    lib1926661B_gv_kC_CampaignCutsceneDialog = c_invalidDialogId;
    lib1926661B_gv_zS_KerriganPing = c_invalidPingId;
    lib1926661B_gv_kC_CampaignBankName = "UEDFLCampaign";
    lib1926661B_gv_kC_MLDialog = c_invalidDialogId;
    lib1926661B_gv_kC_MLPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLTitle = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLObjective = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLContactPortrait = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLSubtitleFrame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib1926661B_gv_kC_MLAchievements[init_i] = c_invalidDialogControlId;
    }
    lib1926661B_gv_kC_MLPlanetView = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLPlanetViewChoice = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLChoiceAButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLChoiceBButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLChoiceCButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLLaunchButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLQuitButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLBackButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLPitchPlayButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLPitchStopButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_MLDifficultyPulldown = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBackgroundImage = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelMissionTitle = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelVictoryTitle = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelTime = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2 = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnPlayAgain = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnPlayAgain2 = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartDifficultyPulldown = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartRestartButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartCancelButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle7 = c_invalidDialogControlId;
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle9 = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle5[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle6[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle8[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle2[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle3[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle4[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib1926661B_gv_kC_VictoryScreen.lv_zS_VSAchievementTitle2[init_i1] = c_invalidDialogControlId;
    }
    lib1926661B_gv_kC_ArchivesPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesTitle = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesBackButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesQuitButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesMissionPanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesMissionTitle = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesMissionBonusLabel = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesMissionImage = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesAchievementPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib1926661B_gv_kC_ArchivesAchievements[init_i] = c_invalidDialogControlId;
    }
    lib1926661B_gv_kC_ArchivesDifficultyPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib1926661B_gv_kC_ArchivesDifficultyLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib1926661B_gv_kC_ArchivesDifficultyTimes[init_i] = c_invalidDialogControlId;
    }
    lib1926661B_gv_kC_ArchivesMissionPlayButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesScenePanel = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesSceneTitle = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesSceneImage = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesScenePlayButton = c_invalidDialogControlId;
    lib1926661B_gv_kC_ArchivesLoadingDialog = c_invalidDialogId;
    lib1926661B_gv_kC_ArchivesLoadingLabel = c_invalidDialogControlId;
    lib1926661B_gv_pU_ArchivesFirstOpen = true;
    lib1926661B_gv_pUC_ArchivesMissionLoadingWidth = 1920;
    lib1926661B_gv_pUC_ArchivesMissionLoadingHeight = 1080;
    lib1926661B_gv_pUC_ArchivesMissionTargetWidth = 960;
    lib1926661B_gv_pUC_ArchivesMissionTargetHeight = 851;
    lib1926661B_gv_objectiveRescueStalkers = c_invalidObjectiveId;
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Init
//--------------------------------------------------------------------------------------------------
include "Script/LotC_Init"

//--------------------------------------------------------------------------------------------------
// Custom Script: Unit Destructor (Trigger)
//--------------------------------------------------------------------------------------------------
bool UnitDestructorTrigger_TriggerFunc(bool testConds, bool runActions) {
    string lv_value = "trig_DSTRCT"+"&"+IntToString(UnitGetTag(EventUnit()));
    trigger lv_trigger = DataTableGetTrigger(true, lv_value);
    if(lv_trigger != null) {
        TriggerExecute(lv_trigger, true, false);
    }
    DataTableValueRemove(true, lv_value);
    DataTableValueRemove(true, lv_value+"_Destructor");
    TriggerDestroy(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Unit Destructor (Event)
//--------------------------------------------------------------------------------------------------
bool UnitDestructorEvent_TriggerFunc(bool testConds, bool runActions) {
    string lv_value = "event_DSTRCT"+"&"+IntToString(UnitGetTag(EventUnit()));
    string lv_event = DataTableGetString(true, lv_value);
    DataTableSetUnit(false, TriggerEventParamName(lv_event, "TriggeringUnit"), EventUnit());
    TriggerSendEvent(lv_event);
    DataTableValueRemove(true, lv_value);
    DataTableValueRemove(true, lv_value+"_Destructor");
    TriggerDestroy(TriggerGetCurrent());
    return true;
} 

//--------------------------------------------------------------------------------------------------
// Custom Script: TalkingPortrait
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_showTalkingPortrait_Func (bool testConds, bool runActions) {
    bool lv_bool;
    int hostTransmission = lib1926661B_gv_talkingTransmission;
    int lv_transmission;
    lv_bool = TransmissionIsComplete(hostTransmission);
    while (lv_bool == false) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType((CatalogFieldValueGet(c_gameCatalogCharacter, lib1926661B_gv_talkingSpeaker, "Unit", c_playerAny)), false), lib1926661B_gv_talkingPortrait, lib1926661B_gv_talkingPortraitActor, "Talk", SoundLink(((lib1926661B_gv_talkingSpeaker + "Talk")), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        lv_transmission = TransmissionLastSent();
        lv_bool = TransmissionIsComplete(hostTransmission);
        while(!TransmissionIsComplete(lv_transmission) && lv_bool == false){
            Wait(0.0, c_timeReal);
            lv_bool = TransmissionIsComplete(hostTransmission);
        }
    }
    TransmissionClear(lv_transmission);
    //TriggerStop(TriggerGetCurrent());
    TriggerDestroy(TriggerGetCurrent());
    return true;
}

void lib1926661B_InitCustomScript () {
    LotC_Main();
}

// Presets
// Functions
void lib1926661B_gf_LotCInitialize () {
    // Automatic Variable Declarations
    // Implementation
    DbgSetOnOff(false);
}

bool lib1926661B_gf_IsDebug (bool lp_inBool) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_inBool == IsDebugOn())) {
        return true;
    }
    else {
        return false;
    }
}

void lib1926661B_gf_SetTimeScaleOverTime (fixed lp_startTimeScale, fixed lp_endTimeScale, fixed lp_over, int lp_timeType) {
    // Variable Declarations
    fixed lv_r;
    int lv_steps;
    fixed lv_step;

    // Automatic Variable Declarations
    int auto68649568_n;
    int auto68649568_i;

    // Variable Initialization
    lv_r = lp_startTimeScale;

    // Implementation
    GameSetGlobalTimeScale(lp_startTimeScale);
    if ((lp_startTimeScale > lp_endTimeScale)) {
        lv_steps = FixedToInt((lp_startTimeScale / lp_endTimeScale));
        lv_step = FixedToInt((lp_over / lv_steps));
        lv_step = (lv_step * -1.0);
    }
    else {
        lv_steps = FixedToInt((lp_endTimeScale / lp_startTimeScale));
        lv_step = FixedToInt((lp_over / lv_steps));
    }
    auto68649568_n = lv_steps;
    for (auto68649568_i = 1; auto68649568_i <= auto68649568_n; auto68649568_i += 1) {
        Wait(lv_step, lp_timeType);
        lv_r += lv_step;
        GameSetGlobalTimeScale(lv_r);
    }
    GameSetGlobalTimeScale(lp_endTimeScale);
}

void lib1926661B_gf_SetGameSpeedOverTime (fixed lp_startSpeed, fixed lp_endSpeed, fixed lp_over, int lp_timeType) {
    // Variable Declarations
    fixed lv_r;
    int lv_steps;
    fixed lv_step;
    string lv_speed;

    // Automatic Variable Declarations
    int auto480D4136_n;
    int auto480D4136_i;

    // Variable Initialization
    lv_r = lp_startSpeed;
    lv_speed = "Speed ";

    // Implementation
    ConsoleCommand((lv_speed + FixedToString(lp_startSpeed, c_fixedPrecisionAny)), true, true);
    if ((lp_startSpeed > lp_endSpeed)) {
        lv_steps = FixedToInt((lp_startSpeed / lp_endSpeed));
        lv_step = FixedToInt((lp_over / lv_steps));
        lv_step = (lv_step * -1.0);
    }
    else {
        lv_steps = FixedToInt((lp_endSpeed / lp_startSpeed));
        lv_step = FixedToInt((lp_over / lv_steps));
    }
    auto480D4136_n = lv_steps;
    for (auto480D4136_i = 1; auto480D4136_i <= auto480D4136_n; auto480D4136_i += 1) {
        Wait(lv_step, lp_timeType);
        lv_r += lv_step;
        ConsoleCommand((lv_speed + FixedToString(lv_r, c_fixedPrecisionAny)), true, true);
    }
    ConsoleCommand((lv_speed + FixedToString(lp_endSpeed, c_fixedPrecisionAny)), true, true);
}

string lib1926661B_gf_CurrentWord () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_CURRENT_WORD;
}

int lib1926661B_gf_CurrentWordIndex () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_CURRENT_WORD_INDEX;
}

void lib1926661B_gf_AddRemoveBehaviorForUnitGroup (bool lp_addRemove, string lp_behavior, int lp_count, unitgroup lp_group) {
    // Variable Declarations
    unit lv_unit;
    int lv_owner;

    // Automatic Variable Declarations
    unitgroup auto0F02F3E2_g;
    int auto0F02F3E2_u;

    // Variable Initialization
    lv_owner = UnitGetOwner(lv_unit);

    // Implementation
    auto0F02F3E2_g = lp_group;
    auto0F02F3E2_u = UnitGroupCount(auto0F02F3E2_g, c_unitCountAll);
    for (;; auto0F02F3E2_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto0F02F3E2_g, auto0F02F3E2_u);
        if (lv_unit == null) { break; }
        if ((UnitIsValid(lv_unit) == true)) {
            if ((lp_addRemove == true)) {
                UnitBehaviorAddPlayer(lv_unit, lp_behavior, lv_owner, lp_count);
            }
            else {
                UnitBehaviorRemovePlayer(lv_unit, lp_behavior, lv_owner, lp_count);
            }
        }
    }
}

void lib1926661B_gf_CreateUnitDestructorTrigger (unit lp_unit, bool lp_death, bool lp_removal, string lp_dataIdentifier, trigger lp_triggerToRun) {
    // Variable Declarations
    trigger lv_t;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_triggerToRun != null)) {
        lv_t = TriggerCreate("UnitDestructorTrigger_TriggerFunc");
        if ((lp_death == true)) {
            TriggerAddEventUnitDied(lv_t, UnitRefFromUnit(lp_unit));
        }

        if ((lp_removal == true)) {
            TriggerAddEventUnitRemoved(lv_t, UnitRefFromUnit(lp_unit));
        }

        DataTableSetTrigger(true, ((lp_dataIdentifier + "&" + IntToString(UnitGetTag(lp_unit)))), lp_triggerToRun);
        DataTableSetTrigger(true, ((lp_dataIdentifier + "&" + IntToString(UnitGetTag(lp_unit)) + "_Destructor")), lv_t);
    }

}

void lib1926661B_gf_CreateUnitDestructorEvent (unit lp_unit, bool lp_death, bool lp_removal, string lp_dataIdentifier, string lp_genericEventToSend) {
    // Variable Declarations
    trigger lv_t;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_genericEventToSend != "")) {
        lv_t = TriggerCreate("UnitDestructorEvent_TriggerFunc");
        if ((lp_death == true)) {
            TriggerAddEventUnitDied(lv_t, UnitRefFromUnit(lp_unit));
        }

        if ((lp_removal == true)) {
            TriggerAddEventUnitRemoved(lv_t, UnitRefFromUnit(lp_unit));
        }

        DataTableSetString(true, ((lp_dataIdentifier + "&" + IntToString(UnitGetTag(lp_unit)))), lp_genericEventToSend);
        DataTableSetTrigger(true, ((lp_dataIdentifier + "&" + IntToString(UnitGetTag(lp_unit)) + "_Destructor")), lv_t);
    }

}

void lib1926661B_gf_TurnUnitDestructorOnOff (unit lp_unit, string lp_dataIdentifier, bool lp_onOff) {
    // Variable Declarations
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = ((lp_dataIdentifier + "&" + IntToString(UnitGetTag(lp_unit)) + "_Destructor"));

    // Implementation
    if ((DataTableValueExists(true, lv_value) == true)) {
        TriggerEnable(DataTableGetTrigger(true, lv_value), lp_onOff);
    }

}

void lib1926661B_gf_DestroyUnitDestructor (unit lp_unit, string lp_dataIdentifier) {
    // Variable Declarations
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = ((lp_dataIdentifier + "&" + IntToString(UnitGetTag(lp_unit)) + "_Destructor"));

    // Implementation
    if ((DataTableValueExists(true, lv_value) == true)) {
        TriggerDestroy(DataTableGetTrigger(true, lv_value));
        DataTableValueRemove(true, (lp_dataIdentifier + "&" + IntToString(UnitGetTag(lp_unit))));
        DataTableValueRemove(true, lv_value);
    }

}

unit lib1926661B_gf_DestructorEventUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "TriggeringUnit"));
}

text lib1926661B_gf_FormatTimeCampaign (int lp_second) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_second < 3600)) {
        return TextTimeFormat(StringExternal("Param/Value/lib_1926661B_2015A005"), lp_second);
    }
    else {
        return TextTimeFormat(StringExternal("Param/Value/lib_1926661B_BB62DA99"), lp_second);
    }
}

string lib1926661B_gf_KC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player) {
    // Variable Declarations
    string lv_fieldPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fieldPath = "";

    // Implementation
    lv_fieldPath = (lp_field + "[" + IntToString((lp_index - 1)) + "]");
    return CatalogFieldValueGet(lp_catalog, lp_entry, lv_fieldPath, lp_player);
}

trigger auto_lib1926661B_gf_KC_CheckProgressionAchievements_Trigger = null;

void lib1926661B_gf_KC_CheckProgressionAchievements () {
    if (auto_lib1926661B_gf_KC_CheckProgressionAchievements_Trigger == null) {
        auto_lib1926661B_gf_KC_CheckProgressionAchievements_Trigger = TriggerCreate("auto_lib1926661B_gf_KC_CheckProgressionAchievements_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_KC_CheckProgressionAchievements_Trigger, false, false);
}

bool auto_lib1926661B_gf_KC_CheckProgressionAchievements_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    do {
        Wait(10.0, c_timeGame);
    }while ((lib1926661B_gf_ReturnNotificationState("Welcome1_5") == false));
    if (((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M01", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M01", 3) == true)) && ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M02_1", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M02_1", 3) == true)) && ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M02_2", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M02_2", 3) == true)) && ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M03", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M03", 3) == true))) {
        libAE8FC9D3_gf_AwardAchievement("EP01-Arc01Missions", 1);
    }

    if (((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M04", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M04", 3) == true)) && ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M05", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M05", 3) == true)) && ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M06", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M06", 3) == true)) && ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M07", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M07", 3) == true))) {
        libAE8FC9D3_gf_AwardAchievement("EP01-Arc02Missions", 1);
    }

    if (((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M08", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M08", 3) == true)) && ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M09", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M09", 3) == true)) && ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M10", 2) == true) || (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M10", 3) == true))) {
        libAE8FC9D3_gf_AwardAchievement("EP01-Arc03Missions", 1);
    }

    if ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M01", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M02_1", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M02_2", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M03", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M04", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M05", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M06", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M07", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M08", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M09", 2) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M10", 2) == true)) {
        libAE8FC9D3_gf_AwardAchievement("EP01-NormalCompletion", 1);
    }

    if ((libAE8FC9D3_gf_PlayerHasAchievement(1, "EP01-HardCompletion") == true)) {
        libAE8FC9D3_gf_AwardAchievement("EP01-NormalCompletion", 1);
    }

    if ((lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M01", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M02_1", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M02_2", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M03", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M04", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M05", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M06", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M07", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M08", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M09", 3) == true) && (lib1926661B_gf_MissionCompletedOnDifficulty2("UEDFL_EP01M10", 3) == true)) {
        libAE8FC9D3_gf_AwardAchievement("EP01-NormalCompletion", 1);
        libAE8FC9D3_gf_AwardAchievement("EP01-HardCompletion", 1);
    }

    if ((libAE8FC9D3_gf_ReturnAchievementCategoryEarnedCount(1, 3) == libAE8FC9D3_gf_ReturnAchievementCategoryMaxCount(1, 3))) {
        libAE8FC9D3_gf_AwardAchievement("EP01-Arc01Mastery", 1);
    }
    if ((libAE8FC9D3_gf_ReturnAchievementCategoryEarnedCount(1, 4) == libAE8FC9D3_gf_ReturnAchievementCategoryMaxCount(1, 4))) {
        libAE8FC9D3_gf_AwardAchievement("EP01-Arc02Mastery", 1);
    }
    if ((libAE8FC9D3_gf_ReturnAchievementCategoryEarnedCount(1, 5) == libAE8FC9D3_gf_ReturnAchievementCategoryMaxCount(1, 5))) {
        libAE8FC9D3_gf_AwardAchievement("EP01-Arc03Mastery", 1);
    }
    return true;
}

void lib1926661B_gf_KC_MissionInit () {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    int auto32E424C2_val;
    unitgroup autoE66D2854_g;
    int autoE66D2854_u;
    unitgroup auto5AEDECD4_g;
    int auto5AEDECD4_u;
    unit auto5AEDECD4_var;

    // Variable Initialization

    // Implementation
    lib1926661B_gf_KC_HookSave();
    if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    lib1926661B_gv_kC_CombatTimer = TimerCreate();
    TimerStart(lib1926661B_gv_kC_CombatTimer, 86400.0, false, c_timeGame);
    UnitEventSetNullVariableInvalid(true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    lib1926661B_gv_kC_MissionUIContainer = DialogControlLastCreated();
    PlayerOptionOverride(1, "simplecommandcard", "0");
    auto32E424C2_val = PlayerDifficulty(1);
    if (auto32E424C2_val == 3) {
        GameSetSpeedValueMinimum(c_gameSpeedFast);
        GameSetSpeedValue(c_gameSpeedFaster);
    }
    else if (auto32E424C2_val == 2) {
        GameSetSpeedValueMinimum(c_gameSpeedNormal);
    }
    else {
    }
    UISetGameMenuItemVisible(PlayerGroupSingle(1), c_gameMenuDialogRestartDifficultyPulldown, true);
    autoE66D2854_g = UnitGroup(null, 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE66D2854_u = UnitGroupCount(autoE66D2854_g, c_unitCountAll);
    for (;; autoE66D2854_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoE66D2854_g, autoE66D2854_u);
        if (lv_indexUnit == null) { break; }
        UnitSetPropertyFixed(lv_indexUnit, c_unitPropEnergyPercent, 100.0);
    }
    TriggerExecute(lib1926661B_gt_KC_CampaignUnit, true, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
    lib1926661B_gv_kC_ObjectivePanel = DialogControlLastCreated();
    lib1926661B_gf_KC_UpdateObjectivePanelMask();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ErrorDisplay");
    lib1926661B_gv_kC_ErrorPanel = DialogControlLastCreated();
    lib1926661B_gf_KC_UpdateErrorPanelMask();
    DialogControlHookupStandard(c_triggerControlTypeFlash, "UIContainer/ConsoleUIContainer/HelpTipEffects");
    lib1926661B_gv_kC_MissionHelpButtonTipPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/HelpButton");
    lib1926661B_gv_kC_MissionHelpButton = DialogControlLastCreated();
    lib1926661B_gf_DifficultySetting(PlayerDifficulty(1));
    auto5AEDECD4_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5AEDECD4_u = UnitGroupCount(auto5AEDECD4_g, c_unitCountAll);
    for (;; auto5AEDECD4_u -= 1) {
        auto5AEDECD4_var = UnitGroupUnitFromEnd(auto5AEDECD4_g, auto5AEDECD4_u);
        if (auto5AEDECD4_var == null) { break; }
        if (((UnitGetType(auto5AEDECD4_var) == "FlameGrenadePickup") || (UnitGetType(auto5AEDECD4_var) == "FlashbangGrenadePickup") || (UnitGetType(auto5AEDECD4_var) == "Beacon_UPL") || (UnitGetType(auto5AEDECD4_var) == "Beacon_UPLSmall"))) {
            UnitSetState(auto5AEDECD4_var, c_unitStateHighlightable, false);
            UnitSetState(auto5AEDECD4_var, c_unitStateSelectable, false);
            UnitSetState(auto5AEDECD4_var, c_unitStateTargetable, false);
            UnitSetState(auto5AEDECD4_var, c_unitStateTooltipable, false);
            UnitSetState(auto5AEDECD4_var, c_unitStateCursorable, false);
        }
    }
    libAE8FC9D3_gf_InitializeAchievements();
    TriggerQueueEnter();
    lib1926661B_gf_KC_CheckProgressionAchievements();
    TriggerQueueExit();
}

void lib1926661B_gf_SendTransmissionLotC (bool lp_showPortrait, int lp_portrait, string lp_line, string lp_speaker, bool lp_waitDontWait, unit lp_unit, bool lp_playCue) {
    // Variable Declarations
    bool lv_override;
    string lv_model;
    string lv_actor;
    string lv_speaker;
    string lv_anim;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_override = true;
    lv_anim = "Talk";

    // Implementation
    if ((lp_speaker == null)) {
        lv_model = (CatalogFieldValueGet(c_gameCatalogCharacter, ConversationDataGetSpeaker(lp_line), "Variations[" + IntToString(0) + "].Model", c_playerAny));
        lv_actor = (CatalogFieldValueGet(c_gameCatalogCharacter, ConversationDataGetSpeaker(lp_line), "Variations[" + IntToString(0) + "].Actor", c_playerAny));
        lv_speaker = ConversationDataGetSpeaker(lp_line);
    }
    else {
        lv_model = (CatalogFieldValueGet(c_gameCatalogCharacter, lp_speaker, "Variations[" + IntToString(0) + "].Model", c_playerAny));
        lv_actor = (CatalogFieldValueGet(c_gameCatalogCharacter, lp_speaker, "Variations[" + IntToString(0) + "].Actor", c_playerAny));
        lv_speaker = lp_speaker;
    }
    if ((lv_model == null)) {
        lv_model = (CatalogFieldValueGet(c_gameCatalogCharacter, ConversationDataGetSpeaker(lp_line), "Variations[" + IntToString(0) + "].Model", c_playerAny));
        lv_actor = (CatalogFieldValueGet(c_gameCatalogCharacter, ConversationDataGetSpeaker(lp_line), "Variations[" + IntToString(0) + "].Actor", c_playerAny));
    }

    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_AttachActorToUnit(lp_unit, "TalkIcon", "Ref_Origin");
    }

    if ((lp_playCue == true)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    PortraitSetModel(lp_portrait, lv_model, false);
    if (((lp_portrait == c_invalidPortraitId) || (UnitGetType(lp_unit) == "Lurker"))) {
        lv_override = true;
    }
    if ((lv_speaker == "RexTheTechnician")) {
        lib1926661B_gf_playTalkingTransmission(lp_line, lv_model, lp_unit, lp_portrait, (lv_actor), lv_speaker);
        if ((lp_waitDontWait == true)) {
            TransmissionWait(lib1926661B_gv_talkingTransmission, 0.0);
        }
    }
    else {
        if ((UnitIsValid(lp_unit) == true)) {
            if (((UnitGetType(lp_unit) == "InfantryFlamethrower") || (UnitGetType(lp_unit) == "InfantryHeavy") || (UnitGetType(lp_unit) == "InfantryMortar") || (UnitGetType(lp_unit) == "InfantryRocket"))) {
                lv_anim = "";
            }
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, lv_override, lv_anim), lp_portrait, (lv_actor), "Talk", SoundLink(ConversationDataGetSound(lp_line, lv_override), c_soundIndexAny), StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, lv_speaker, "Name", c_playerAny)), null, 0.0, c_transmissionDurationAdd, lp_waitDontWait, c_maxPlayers, false);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(lv_model), lp_portrait, (lv_actor), "Talk", SoundLink(ConversationDataGetSound(lp_line, lv_override), c_soundIndexAny), StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, lv_speaker, "Name", c_playerAny)), null, 0.0, c_transmissionDurationAdd, lp_waitDontWait, c_maxPlayers, false);
        }
    }
    if ((UnitIsAlive(lp_unit) == true)) {
    }
    else {
        ActorScopeKill(libNtve_gf_ActorScopeLastCreated());
    }
}

void lib1926661B_gf_SendTransmissionAdvancedLotC (text lp_name, int lp_portrait, string lp_line, string lp_speaker, bool lp_waitDontWait, unit lp_unit, bool lp_playCue, int lp_durationType, fixed lp_duration) {
    // Variable Declarations
    int lv_portrait;
    text lv_speakerName;
    string lv_speakerPortrait;
    string lv_model;
    string lv_actor;
    string lv_speaker;
    string lv_anim;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = lp_portrait;
    lv_speakerPortrait = "";
    lv_anim = "Talk";

    // Implementation
    if ((lp_name == null)) {
        lv_speakerName = StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, lv_speaker, "Name", c_playerAny));
    }
    else {
        lv_speakerName = lp_name;
    }
    if ((lp_speaker == null)) {
        lv_model = (CatalogFieldValueGet(c_gameCatalogCharacter, ConversationDataGetSpeaker(lp_line), "Variations[" + IntToString(0) + "].Model", c_playerAny));
        lv_actor = (CatalogFieldValueGet(c_gameCatalogCharacter, ConversationDataGetSpeaker(lp_line), "Variations[" + IntToString(0) + "].Actor", c_playerAny));
        lv_speaker = ConversationDataGetSpeaker(lp_line);
    }
    else {
        lv_model = (CatalogFieldValueGet(c_gameCatalogCharacter, lp_speaker, "Variations[" + IntToString(0) + "].Model", c_playerAny));
        lv_actor = (CatalogFieldValueGet(c_gameCatalogCharacter, lp_speaker, "Variations[" + IntToString(0) + "].Actor", c_playerAny));
        lv_speaker = lp_speaker;
    }
    if ((lv_portrait == c_invalidPortraitId)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == true)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
    }

    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_AttachActorToUnit(lp_unit, "TalkIcon", "Ref_Origin");
    }

    if ((lp_playCue == true)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((lv_speaker == "RexTheTechnician")) {
        lib1926661B_gf_playTalkingTransmission(lp_line, lv_model, lp_unit, lp_portrait, (lv_actor), lv_speaker);
        if ((lp_waitDontWait == true)) {
            TransmissionWait(lib1926661B_gv_talkingTransmission, 0.0);
        }
    }
    else {
        if ((UnitIsValid(lp_unit) == true)) {
            if (((UnitGetType(lp_unit) == "InfantryFlamethrower") || (UnitGetType(lp_unit) == "InfantryHeavy") || (UnitGetType(lp_unit) == "InfantryMortar") || (UnitGetType(lp_unit) == "InfantryRocket"))) {
                lv_anim = "";
            }
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, lv_anim), lv_portrait, (lv_actor), "Talk", SoundLink(ConversationDataGetSound(lp_line, false), c_soundIndexAny), lv_speakerName, SoundSubtitleText(SoundLink(ConversationDataGetSound(lp_line, false), 0)), lp_duration, lp_durationType, lp_waitDontWait, c_maxPlayers, false);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(lv_model), lv_portrait, (lv_actor), "Talk", SoundLink(ConversationDataGetSound(lp_line, false), c_soundIndexAny), lv_speakerName, SoundSubtitleText(SoundLink(ConversationDataGetSound(lp_line, false), 0)), lp_duration, lp_durationType, lp_waitDontWait, c_maxPlayers, false);
        }
    }
    if ((UnitIsAlive(lp_unit) == true)) {
        ActorScopeKill(libNtve_gf_ActorScopeLastCreated());
    }

}

trigger auto_lib1926661B_gf_playTalkingTransmission_Trigger = null;
string auto_lib1926661B_gf_playTalkingTransmission_lp_conversation;
string auto_lib1926661B_gf_playTalkingTransmission_lp_model;
unit auto_lib1926661B_gf_playTalkingTransmission_lp_unit;
int auto_lib1926661B_gf_playTalkingTransmission_lp_portrait;
string auto_lib1926661B_gf_playTalkingTransmission_lp_actor;
string auto_lib1926661B_gf_playTalkingTransmission_lp_speaker;

void lib1926661B_gf_playTalkingTransmission (string lp_conversation, string lp_model, unit lp_unit, int lp_portrait, string lp_actor, string lp_speaker) {
    auto_lib1926661B_gf_playTalkingTransmission_lp_conversation = lp_conversation;
    auto_lib1926661B_gf_playTalkingTransmission_lp_model = lp_model;
    auto_lib1926661B_gf_playTalkingTransmission_lp_unit = lp_unit;
    auto_lib1926661B_gf_playTalkingTransmission_lp_portrait = lp_portrait;
    auto_lib1926661B_gf_playTalkingTransmission_lp_actor = lp_actor;
    auto_lib1926661B_gf_playTalkingTransmission_lp_speaker = lp_speaker;

    if (auto_lib1926661B_gf_playTalkingTransmission_Trigger == null) {
        auto_lib1926661B_gf_playTalkingTransmission_Trigger = TriggerCreate("auto_lib1926661B_gf_playTalkingTransmission_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_playTalkingTransmission_Trigger, false, false);
}

bool auto_lib1926661B_gf_playTalkingTransmission_TriggerFunc (bool testConds, bool runActions) {
    string lp_conversation = auto_lib1926661B_gf_playTalkingTransmission_lp_conversation;
    string lp_model = auto_lib1926661B_gf_playTalkingTransmission_lp_model;
    unit lp_unit = auto_lib1926661B_gf_playTalkingTransmission_lp_unit;
    int lp_portrait = auto_lib1926661B_gf_playTalkingTransmission_lp_portrait;
    string lp_actor = auto_lib1926661B_gf_playTalkingTransmission_lp_actor;
    string lp_speaker = auto_lib1926661B_gf_playTalkingTransmission_lp_speaker;

    // Variable Declarations
    trigger lv_trig;
    int lv_transmission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_transmission = c_invalidTransmissionId;

    // Implementation
    lib1926661B_gv_talkingPortrait = lp_portrait;
    lib1926661B_gv_talkingSpeaker = (lp_speaker);
    if ((lp_unit != null)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), c_invalidPortraitId, lp_actor, "Talk", SoundLink(ConversationDataGetSound(lp_conversation, true), c_soundIndexAny), StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, lp_speaker, "Name", c_playerAny)), null, SoundLengthSync(SoundLink(ConversationDataGetSound(lp_conversation, true), c_soundIndexAny)), c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(lp_model), c_invalidPortraitId, lp_actor, "Talk", SoundLink(ConversationDataGetSound(lp_conversation, true), c_soundIndexAny), StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, lp_speaker, "Name", c_playerAny)), null, SoundLengthSync(SoundLink(ConversationDataGetSound(lp_conversation, true), c_soundIndexAny)), c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    lv_transmission = TransmissionLastSent();
    lib1926661B_gv_talkingTransmission = lv_transmission;
    lv_trig = TriggerCreate("lib1926661B_gt_showTalkingPortrait_Func");
    TriggerExecute(lv_trig, true, false);
    while(true){
        if(TransmissionIsComplete(lv_transmission) || lv_transmission == c_invalidTransmissionId) {
            break;
        }
        Wait(0.0, c_timeReal);
    }
    return true;
}

int lib1926661B_gf_GetLastTalkingTransmission () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_talkingTransmission;
}

void lib1926661B_gf_CreateTransportUnitLotC (string lp_unitType, int lp_amount, int lp_player, point lp_point, int lp_mode) {
    // Variable Declarations
    unitgroup lv_localGroup;

    // Automatic Variable Declarations
    int autoB420F42A_val;
    string auto97031309_val;
    unitgroup auto22684F3E_g;
    int auto22684F3E_u;
    unit auto22684F3E_var;
    unitgroup auto8C1D4459_g;
    int auto8C1D4459_u;
    unit auto8C1D4459_var;

    // Variable Initialization
    lv_localGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_unitType == null)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, lp_unitType, 0, lp_player, lp_point);
    UnitGroupAddUnitGroup(lv_localGroup, UnitLastCreatedGroup());
    autoB420F42A_val = lp_mode;
    if (autoB420F42A_val == lib1926661B_ge_TransportMode_Air) {
        return ;
    }
    else if (autoB420F42A_val == lib1926661B_ge_TransportMode_Land) {
        auto97031309_val = lp_unitType;
        if (auto97031309_val == "Condor") {
            auto22684F3E_g = lv_localGroup;
            auto22684F3E_u = UnitGroupCount(auto22684F3E_g, c_unitCountAll);
            for (;; auto22684F3E_u -= 1) {
                auto22684F3E_var = UnitGroupUnitFromEnd(auto22684F3E_g, auto22684F3E_u);
                if (auto22684F3E_var == null) { break; }
                UnitBehaviorRemove(auto22684F3E_var, "CondorFlyMode", 1);
                UnitBehaviorAdd(auto22684F3E_var, "CondorLandMode", auto22684F3E_var, 1);
            }
        }
        else if (auto97031309_val == "Osprey") {
            auto8C1D4459_g = lv_localGroup;
            auto8C1D4459_u = UnitGroupCount(auto8C1D4459_g, c_unitCountAll);
            for (;; auto8C1D4459_u -= 1) {
                auto8C1D4459_var = UnitGroupUnitFromEnd(auto8C1D4459_g, auto8C1D4459_u);
                if (auto8C1D4459_var == null) { break; }
                UnitBehaviorRemove(auto8C1D4459_var, "OspreyFlyMode", 1);
                UnitBehaviorAdd(auto8C1D4459_var, "OspreyLandMode", auto8C1D4459_var, 1);
            }
        }
        else {
        }
    }
    else {
    }
}

void lib1926661B_gf_SetTransportUnitModeLotC (unit lp_unit, int lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "Osprey") || (UnitGetType(lp_unit) == "Condor"))) {
    }
    else {
        return ;
    }
    if ((UnitHasBehavior2(lp_unit, "CondorFlyMode") == true) && (lp_mode == lib1926661B_ge_TransportMode_Air)) {
        return ;
    }
    else if ((UnitHasBehavior2(lp_unit, "CondorLandMode") == true) && (lp_mode == lib1926661B_ge_TransportMode_Land)) {
        return ;
    }
    else if ((UnitHasBehavior2(lp_unit, "OspreyFlyMode") == true) && (lp_mode == lib1926661B_ge_TransportMode_Air)) {
        return ;
    }
    else if ((UnitHasBehavior2(lp_unit, "OspreyLandMode") == true) && (lp_mode == lib1926661B_ge_TransportMode_Land)) {
        return ;
    }
    else if ((UnitHasBehavior2(lp_unit, "CondorFlyMode") == true) && (lp_mode == lib1926661B_ge_TransportMode_Land)) {
        UnitBehaviorRemove(lp_unit, "CondorFlyMode", 1);
        UnitBehaviorAdd(lp_unit, "CondorLandMode", lp_unit, 1);
    }
    else if ((UnitHasBehavior2(lp_unit, "CondorLandMode") == true) && (lp_mode == lib1926661B_ge_TransportMode_Air)) {
        UnitBehaviorRemove(lp_unit, "CondorLandMode", 1);
        UnitBehaviorAdd(lp_unit, "CondorFlyMode", lp_unit, 1);
    }
    else if ((UnitHasBehavior2(lp_unit, "OspreyFlyMode") == true) && (lp_mode == lib1926661B_ge_TransportMode_Land)) {
        UnitBehaviorRemove(lp_unit, "OspreyFlyMode", 1);
        UnitBehaviorAdd(lp_unit, "OspreyLandMode", lp_unit, 1);
    }
    else if ((UnitHasBehavior2(lp_unit, "OspreyLandMode") == true) && (lp_mode == lib1926661B_ge_TransportMode_Air)) {
        UnitBehaviorRemove(lp_unit, "OspreyLandMode", 1);
        UnitBehaviorAdd(lp_unit, "OspreyFlyMode", lp_unit, 1);
    }
}

void lib1926661B_gf_CampaignDirective (int lp_type, text lp_message) {
    // Automatic Variable Declarations
    int auto926D8FBC_val;

    // Implementation
    auto926D8FBC_val = lp_type;
    if (auto926D8FBC_val == lib1926661B_ge_DirectiveType_Hint) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_3EC26E8D", "A", lp_message);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1926661B_3EC26E8D"));
        SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto926D8FBC_val == lib1926661B_ge_DirectiveType_Warning) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_49F215B9", "A", lp_message);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1926661B_49F215B9"));
        SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto926D8FBC_val == lib1926661B_ge_DirectiveType_Chip) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_0F6E09FC", "A", lp_message);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1926661B_0F6E09FC"));
        SoundPlayForPlayer(SoundLink("Alert_UniObjectiveCompleted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
}

void lib1926661B_gf_SaveStoryKey (string lp_string) {
    // Variable Declarations
    string lv_ap;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ap = "";

    // Implementation
    lv_ap = lib1926661B_gf_StoryMapFile(lib1926661B_gf_CurrentMap());
    BankValueSetFromFlag(lib1926661B_gv_kC_CampaignBank, lib1926661B_gv_kL_StorySectionConstant, (lv_ap + lp_string), true);
}

bool lib1926661B_gf_LoadStoryKey (string lp_string, string lp_map) {
    // Variable Declarations
    string lv_ap;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ap = "";

    // Implementation
    lv_ap = lib1926661B_gf_StoryMapFile(lp_map);
    if ((BankValueGetAsFlag(lib1926661B_gv_kC_CampaignBank, libAE8FC9D3_gv_kL_AchievementSectionConstant, (lv_ap + lp_string)) == true)) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_lib1926661B_gf_AddRemoveObjectiveRePing_Trigger = null;
int auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_ping;
bool auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_addRemove;
fixed auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_wait;
fixed auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_interval;

void lib1926661B_gf_AddRemoveObjectiveRePing (int lp_ping, bool lp_addRemove, fixed lp_wait, fixed lp_interval) {
    auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_ping = lp_ping;
    auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_addRemove = lp_addRemove;
    auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_wait = lp_wait;
    auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_interval = lp_interval;

    if (auto_lib1926661B_gf_AddRemoveObjectiveRePing_Trigger == null) {
        auto_lib1926661B_gf_AddRemoveObjectiveRePing_Trigger = TriggerCreate("auto_lib1926661B_gf_AddRemoveObjectiveRePing_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_AddRemoveObjectiveRePing_Trigger, false, false);
}

bool auto_lib1926661B_gf_AddRemoveObjectiveRePing_TriggerFunc (bool testConds, bool runActions) {
    int lp_ping = auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_ping;
    bool lp_addRemove = auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_addRemove;
    fixed lp_wait = auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_wait;
    fixed lp_interval = auto_lib1926661B_gf_AddRemoveObjectiveRePing_lp_interval;

    // Automatic Variable Declarations
    bool auto25C55E13_val;
    int autoBBBCBC10_ae;
    int autoBBBCBC10_var;

    // Implementation
    auto25C55E13_val = lp_addRemove;
    if (auto25C55E13_val == true) {
        if ((lib1926661B_gv_kC_RePingCount >= lib1926661B_gv_kC_RePing_MAX)) {
            return true;
        }

        lib1926661B_gv_kC_RePingInterval = lp_interval;
        TriggerExecute(lib1926661B_gt_KC_ObjectiveRePingController, true, false);
        Wait(lp_wait, c_timeGame);
        lib1926661B_gf_ObjectiveRePing(lp_ping);
        lib1926661B_gv_kC_RePingArray[lib1926661B_gv_kC_RePingCount] = lp_ping;
        lib1926661B_gv_kC_RePingCount += 1;
    }
    else if (auto25C55E13_val == false) {
        autoBBBCBC10_ae = (lib1926661B_gv_kC_RePing_MAX - 1);
        autoBBBCBC10_var = 0;
        for ( ; autoBBBCBC10_var <= autoBBBCBC10_ae; autoBBBCBC10_var += 1 ) {
            if ((lib1926661B_gv_kC_RePingArray[autoBBBCBC10_var] == lp_ping)) {
                lib1926661B_gv_kC_RePingArray[autoBBBCBC10_var] = c_invalidPingId;
                return true;
            }

        }
    }
    else {
    }
    return true;
}

void lib1926661B_gf_ObjectiveRePing (int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_ping != c_invalidPingId)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PingGetPosition(lp_ping), PingGetColor(lp_ping), 0.6, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PingGetPosition(lp_ping), PingGetColor(lp_ping), 0.6, 270.0);
        PingSetScale(PingLastCreated(), 3.0);
        SoundPlay(SoundLink("UI_BriefingUnitSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    }

}

void lib1926661B_gf_KC_PostMissionVictoryUpdate () {
    // Variable Declarations
    int lv_difficulty;
    int lv_bestTime;
    string lv_indexObjective;
    int lv_finalProgress;
    int lv_bestTimeOpposite;

    // Automatic Variable Declarations
    int auto42E19D8A_ae;
    int auto42E19D8A_ai;

    // Variable Initialization
    lv_difficulty = 3;

    // Implementation
    if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    lv_difficulty = PlayerDifficulty(1);
    lib1926661B_gv_kC_MissionCompleteTime = FixedToInt(GameGetMissionTime());
    lv_bestTime = lib1926661B_gf_MissionCompleteBestTImeArchives(lib1926661B_gf_CurrentMap(), lv_difficulty);
    if ((AchievementsDisabled(1) == false) && ((lv_bestTime <= 0) || (lib1926661B_gv_kC_MissionCompleteTime < lv_bestTime))) {
        lib1926661B_gf_KC_SetMissionCompletionBestTime(lib1926661B_gf_CurrentMap(), lv_difficulty, lib1926661B_gv_kC_MissionCompleteTime);
    }

    auto42E19D8A_ae = CatalogFieldValueCount(c_gameCatalogMap, lib1926661B_gf_CurrentMap(), "ObjectiveArray", 1);
    auto42E19D8A_ai = 1;
    while (auto42E19D8A_ai <= auto42E19D8A_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lib1926661B_gf_CurrentMap(), "ObjectiveArray["+IntToString(auto42E19D8A_ai-1)+"]", 1);
        if ((lib1926661B_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            lv_finalProgress = lib1926661B_gf_MissionObjectiveProgress(lv_indexObjective);
            if ((lib1926661B_gf_MissionObjectiveProgress(lv_indexObjective) < lib1926661B_gf_KC_MissionObjectivePreviousProgress(lv_indexObjective))) {
                lib1926661B_gf_KC_MissionObjectiveProgressDataSet(lv_indexObjective, lib1926661B_gf_KC_MissionObjectivePreviousProgress(lv_indexObjective), false);
            }

            lib1926661B_gf_KC_MissionObjectivePreviousProgressSet(lv_indexObjective, lv_finalProgress);
        }

        auto42E19D8A_ai = auto42E19D8A_ai + 1;
    }
}

void lib1926661B_gf_KC_GameOver () {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_kC_GameOver = true;
}

void lib1926661B_gf_EndCampaignMission (int lp_player, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    PerfTestStop();
    if (((lib1926661B_gf_CurrentMap() == "UEDFL_EP01M09") || (lib1926661B_gf_CurrentMap() == "UEDFL_EP01M04"))) {
    }
    else {
        TriggerQueueClear(c_triggerQueueRetain);
        TriggerQueuePause(true);
    }
    if ((lp_type == c_gameOverVictory)) {
        lib1926661B_gf_DisplayCampaignVictoryScoreScreen(lib1926661B_gf_CurrentMap());
    }
    else {
        GameOver(lp_player, lp_type, true, false);
    }
}

void lib1926661B_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kC_GameOver == true)) {
        return ;
    }

    if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, false);
    lib1926661B_gf_KC_GameOver();
    lib1926661B_gf_KC_PostMissionVictoryUpdate();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(false);
    lib1926661B_gv_kC_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((lib1926661B_gv_kC_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(lp_victoryCinematic, true, false);
    TriggerExecute(lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueue, true, false);
}

void lib1926661B_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_waitUntilDone == true)) {
        lib1926661B_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    }
    else {
        lib1926661B_gf_CinematicFade4(lp_fadeIn, lp_duration, lp_color);
    }
}

void lib1926661B_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeIn == true)) {
        if ((lib1926661B_gv__FadeImage != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(lib1926661B_gv__FadeImage, lp_color, PlayerGroupAll());
            DialogControlFadeTransparency(lib1926661B_gv__FadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    else {
        lib1926661B_gf__FadeCreateDialog();
        libNtve_gf_SetDialogItemColor(lib1926661B_gv__FadeImage, lp_color, PlayerGroupAll());
        DialogControlFadeTransparency(lib1926661B_gv__FadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(lib1926661B_gv__FadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeGame);
    }

}

trigger auto_lib1926661B_gf_CinematicFade4_Trigger = null;
bool auto_lib1926661B_gf_CinematicFade4_lp_fadeIn;
fixed auto_lib1926661B_gf_CinematicFade4_lp_duration;
color auto_lib1926661B_gf_CinematicFade4_lp_color;

void lib1926661B_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    auto_lib1926661B_gf_CinematicFade4_lp_fadeIn = lp_fadeIn;
    auto_lib1926661B_gf_CinematicFade4_lp_duration = lp_duration;
    auto_lib1926661B_gf_CinematicFade4_lp_color = lp_color;

    if (auto_lib1926661B_gf_CinematicFade4_Trigger == null) {
        auto_lib1926661B_gf_CinematicFade4_Trigger = TriggerCreate("auto_lib1926661B_gf_CinematicFade4_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_CinematicFade4_Trigger, false, false);
}

bool auto_lib1926661B_gf_CinematicFade4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_lib1926661B_gf_CinematicFade4_lp_fadeIn;
    fixed lp_duration = auto_lib1926661B_gf_CinematicFade4_lp_duration;
    color lp_color = auto_lib1926661B_gf_CinematicFade4_lp_color;

    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    return true;
}

void lib1926661B_gf__FadeCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv__FadeDialog != c_invalidDialogId)) {
        DialogDestroy(lib1926661B_gv__FadeDialog);
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lib1926661B_gv__FadeDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lib1926661B_gv__FadeImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void lib1926661B_gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light) {
    // Variable Declarations
    string lv_light;

    // Automatic Variable Declarations
    string autoE476883A_val;

    // Variable Initialization

    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    if ((lib1926661B_gv_kC_PlanetPortrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorTopLeft, 50, 50, lp_model, "", "Default", false, false);
        lib1926661B_gv_kC_PlanetPortrait = PortraitLastCreated();
        PortraitSetOffscreen(lib1926661B_gv_kC_PlanetPortrait, true);
        PortraitSetBackgroundVisible(lib1926661B_gv_kC_PlanetPortrait, false);
        PortraitSetBorderVisible(lib1926661B_gv_kC_PlanetPortrait, false);
        PortraitUseTransition(PortraitLastCreated(), false);
        PortraitWaitForLoad(lib1926661B_gv_kC_PlanetPortrait);
    }
    else {
        PortraitSetModel(lib1926661B_gv_kC_PlanetPortrait, lp_model, true);
    }
    autoE476883A_val = lp_model;
    if (autoE476883A_val == "EvolutionPlanetZerglingA") {
        lv_light = "EvolutionPlanetZerglingA";
    }
    else if (autoE476883A_val == "EvolutionPlanetZerglingB") {
        lv_light = "EvolutionPlanetZerglingB";
    }
    else if (autoE476883A_val == "EvolutionPlanetBanelingA") {
        lv_light = "EvolutionPlanetBanelingA";
    }
    else if (autoE476883A_val == "EvolutionPlanetBanelingB") {
        lv_light = "EvolutionPlanetBanelingB";
    }
    else if (autoE476883A_val == "EvolutionPlanetHydraliskA") {
        lv_light = "EvolutionPlanetHydraliskA";
    }
    else if (autoE476883A_val == "EvolutionPlanetHydraliskB") {
        lv_light = "EvolutionPlanetHydraliskB";
    }
    else if (autoE476883A_val == "EvolutionPlanetMutaliskA") {
        lv_light = "EvolutionPlanetMutaliskA";
    }
    else if (autoE476883A_val == "EvolutionPlanetMutaliskB") {
        lv_light = "EvolutionPlanetMutaliskB";
    }
    else if (autoE476883A_val == "EvolutionPlanetRoachA") {
        lv_light = "EvolutionPlanetRoachA";
    }
    else if (autoE476883A_val == "EvolutionPlanetRoachB") {
        lv_light = "EvolutionPlanetRoachB";
    }
    else if (autoE476883A_val == "EvolutionPlanetSwarmHostA") {
        lv_light = "EvolutionPlanetSwarmHostA";
    }
    else if (autoE476883A_val == "EvolutionPlanetSwarmHostB") {
        lv_light = "EvolutionPlanetSwarmHostB";
    }
    else if (autoE476883A_val == "EvolutionPlanetUltraliskA") {
        lv_light = "EvolutionPlanetUltraliskA";
    }
    else if (autoE476883A_val == "EvolutionPlanetUltraliskB") {
        lv_light = "EvolutionPlanetUltraliskB";
    }
    else if (autoE476883A_val == "SMX1_Korhal1_Cutscene") {
        lv_light = "PlanetViewKorhalEX1";
    }
    else {
    }
    PortraitSetLight(lib1926661B_gv_kC_PlanetPortrait, lv_light);
    GameSetLighting(lv_light, 0.0);
    lib1926661B_gv_kC_PlanetPortraitEvoMissionLight = lp_light;
    PortraitSetPosition(lib1926661B_gv_kC_PlanetPortrait, c_anchorTopLeft, 0, 0);
    PortraitSetFullscreen(lib1926661B_gv_kC_PlanetPortrait, true);
    PortraitSetOffscreen(lib1926661B_gv_kC_PlanetPortrait, false);
    PortraitSetVisible(lib1926661B_gv_kC_PlanetPortrait, PlayerGroupAll(), true, true);
    lib1926661B_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    lib1926661B_gf_CinematicFade(true, 2.0, Color(0.00, 0.00, 0.00), true);
    lib1926661B_gv_kC_PlanetPortraitPlayerCamera = lp_camera;
    CameraApplyInfo(1, lp_camera, 0.0, -1, 10, true);
    CameraSetValue(1, c_cameraValueDistance, (CameraInfoGetValue(lp_camera, c_cameraValueDistance) + 100.0), 0.0, -1, 20.0);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
}

void lib1926661B_gf_ZoomInPlanetPortrait () {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("UI_Evolutions_PlanetaryZoom", -1), PlayerGroupAll(), 100.0, 0.0);
    ActorSend(ActorFromPortrait(lib1926661B_gv_kC_PlanetPortrait), "AnimPlay Custom Spell PlayForever,NonLooping");
    Wait(3.0, c_timeGame);
    CameraSetValue(1, c_cameraValueDistance, CameraInfoGetValue(lib1926661B_gv_kC_PlanetPortraitPlayerCamera, c_cameraValueDistance), 2.0, 100.0, 10.0);
    Wait(0.5, c_timeGame);
    if ((lib1926661B_gv_kC_PlanetPortraitEvoMissionLight != null)) {
        GameSetLighting(lib1926661B_gv_kC_PlanetPortraitEvoMissionLight, 1.0);
    }

    Wait(1.5, c_timeGame);
}

trigger auto_lib1926661B_gf_HidePlanetPortrait_Trigger = null;

void lib1926661B_gf_HidePlanetPortrait () {
    if (auto_lib1926661B_gf_HidePlanetPortrait_Trigger == null) {
        auto_lib1926661B_gf_HidePlanetPortrait_Trigger = TriggerCreate("auto_lib1926661B_gf_HidePlanetPortrait_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_HidePlanetPortrait_Trigger, false, false);
}

bool auto_lib1926661B_gf_HidePlanetPortrait_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    PortraitSetOffscreen(lib1926661B_gv_kC_PlanetPortrait, true);
    ActorSend(ActorFromPortrait(lib1926661B_gv_kC_PlanetPortrait), "AnimClear Custom 0.000000");
    if ((lib1926661B_gv_kC_PlanetPortraitEvoMissionLight != null)) {
        GameSetLighting(lib1926661B_gv_kC_PlanetPortraitEvoMissionLight, 0.0);
    }

    return true;
}

void lib1926661B_gf_KC_UseUnitNameAsUnitTip (unit lp_unit) {
    // Variable Declarations
    text lv_tip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitGetType(lp_unit) == "ZergDropPod") || (UnitGetType(lp_unit) == "ZergDropPodLarge") || (UnitGetType(lp_unit) == "TerranDropPod") || (UnitGetType(lp_unit) == "ZergDropPodCreep"))) {
        return ;
    }

    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void lib1926661B_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_8A9543B1", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_1926661B_8A9543B1");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_4AD982DB", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_1926661B_4AD982DB");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void lib1926661B_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_FDF0DFC6", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_1926661B_FDF0DFC6");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_F5E6F81E", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_1926661B_F5E6F81E");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

bool lib1926661B_gf_KC_DisplayResourcePickupInfo () {
    // Automatic Variable Declarations
    // Implementation
    return true;
}

bool lib1926661B_gf_KC_ResourcePickupUnit (unit lp_resource) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_resource) == "PalletMinerals") || (UnitGetType(lp_resource) == "NaturalMineralsRed") || (UnitGetType(lp_resource) == "NaturalMinerals") || (UnitGetType(lp_resource) == "PalletGas") || (UnitGetType(lp_resource) == "NaturalGas"))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_lib1926661B_gf_AddMissionTipUserData_Trigger = null;
string auto_lib1926661B_gf_AddMissionTipUserData_lp_tipData;

void lib1926661B_gf_AddMissionTipUserData (string lp_tipData) {
    auto_lib1926661B_gf_AddMissionTipUserData_lp_tipData = lp_tipData;

    if (auto_lib1926661B_gf_AddMissionTipUserData_Trigger == null) {
        auto_lib1926661B_gf_AddMissionTipUserData_Trigger = TriggerCreate("auto_lib1926661B_gf_AddMissionTipUserData_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_AddMissionTipUserData_Trigger, false, false);
}

bool auto_lib1926661B_gf_AddMissionTipUserData_TriggerFunc (bool testConds, bool runActions) {
    string lp_tipData = auto_lib1926661B_gf_AddMissionTipUserData_lp_tipData;

    // Variable Declarations
    int lv_createdCountDown;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UserDataGetInt("CampaignTips", lp_tipData, "Created", 1) <= 0)) {
        return true;
    }

    lib1926661B_gv_kC_MissionTipCount += 1;
    lib1926661B_gv_kC_MissionTip[lib1926661B_gv_kC_MissionTipCount] = lp_tipData;
    lv_createdCountDown = UserDataGetInt("CampaignTips", lp_tipData, "Created", 1);
    UserDataSetInt("CampaignTips", lp_tipData, "Created", 1, (lv_createdCountDown - 1));
    lib1926661B_gf_KC_RefreshTip();
    return true;
}

trigger auto_lib1926661B_gf_DisplayMissionTip_Trigger = null;
text auto_lib1926661B_gf_DisplayMissionTip_lp_buttonText;

void lib1926661B_gf_DisplayMissionTip (text lp_buttonText) {
    auto_lib1926661B_gf_DisplayMissionTip_lp_buttonText = lp_buttonText;

    if (auto_lib1926661B_gf_DisplayMissionTip_Trigger == null) {
        auto_lib1926661B_gf_DisplayMissionTip_Trigger = TriggerCreate("auto_lib1926661B_gf_DisplayMissionTip_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_DisplayMissionTip_Trigger, false, false);
}

bool auto_lib1926661B_gf_DisplayMissionTip_TriggerFunc (bool testConds, bool runActions) {
    text lp_buttonText = auto_lib1926661B_gf_DisplayMissionTip_lp_buttonText;

    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_DifficultyValueInteger(1, 0) == 1)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_903D3715", "A", StringExternal("Param/Value/lib_1926661B_E59ABB37"));
        DialogControlInvokeAsText(lib1926661B_gv_kC_MissionHelpButtonTipPanel, PlayerGroupAll(), "PlayTip_Prot", TextExpressionAssemble("Param/Expression/lib_1926661B_903D3715"), StringExternal("Param/Value/lib_1926661B_0567AF67"), null, null);
        TriggerEnable(lib1926661B_gt_KC_MissionTipClicked, true);
    }

    if ((lib1926661B_gv_kC_ArmyButtonTipReady == true)) {
        Wait(0.25, c_timeReal);
        TriggerExecute(lib1926661B_gt_KC_FlashArmyButtonHelpTip, true, false);
    }

    return true;
}

trigger auto_lib1926661B_gf_ShowHideMissionTip_Trigger = null;
bool auto_lib1926661B_gf_ShowHideMissionTip_lp_showHide;

void lib1926661B_gf_ShowHideMissionTip (bool lp_showHide) {
    auto_lib1926661B_gf_ShowHideMissionTip_lp_showHide = lp_showHide;

    if (auto_lib1926661B_gf_ShowHideMissionTip_Trigger == null) {
        auto_lib1926661B_gf_ShowHideMissionTip_Trigger = TriggerCreate("auto_lib1926661B_gf_ShowHideMissionTip_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_ShowHideMissionTip_Trigger, false, false);
}

bool auto_lib1926661B_gf_ShowHideMissionTip_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_lib1926661B_gf_ShowHideMissionTip_lp_showHide;

    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_DifficultyValueInteger(0, 0) == 1)) {
        return true;
    }

    if ((lib1926661B_gv_kC_MissionHelpButton != c_invalidDialogControlId)) {
        DialogControlSetVisible(lib1926661B_gv_kC_MissionHelpButton, PlayerGroupAll(), lp_showHide);
    }

    return true;
}

void lib1926661B_gf_KC_RefreshTip () {
    // Variable Declarations
    int lv_index;
    text lv_tip;

    // Automatic Variable Declarations
    const int auto01EE6C5A_ae = 1;
    const int auto01EE6C5A_ai = -1;

    // Variable Initialization

    // Implementation
    HelpPanelDestroyAllTips();
    TriggerExecute(lib1926661B_gt_KC_ResourcePickupTip, true, false);
    lv_index = lib1926661B_gv_kC_MissionTipCount;
    for ( ; ( (auto01EE6C5A_ai >= 0 && lv_index <= auto01EE6C5A_ae) || (auto01EE6C5A_ai < 0 && lv_index >= auto01EE6C5A_ae) ) ; lv_index += auto01EE6C5A_ai ) {
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("CampaignTips", lib1926661B_gv_kC_MissionTip[lv_index], "Name", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("CampaignTips", lib1926661B_gv_kC_MissionTip[lv_index], "Description", 1), UserDataGetText("CampaignTips", lib1926661B_gv_kC_MissionTip[lv_index], "Name", 1), UserDataGetImagePath("CampaignTips", lib1926661B_gv_kC_MissionTip[lv_index], "Icon", 1));
        HelpPanelSetHelpItemDarkenedWhenViewed(HelpPanelLastCreatedHelpItem(), false);
    }
}

void lib1926661B_gf_CreateAutoSave () {
    // Variable Declarations
    text lv_formattedText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1926661B_gv_kC_SaveIndex += 1;
    TextExpressionSetToken("Param/Expression/lib_1926661B_945166C0", "A", lib1926661B_gf_StoryMapName(lib1926661B_gf_CurrentMap()));
    TextExpressionSetToken("Param/Expression/lib_1926661B_945166C0", "B", IntToText(lib1926661B_gv_kC_SaveIndex));
    TextExpressionSetToken("Param/Expression/lib_1926661B_945166C0", "C", IntToText(GetDateTimeHour(CurrentDateTimeGet())));
    TextExpressionSetToken("Param/Expression/lib_1926661B_945166C0", "D", IntToText(GetDateTimeMinute(CurrentDateTimeGet())));
    TextExpressionSetToken("Param/Expression/lib_1926661B_945166C0", "E", IntToText(GetDateTimeSecond(CurrentDateTimeGet())));
    lv_formattedText = TextExpressionAssemble("Param/Expression/lib_1926661B_945166C0");
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_SaveLabel, lv_formattedText, PlayerGroupAll());
    DialogControlSetVisible(lib1926661B_gv_kC_SavePanel, PlayerGroupAll(), true);
    Wait(0.005, c_timeGame);
    DialogControlSetVisible(lib1926661B_gv_kC_SavePanel, PlayerGroupAll(), false);
}

void lib1926661B_gf_CinematicModeStarted (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "CineModeStarted");
}

void lib1926661B_gf_CinematicModeEnded (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "CineModeEnded");
}

void lib1926661B_gf_DifficultySetting (int lp_difficulty) {
    // Automatic Variable Declarations
    int autoDEBA0DD7_val;

    // Implementation
    autoDEBA0DD7_val = lp_difficulty;
    if (autoDEBA0DD7_val == 2) {
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Normal", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoDEBA0DD7_val == 3) {
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Hard", "DamageTakenRatio", 1) * 100.0)));
    }
    else {
    }
}

trigger auto_lib1926661B_gf_KC_UpdateObjectivePanelMask_Trigger = null;

void lib1926661B_gf_KC_UpdateObjectivePanelMask () {
    if (auto_lib1926661B_gf_KC_UpdateObjectivePanelMask_Trigger == null) {
        auto_lib1926661B_gf_KC_UpdateObjectivePanelMask_Trigger = TriggerCreate("auto_lib1926661B_gf_KC_UpdateObjectivePanelMask_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_KC_UpdateObjectivePanelMask_Trigger, false, false);
}

bool auto_lib1926661B_gf_KC_UpdateObjectivePanelMask_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((lib1926661B_gv_kC_ObjectivePanel != c_invalidDialogControlId) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lib1926661B_gv_kC_GameOver == false)) {
            if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (lib1926661B_gv_kC_HeroPanel[1].lv_panel != c_invalidDialogControlId) && (DialogControlIsVisible(lib1926661B_gv_kC_HeroPanel[1].lv_panel, 1) == true) && (lib1926661B_gv_kC_HeroPanel[2].lv_panel != c_invalidDialogControlId) && (DialogControlIsVisible(lib1926661B_gv_kC_HeroPanel[2].lv_panel, 1) == true) && (lib1926661B_gv_kC_HeroPanel[3].lv_panel != c_invalidDialogControlId) && (DialogControlIsVisible(lib1926661B_gv_kC_HeroPanel[3].lv_panel, 1) == true)) {
                libNtve_gf_SetDialogItemAlphaMask(lib1926661B_gv_kC_ObjectivePanel, "@UI/ObjectivePanelMaskTwoHeroes", PlayerGroupAll());
            }
            else if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (((lib1926661B_gv_kC_HeroPanel[1].lv_panel != c_invalidDialogControlId) && (DialogControlIsVisible(lib1926661B_gv_kC_HeroPanel[1].lv_panel, 1) == true)) || ((lib1926661B_gv_kC_HeroPanel[2].lv_panel != c_invalidDialogControlId) && (DialogControlIsVisible(lib1926661B_gv_kC_HeroPanel[2].lv_panel, 1) == true)) || ((lib1926661B_gv_kC_HeroPanel[3].lv_panel != c_invalidDialogControlId) && (DialogControlIsVisible(lib1926661B_gv_kC_HeroPanel[3].lv_panel, 1) == true)))) {
                libNtve_gf_SetDialogItemAlphaMask(lib1926661B_gv_kC_ObjectivePanel, "@UI/ObjectivePanelMask", PlayerGroupAll());
            }
            else if (((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == false) || (((lib1926661B_gv_kC_HeroPanel[1].lv_panel == c_invalidDialogControlId) || (DialogControlIsVisible(lib1926661B_gv_kC_HeroPanel[1].lv_panel, 1) == false)) && ((lib1926661B_gv_kC_HeroPanel[2].lv_panel == c_invalidDialogControlId) || (DialogControlIsVisible(lib1926661B_gv_kC_HeroPanel[2].lv_panel, 1) == false)) && ((lib1926661B_gv_kC_HeroPanel[3].lv_panel == c_invalidDialogControlId) || (DialogControlIsVisible(lib1926661B_gv_kC_HeroPanel[3].lv_panel, 1) == false))))) {
                libNtve_gf_SetDialogItemAlphaMask(lib1926661B_gv_kC_ObjectivePanel, "", PlayerGroupAll());
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_lib1926661B_gf_KC_UpdateErrorPanelMask_Trigger = null;

void lib1926661B_gf_KC_UpdateErrorPanelMask () {
    if (auto_lib1926661B_gf_KC_UpdateErrorPanelMask_Trigger == null) {
        auto_lib1926661B_gf_KC_UpdateErrorPanelMask_Trigger = TriggerCreate("auto_lib1926661B_gf_KC_UpdateErrorPanelMask_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_KC_UpdateErrorPanelMask_Trigger, false, false);
}

bool auto_lib1926661B_gf_KC_UpdateErrorPanelMask_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        lib1926661B_gf_KC_UpdateErrorPanelMaskSingle();
        Wait(0.25, c_timeGame);
    }
    return true;
}

void lib1926661B_gf_KC_UpdateErrorPanelMaskSingle () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kC_ErrorPanel != c_invalidDialogControlId) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lib1926661B_gv_kC_GameOver == false)) {
        if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true)) {
            if ((lib1926661B_gv_kC_ErrorPanelMaskOn == false)) {
                lib1926661B_gv_kC_ErrorPanelMaskOn = true;
                libNtve_gf_SetDialogItemAlphaMask(lib1926661B_gv_kC_ErrorPanel, "@UI/InGame_ErrorDisplayMask", PlayerGroupAll());
            }

        }
        else {
            if ((lib1926661B_gv_kC_ErrorPanelMaskOn == true)) {
                lib1926661B_gv_kC_ErrorPanelMaskOn = false;
                libNtve_gf_SetDialogItemAlphaMask(lib1926661B_gv_kC_ErrorPanel, "", PlayerGroupAll());
            }

        }
    }

}

void lib1926661B_gf_KC_HookAchiRedirect (string lp_map) {
    // Variable Declarations
    int lv_panel;

    // Automatic Variable Declarations
    string autoFCD03D96_val;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "/$parent/$parent/MessageLogDialog/AchievementsDialog/RedirectPanelContainer");
    lv_panel = DialogControlLastCreated();
    autoFCD03D96_val = lp_map;
    if (autoFCD03D96_val == "UEDStory") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Summary");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M00") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Prologue");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M01") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Arrival");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M02_1") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Arrival");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M02_2") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Arrival");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M03") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Arrival");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M04") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Abandon");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M05") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Abandon");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M06") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Abandon");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M07") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Abandon");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M08") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Last");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M09") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Last");
    }
    else if (autoFCD03D96_val == "UEDFL_EP01M10") {
        DialogControlSetAnimationState(lv_panel, PlayerGroupAll(), "SetPath", "Last");
    }
    else {
    }
}

void lib1926661B_gf_KC_HookSave () {
    // Variable Declarations
    int lv_panel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/SavePanelContainer");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
    lib1926661B_gv_kC_SaveLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("SavePanel"));
    lib1926661B_gv_kC_SavePanel = DialogControlLastCreated();
}

void lib1926661B_gf_KL_HookupBossBar (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/BossBar" + IntToString(lp_index)));
    lib1926661B_gv_bossBar[lp_index].lv_panel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_bossBar[lp_index].lv_panel, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("HPBar"));
    lib1926661B_gv_bossBar[lp_index].lv_progressBar = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_bossBar[lp_index].lv_panel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
    lib1926661B_gv_bossBar[lp_index].lv_portrait = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_bossBar[lp_index].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("UnitNameLabel"));
    lib1926661B_gv_bossBar[lp_index].lv_title = DialogControlLastCreated();
}

trigger auto_lib1926661B_gf_DisplayBossBarLotC_Trigger = null;
int auto_lib1926661B_gf_DisplayBossBarLotC_lp_index;
text auto_lib1926661B_gf_DisplayBossBarLotC_lp_title;
string auto_lib1926661B_gf_DisplayBossBarLotC_lp_portrait;
int auto_lib1926661B_gf_DisplayBossBarLotC_lp_maximumValue;
string auto_lib1926661B_gf_DisplayBossBarLotC_lp_style;

void lib1926661B_gf_DisplayBossBarLotC (int lp_index, text lp_title, string lp_portrait, int lp_maximumValue, string lp_style) {
    auto_lib1926661B_gf_DisplayBossBarLotC_lp_index = lp_index;
    auto_lib1926661B_gf_DisplayBossBarLotC_lp_title = lp_title;
    auto_lib1926661B_gf_DisplayBossBarLotC_lp_portrait = lp_portrait;
    auto_lib1926661B_gf_DisplayBossBarLotC_lp_maximumValue = lp_maximumValue;
    auto_lib1926661B_gf_DisplayBossBarLotC_lp_style = lp_style;

    if (auto_lib1926661B_gf_DisplayBossBarLotC_Trigger == null) {
        auto_lib1926661B_gf_DisplayBossBarLotC_Trigger = TriggerCreate("auto_lib1926661B_gf_DisplayBossBarLotC_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_DisplayBossBarLotC_Trigger, false, false);
}

bool auto_lib1926661B_gf_DisplayBossBarLotC_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_lib1926661B_gf_DisplayBossBarLotC_lp_index;
    text lp_title = auto_lib1926661B_gf_DisplayBossBarLotC_lp_title;
    string lp_portrait = auto_lib1926661B_gf_DisplayBossBarLotC_lp_portrait;
    int lp_maximumValue = auto_lib1926661B_gf_DisplayBossBarLotC_lp_maximumValue;
    string lp_style = auto_lib1926661B_gf_DisplayBossBarLotC_lp_style;

    // Automatic Variable Declarations
    string autoA550C0AC_val;

    // Implementation
    if ((lib1926661B_gv_bossBar[lp_index].lv_panel == c_invalidDialogControlId)) {
        lib1926661B_gf_KL_HookupBossBar(lp_index);
    }
    DialogControlSetVisible(lib1926661B_gv_bossBar[lp_index].lv_panel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(lib1926661B_gv_bossBar[lp_index].lv_title, lp_title, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lib1926661B_gv_bossBar[lp_index].lv_portrait, lp_portrait, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(lib1926661B_gv_bossBar[lp_index].lv_progressBar, IntToFixed(lp_maximumValue), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(lib1926661B_gv_bossBar[lp_index].lv_progressBar, IntToFixed(lp_maximumValue), PlayerGroupAll());
    autoA550C0AC_val = lp_style;
    if (autoA550C0AC_val == "Terr") {
        DialogControlSetAnimationState(lib1926661B_gv_bossBar[lp_index].lv_panel, PlayerGroupAll(), "RaceStyle", "Terran");
    }
    else if (autoA550C0AC_val == "Zerg") {
        DialogControlSetAnimationState(lib1926661B_gv_bossBar[lp_index].lv_panel, PlayerGroupAll(), "RaceStyle", "Zerg");
    }
    else if (autoA550C0AC_val == "Prot") {
        DialogControlSetAnimationState(lib1926661B_gv_bossBar[lp_index].lv_panel, PlayerGroupAll(), "RaceStyle", "Protoss");
    }
    else {
    }
    return true;
}

trigger auto_lib1926661B_gf_SetBossBarCurrentValueLotC_Trigger = null;
int auto_lib1926661B_gf_SetBossBarCurrentValueLotC_lp_index;
int auto_lib1926661B_gf_SetBossBarCurrentValueLotC_lp_value;

void lib1926661B_gf_SetBossBarCurrentValueLotC (int lp_index, int lp_value) {
    auto_lib1926661B_gf_SetBossBarCurrentValueLotC_lp_index = lp_index;
    auto_lib1926661B_gf_SetBossBarCurrentValueLotC_lp_value = lp_value;

    if (auto_lib1926661B_gf_SetBossBarCurrentValueLotC_Trigger == null) {
        auto_lib1926661B_gf_SetBossBarCurrentValueLotC_Trigger = TriggerCreate("auto_lib1926661B_gf_SetBossBarCurrentValueLotC_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_SetBossBarCurrentValueLotC_Trigger, false, false);
}

bool auto_lib1926661B_gf_SetBossBarCurrentValueLotC_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_lib1926661B_gf_SetBossBarCurrentValueLotC_lp_index;
    int lp_value = auto_lib1926661B_gf_SetBossBarCurrentValueLotC_lp_value;

    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_bossBar[lp_index].lv_panel == c_invalidDialogControlId)) {
        return true;
    }
    libNtve_gf_SetDialogItemCurrentValue(lib1926661B_gv_bossBar[lp_index].lv_progressBar, IntToFixed(lp_value), PlayerGroupAll());
    return true;
}

trigger auto_lib1926661B_gf_SetBossBarMaximumValueLotC_Trigger = null;
int auto_lib1926661B_gf_SetBossBarMaximumValueLotC_lp_index;
int auto_lib1926661B_gf_SetBossBarMaximumValueLotC_lp_value;

void lib1926661B_gf_SetBossBarMaximumValueLotC (int lp_index, int lp_value) {
    auto_lib1926661B_gf_SetBossBarMaximumValueLotC_lp_index = lp_index;
    auto_lib1926661B_gf_SetBossBarMaximumValueLotC_lp_value = lp_value;

    if (auto_lib1926661B_gf_SetBossBarMaximumValueLotC_Trigger == null) {
        auto_lib1926661B_gf_SetBossBarMaximumValueLotC_Trigger = TriggerCreate("auto_lib1926661B_gf_SetBossBarMaximumValueLotC_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_SetBossBarMaximumValueLotC_Trigger, false, false);
}

bool auto_lib1926661B_gf_SetBossBarMaximumValueLotC_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_lib1926661B_gf_SetBossBarMaximumValueLotC_lp_index;
    int lp_value = auto_lib1926661B_gf_SetBossBarMaximumValueLotC_lp_value;

    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_bossBar[lp_index].lv_panel == c_invalidDialogControlId)) {
        return true;
    }
    libNtve_gf_SetDialogItemMaximumValue(lib1926661B_gv_bossBar[lp_index].lv_progressBar, IntToFixed(lp_value), PlayerGroupAll());
    return true;
}

trigger auto_lib1926661B_gf_ShowHideBossBarLotC_Trigger = null;
int auto_lib1926661B_gf_ShowHideBossBarLotC_lp_index;
bool auto_lib1926661B_gf_ShowHideBossBarLotC_lp_showHide;

void lib1926661B_gf_ShowHideBossBarLotC (int lp_index, bool lp_showHide) {
    auto_lib1926661B_gf_ShowHideBossBarLotC_lp_index = lp_index;
    auto_lib1926661B_gf_ShowHideBossBarLotC_lp_showHide = lp_showHide;

    if (auto_lib1926661B_gf_ShowHideBossBarLotC_Trigger == null) {
        auto_lib1926661B_gf_ShowHideBossBarLotC_Trigger = TriggerCreate("auto_lib1926661B_gf_ShowHideBossBarLotC_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_ShowHideBossBarLotC_Trigger, false, false);
}

bool auto_lib1926661B_gf_ShowHideBossBarLotC_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_lib1926661B_gf_ShowHideBossBarLotC_lp_index;
    bool lp_showHide = auto_lib1926661B_gf_ShowHideBossBarLotC_lp_showHide;

    // Automatic Variable Declarations
    bool autoB79AFFCB_val;

    // Implementation
    if ((lib1926661B_gv_bossBar[lp_index].lv_panel == c_invalidDialogControlId)) {
        return true;
    }
    autoB79AFFCB_val = lp_showHide;
    if (autoB79AFFCB_val == true) {
        DialogControlSetVisible(lib1926661B_gv_bossBar[lp_index].lv_panel, PlayerGroupAll(), true);
    }
    else if (autoB79AFFCB_val == false) {
        DialogControlSetVisible(lib1926661B_gv_bossBar[lp_index].lv_panel, PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

void lib1926661B_gf_KL_HookupCheckpointDirective () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CheckpointDirectivePanel");
    lib1926661B_gv_kL_CheckpointDirective = DialogControlLastCreated();
}

trigger auto_lib1926661B_gf_FlashCheckpointReminder_Trigger = null;

void lib1926661B_gf_FlashCheckpointReminder () {
    if (auto_lib1926661B_gf_FlashCheckpointReminder_Trigger == null) {
        auto_lib1926661B_gf_FlashCheckpointReminder_Trigger = TriggerCreate("auto_lib1926661B_gf_FlashCheckpointReminder_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_FlashCheckpointReminder_Trigger, false, false);
}

bool auto_lib1926661B_gf_FlashCheckpointReminder_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kL_CheckpointDirective == c_invalidDialogControlId)) {
        lib1926661B_gf_KL_HookupCheckpointDirective();
    }
    DialogControlSetVisible(lib1926661B_gv_kL_CheckpointDirective, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("CheckpointSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lib1926661B_gf_CreateAutoSave();
    DialogControlSendAnimationEvent(lib1926661B_gv_kL_CheckpointDirective, PlayerGroupAll(), "Birth");
    Wait(lib1926661B_gv_kL_CheckPointFlashDuration, c_timeGame);
    DialogControlSendAnimationEvent(lib1926661B_gv_kL_CheckpointDirective, PlayerGroupAll(), "Death");
    Wait(0.3, c_timeReal);
    DialogControlSetVisible(lib1926661B_gv_kL_CheckpointDirective, PlayerGroupAll(), false);
    return true;
}

void lib1926661B_gf_KL_HookupContPanel () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ContaminationPanel");
    lib1926661B_gv_contaminationPanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_contaminationPanel.lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("ValueLabel"));
    lib1926661B_gv_contaminationPanel.lv_valueLabel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_contaminationPanel.lv_panel, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("ProgressBar"));
    lib1926661B_gv_contaminationPanel.lv_progressBar = DialogControlLastCreated();
}

trigger auto_lib1926661B_gf_ShowHideContaminationPanel_Trigger = null;
bool auto_lib1926661B_gf_ShowHideContaminationPanel_lp_showHide;

void lib1926661B_gf_ShowHideContaminationPanel (bool lp_showHide) {
    auto_lib1926661B_gf_ShowHideContaminationPanel_lp_showHide = lp_showHide;

    if (auto_lib1926661B_gf_ShowHideContaminationPanel_Trigger == null) {
        auto_lib1926661B_gf_ShowHideContaminationPanel_Trigger = TriggerCreate("auto_lib1926661B_gf_ShowHideContaminationPanel_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_ShowHideContaminationPanel_Trigger, false, false);
}

bool auto_lib1926661B_gf_ShowHideContaminationPanel_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_lib1926661B_gf_ShowHideContaminationPanel_lp_showHide;

    // Automatic Variable Declarations
    bool auto2131F786_val;

    // Implementation
    if ((lib1926661B_gv_contaminationPanel.lv_panel == c_invalidDialogControlId)) {
        lib1926661B_gf_KL_HookupContPanel();
    }
    auto2131F786_val = lp_showHide;
    if (auto2131F786_val == true) {
        DialogControlSetVisible(lib1926661B_gv_contaminationPanel.lv_panel, PlayerGroupAll(), true);
        DialogControlSendAnimationEvent(lib1926661B_gv_contaminationPanel.lv_panel, PlayerGroupAll(), "Birth");
    }
    else if (auto2131F786_val == false) {
        DialogControlSendAnimationEvent(lib1926661B_gv_contaminationPanel.lv_panel, PlayerGroupAll(), "Death");
        Wait(0.5, c_timeReal);
        DialogControlSetVisible(lib1926661B_gv_contaminationPanel.lv_panel, PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

trigger auto_lib1926661B_gf_SetCurrentContaminationValue_Trigger = null;
fixed auto_lib1926661B_gf_SetCurrentContaminationValue_lp_vaue;

void lib1926661B_gf_SetCurrentContaminationValue (fixed lp_vaue) {
    auto_lib1926661B_gf_SetCurrentContaminationValue_lp_vaue = lp_vaue;

    if (auto_lib1926661B_gf_SetCurrentContaminationValue_Trigger == null) {
        auto_lib1926661B_gf_SetCurrentContaminationValue_Trigger = TriggerCreate("auto_lib1926661B_gf_SetCurrentContaminationValue_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_SetCurrentContaminationValue_Trigger, false, false);
}

bool auto_lib1926661B_gf_SetCurrentContaminationValue_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_vaue = auto_lib1926661B_gf_SetCurrentContaminationValue_lp_vaue;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(lib1926661B_gv_contaminationPanel.lv_progressBar, lp_vaue, PlayerGroupAll());
    return true;
}

void lib1926661B_gf_SetMaxContaminationValue (fixed lp_vaue) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemMaximumValue(lib1926661B_gv_contaminationPanel.lv_progressBar, lp_vaue, PlayerGroupAll());
}

trigger auto_lib1926661B_gf_SetContaminationText_Trigger = null;
text auto_lib1926661B_gf_SetContaminationText_lp_text;

void lib1926661B_gf_SetContaminationText (text lp_text) {
    auto_lib1926661B_gf_SetContaminationText_lp_text = lp_text;

    if (auto_lib1926661B_gf_SetContaminationText_Trigger == null) {
        auto_lib1926661B_gf_SetContaminationText_Trigger = TriggerCreate("auto_lib1926661B_gf_SetContaminationText_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_SetContaminationText_Trigger, false, false);
}

bool auto_lib1926661B_gf_SetContaminationText_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_lib1926661B_gf_SetContaminationText_lp_text;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1926661B_gv_contaminationPanel.lv_valueLabel, lp_text, PlayerGroupAll());
    return true;
}

void lib1926661B_gf_UED_CreateCreditsPanel () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/KLCreditsPanel");
    lib1926661B_gv_uED_CreditsPanel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_uED_CreditsPanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("BackgroundImage"));
    lib1926661B_gv_uED_CreditsBackground = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_uED_CreditsPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ExitButton"));
    lib1926661B_gv_uED_CreditsButton = DialogControlLastCreated();
}

trigger auto_lib1926661B_gf_ShowHideCreditsPanel_Trigger = null;
bool auto_lib1926661B_gf_ShowHideCreditsPanel_lp_showHide;

void lib1926661B_gf_ShowHideCreditsPanel (bool lp_showHide) {
    auto_lib1926661B_gf_ShowHideCreditsPanel_lp_showHide = lp_showHide;

    if (auto_lib1926661B_gf_ShowHideCreditsPanel_Trigger == null) {
        auto_lib1926661B_gf_ShowHideCreditsPanel_Trigger = TriggerCreate("auto_lib1926661B_gf_ShowHideCreditsPanel_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_ShowHideCreditsPanel_Trigger, false, false);
}

bool auto_lib1926661B_gf_ShowHideCreditsPanel_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_lib1926661B_gf_ShowHideCreditsPanel_lp_showHide;

    // Automatic Variable Declarations
    bool auto64E73590_val;

    // Implementation
    if ((lib1926661B_gv_uED_CreditsPanel == c_invalidDialogControlId)) {
        lib1926661B_gf_UED_CreateCreditsPanel();
    }
    auto64E73590_val = lp_showHide;
    if (auto64E73590_val == false) {
        DialogControlSetVisible(lib1926661B_gv_uED_CreditsPanel, PlayerGroupAll(), false);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.0);
        TriggerEnable(lib1926661B_gt_UED_CycleCreditSplash, false);
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    }
    else if (auto64E73590_val == true) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "UED_CreditsOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.0);
        lib1926661B_gf_SetAllSoundChannelVolumesCampaign(lib1926661B_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 0.0);
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Textures\\loading_generic_nobg.dds", PlayerGroupAll());
        DialogControlSetVisible(lib1926661B_gv_uED_CreditsPanel, PlayerGroupAll(), true);
        DialogControlSetVisible(lib1926661B_gv_uED_CreditsButton, PlayerGroupAll(), true);
        DialogControlSendAnimationEvent(lib1926661B_gv_uED_CreditsPanel, PlayerGroupAll(), "Scroll");
        DialogControlSendAnimationEvent(lib1926661B_gv_uED_CreditsPanel, PlayerGroupAll(), "FadeIn");
        TriggerEnable(lib1926661B_gt_UED_HideCredits, true);
        TriggerExecute(lib1926661B_gt_UED_HideCredits, true, false);
        Wait(7.0, c_timeGame);
        TriggerEnable(lib1926661B_gt_UED_CycleCreditSplash, true);
        lib1926661B_gv_uED_CreditsCycle = 0;
    }
    else {
    }
    return true;
}

void lib1926661B_gf_CreditsExitButtonPressed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "CreditsExitButtonPressed");
}

bool lib1926661B_gf_KL_ReturnLoreState (string lp_instance) {
    // Variable Declarations
    string lv__SectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(null, "Lore");
    if ((lib1926661B_gf_KC_LoadTransitionVarBoolean(lib1926661B_gv_kC_CampaignBank, lv__SectionName, UserDataGetString("Lore", lp_instance, "ID", 1), false) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1926661B_gf_LoreFoundLotC (string lp_instance) {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gf_KL_ReturnLoreState(lp_instance);
}

void lib1926661B_gf_KL_CreateLoreWindow () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("LoreWindow"));
    lib1926661B_gv_kL_LoreWindow.lv_window = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kL_LoreWindow.lv_window, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("CloseButton"));
    lib1926661B_gv_kL_LoreWindow.lv_closeButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kL_LoreWindow.lv_window, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("ScrollableFrame/ContainerFrame/DescriptionLabel"));
    lib1926661B_gv_kL_LoreWindow.lv_descriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kL_LoreWindow.lv_window, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("ScrollableFrame/ContainerFrame/TitleLabel"));
    lib1926661B_gv_kL_LoreWindow.lv_titleLabel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kL_LoreWindow.lv_window, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("BackgroundImage"));
    lib1926661B_gv_kL_LoreWindow.lv_backgroundImage = DialogControlLastCreated();
}

void lib1926661B_gf_DisplayLoreWindow (string lp_instance) {
    // Variable Declarations
    int lv_index;
    string lv__SectionName;

    // Automatic Variable Declarations
    int autoA3E324CB_ae;
    const int autoA3E324CB_ai = 1;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((lib1926661B_gv_kL_LoreWindow.lv_window == c_invalidDialogControlId)) {
        lib1926661B_gf_KL_CreateLoreWindow();
    }
    if ((lib1926661B_gv_kL_LoreWindowVisible == true)) {
        DialogControlSendAnimationEvent(lib1926661B_gv_kL_LoreWindow.lv_window, PlayerGroupAll(), "HidePanel");
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("Lore", lib1926661B_gv_kL_LastLoreShown, "Title", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("Lore", lib1926661B_gv_kL_LastLoreShown, "Description", 1), UserDataGetText("Lore", lib1926661B_gv_kL_LastLoreShown, "Title", 1), "Assets\\Textures\\ui_tip_questionmark.dds");
        Wait(0.5, c_timeReal);
        lib1926661B_gv_kL_LoreWindowVisible = false;
    }

    lib1926661B_gv_kL_LastLoreShown = lp_instance;
    lib1926661B_gf_CampaignDirective(lib1926661B_ge_DirectiveType_Chip, StringExternal("Param/Value/lib_1926661B_199FF0D7"));
    DialogControlSetVisible(lib1926661B_gv_kL_LoreWindow.lv_titleLabel, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemTextWriteout(lib1926661B_gv_kL_LoreWindow.lv_titleLabel, true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(lib1926661B_gv_kL_LoreWindow.lv_titleLabel, 1.5, PlayerGroupAll());
    DialogControlSetVisible(lib1926661B_gv_kL_LoreWindow.lv_descriptionLabel, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemTextWriteout(lib1926661B_gv_kL_LoreWindow.lv_descriptionLabel, true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(lib1926661B_gv_kL_LoreWindow.lv_descriptionLabel, 12.5, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kL_LoreWindow.lv_titleLabel, UserDataGetText("Lore", lp_instance, "Title", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kL_LoreWindow.lv_descriptionLabel, UserDataGetText("Lore", lp_instance, "Description", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lib1926661B_gv_kL_LoreWindow.lv_backgroundImage, UserDataGetImagePath("Lore", lp_instance, "Icon Image", 1), PlayerGroupAll());
    DialogControlSetVisible(lib1926661B_gv_kL_LoreWindow.lv_window, PlayerGroupAll(), true);
    DialogControlSendAnimationEvent(lib1926661B_gv_kL_LoreWindow.lv_window, PlayerGroupAll(), "ShowPanel");
    lib1926661B_gv_kL_LoreWindowVisible = true;
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(null, "Lore");
    lib1926661B_gf_KC_SaveTransitionVarBoolean(lib1926661B_gv_kC_CampaignBank, lv__SectionName, UserDataGetString("Lore", lp_instance, "ID", 1), true, false);
    lib1926661B_gf_KC_SaveCampaignBank();
    Wait(0.2, c_timeReal);
    SoundPlayForPlayer(SoundLink("ChipReadoutSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogControlSetVisible(lib1926661B_gv_kL_LoreWindow.lv_titleLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(lib1926661B_gv_kL_LoreWindow.lv_descriptionLabel, PlayerGroupAll(), true);
    Wait(0.2, c_timeReal);
    lib1926661B_gv_kL_MaxLore = 0;
    lib1926661B_gv_kL_MaxLoreEarned = 0;
    autoA3E324CB_ae = UserDataInstanceCount("Lore");
    lv_index = 1;
    for ( ; ( (autoA3E324CB_ai >= 0 && lv_index <= autoA3E324CB_ae) || (autoA3E324CB_ai < 0 && lv_index >= autoA3E324CB_ae) ) ; lv_index += autoA3E324CB_ai ) {
        lib1926661B_gv_kL_MaxLore += 1;
        if ((lib1926661B_gf_LoreFoundLotC(UserDataInstance("Lore", lv_index)) == true)) {
            lib1926661B_gv_kL_MaxLoreEarned += 1;
        }
    }
    if ((lib1926661B_gv_kL_MaxLoreEarned >= 19)) {
        libAE8FC9D3_gf_AwardAchievement("EP01-Lore01", 1);
    }
    if ((lib1926661B_gv_kL_MaxLoreEarned >= 38)) {
        libAE8FC9D3_gf_AwardAchievement("EP01-Lore02", 1);
    }
    if ((lib1926661B_gv_kL_MaxLoreEarned == 56)) {
        libAE8FC9D3_gf_AwardAchievement("EP01-Lore03", 1);
    }
}

void lib1926661B_gf_UpdateCodexItems () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto365B6C1B_ae;
    const int auto365B6C1B_ai = 1;

    // Variable Initialization

    // Implementation
    auto365B6C1B_ae = UserDataInstanceCount("Lore");
    lv_index = 1;
    for ( ; ( (auto365B6C1B_ai >= 0 && lv_index <= auto365B6C1B_ae) || (auto365B6C1B_ai < 0 && lv_index >= auto365B6C1B_ae) ) ; lv_index += auto365B6C1B_ai ) {
        if ((lib1926661B_gf_LoreFoundLotC(UserDataInstance("Lore", lv_index)) == true)) {
            if ((UserDataGetGameLink("Lore", UserDataInstance("Lore", lv_index), "SoundFile", 1) != "")) {
            }

        }

    }
}

void lib1926661B_gf_EarnAudiologLore (string lp_instance) {
    // Variable Declarations
    string lv__SectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((UserDataGetGameLink("Lore", lp_instance, "SoundFile", 1) == null)) {
        return ;
    }
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(null, "Lore");
    lib1926661B_gf_KC_SaveTransitionVarBoolean(lib1926661B_gv_kC_CampaignBank, lv__SectionName, UserDataGetString("Lore", lp_instance, "ID", 1), true, false);
    lib1926661B_gf_KC_SaveCampaignBank();
}

void lib1926661B_gf_KL_HookupTimerWindow (int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/TimerWindow" + IntToString(lp_index)));
    lib1926661B_gv_timerPanel[lp_index].lv_panel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_timerPanel[lp_index].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("TimerTitle"));
    lib1926661B_gv_timerPanel[lp_index].lv_titleLabel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_timerPanel[lp_index].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("TimerText"));
    lib1926661B_gv_timerPanel[lp_index].lv_timeLabel = DialogControlLastCreated();
}

trigger auto_lib1926661B_gf_CreateTimerWindowLotC_Trigger = null;
timer auto_lib1926661B_gf_CreateTimerWindowLotC_lp_timer;
text auto_lib1926661B_gf_CreateTimerWindowLotC_lp_title;
bool auto_lib1926661B_gf_CreateTimerWindowLotC_lp_visibility;
bool auto_lib1926661B_gf_CreateTimerWindowLotC_lp_elapsed;
int auto_lib1926661B_gf_CreateTimerWindowLotC_lp_index;

void lib1926661B_gf_CreateTimerWindowLotC (timer lp_timer, text lp_title, bool lp_visibility, bool lp_elapsed, int lp_index) {
    auto_lib1926661B_gf_CreateTimerWindowLotC_lp_timer = lp_timer;
    auto_lib1926661B_gf_CreateTimerWindowLotC_lp_title = lp_title;
    auto_lib1926661B_gf_CreateTimerWindowLotC_lp_visibility = lp_visibility;
    auto_lib1926661B_gf_CreateTimerWindowLotC_lp_elapsed = lp_elapsed;
    auto_lib1926661B_gf_CreateTimerWindowLotC_lp_index = lp_index;

    if (auto_lib1926661B_gf_CreateTimerWindowLotC_Trigger == null) {
        auto_lib1926661B_gf_CreateTimerWindowLotC_Trigger = TriggerCreate("auto_lib1926661B_gf_CreateTimerWindowLotC_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_CreateTimerWindowLotC_Trigger, false, false);
}

bool auto_lib1926661B_gf_CreateTimerWindowLotC_TriggerFunc (bool testConds, bool runActions) {
    timer lp_timer = auto_lib1926661B_gf_CreateTimerWindowLotC_lp_timer;
    text lp_title = auto_lib1926661B_gf_CreateTimerWindowLotC_lp_title;
    bool lp_visibility = auto_lib1926661B_gf_CreateTimerWindowLotC_lp_visibility;
    bool lp_elapsed = auto_lib1926661B_gf_CreateTimerWindowLotC_lp_elapsed;
    int lp_index = auto_lib1926661B_gf_CreateTimerWindowLotC_lp_index;

    // Automatic Variable Declarations
    int autoE3E7176D_val;

    // Implementation
    if ((lib1926661B_gv_timerPanel[lp_index].lv_panel == c_invalidDialogControlId)) {
        lib1926661B_gf_KL_HookupTimerWindow(lp_index);
    }
    lib1926661B_gv_kL_WindowTimer[lp_index] = lp_timer;
    lib1926661B_gv_timerPanel[lp_index].lv_timerActive = true;
    lib1926661B_gv_timerPanel[lp_index].lv_timerType = lp_elapsed;
    TriggerEnable(lib1926661B_gt_KL_UpdateTimerWindow, true);
    autoE3E7176D_val = lp_index;
    if (autoE3E7176D_val == 1) {
        TriggerEnable(lib1926661B_gt_KL_TimerExpires1, true);
    }
    else if (autoE3E7176D_val == 2) {
        TriggerEnable(lib1926661B_gt_KL_TimerExpires2, true);
    }
    else if (autoE3E7176D_val == 3) {
        TriggerEnable(lib1926661B_gt_KL_TimerExpires3, true);
    }
    else {
    }
    libNtve_gf_SetDialogItemText(lib1926661B_gv_timerPanel[lp_index].lv_titleLabel, lp_title, PlayerGroupAll());
    if ((lp_visibility == true)) {
        lib1926661B_gf_ShowHideTimerWindowLotC(true, lp_index);
    }
    return true;
}

trigger auto_lib1926661B_gf_ShowHideTimerWindowLotC_Trigger = null;
bool auto_lib1926661B_gf_ShowHideTimerWindowLotC_lp_showHide;
int auto_lib1926661B_gf_ShowHideTimerWindowLotC_lp_index;

void lib1926661B_gf_ShowHideTimerWindowLotC (bool lp_showHide, int lp_index) {
    auto_lib1926661B_gf_ShowHideTimerWindowLotC_lp_showHide = lp_showHide;
    auto_lib1926661B_gf_ShowHideTimerWindowLotC_lp_index = lp_index;

    if (auto_lib1926661B_gf_ShowHideTimerWindowLotC_Trigger == null) {
        auto_lib1926661B_gf_ShowHideTimerWindowLotC_Trigger = TriggerCreate("auto_lib1926661B_gf_ShowHideTimerWindowLotC_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_ShowHideTimerWindowLotC_Trigger, false, false);
}

bool auto_lib1926661B_gf_ShowHideTimerWindowLotC_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_lib1926661B_gf_ShowHideTimerWindowLotC_lp_showHide;
    int lp_index = auto_lib1926661B_gf_ShowHideTimerWindowLotC_lp_index;

    // Automatic Variable Declarations
    bool auto781B2023_val;

    // Implementation
    if ((lib1926661B_gv_kL_WindowTimer[lp_index] == null)) {
        return true;
    }

    auto781B2023_val = lp_showHide;
    if (auto781B2023_val == true) {
        DialogControlSetVisible(lib1926661B_gv_timerPanel[lp_index].lv_panel, PlayerGroupAll(), true);
        DialogControlSendAnimationEvent(lib1926661B_gv_timerPanel[lp_index].lv_panel, PlayerGroupAll(), "Birth");
        DialogControlSendAnimationEvent(lib1926661B_gv_timerPanel[lp_index].lv_panel, PlayerGroupAll(), "Highlight");
        Wait(lib1926661B_gv_kL_HighlightDuration, c_timeGame);
        DialogControlSendAnimationEvent(lib1926661B_gv_timerPanel[lp_index].lv_panel, PlayerGroupAll(), "HighlightStop");
    }
    else if (auto781B2023_val == false) {
        DialogControlSendAnimationEvent(lib1926661B_gv_timerPanel[lp_index].lv_panel, PlayerGroupAll(), "Death");
        Wait(0.5, c_timeReal);
        DialogControlSetVisible(lib1926661B_gv_timerPanel[lp_index].lv_panel, PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

trigger auto_lib1926661B_gf_DestroyTimerWindowLotC_Trigger = null;
int auto_lib1926661B_gf_DestroyTimerWindowLotC_lp_index;

void lib1926661B_gf_DestroyTimerWindowLotC (int lp_index) {
    auto_lib1926661B_gf_DestroyTimerWindowLotC_lp_index = lp_index;

    if (auto_lib1926661B_gf_DestroyTimerWindowLotC_Trigger == null) {
        auto_lib1926661B_gf_DestroyTimerWindowLotC_Trigger = TriggerCreate("auto_lib1926661B_gf_DestroyTimerWindowLotC_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_DestroyTimerWindowLotC_Trigger, false, false);
}

bool auto_lib1926661B_gf_DestroyTimerWindowLotC_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_lib1926661B_gf_DestroyTimerWindowLotC_lp_index;

    // Automatic Variable Declarations
    int auto0FC3EDF6_val;

    // Implementation
    if ((lib1926661B_gv_kL_WindowTimer[lp_index] == null)) {
        return true;
    }

    auto0FC3EDF6_val = lp_index;
    if (auto0FC3EDF6_val == 1) {
        TriggerEnable(lib1926661B_gt_KL_TimerExpires1, false);
    }
    else if (auto0FC3EDF6_val == 2) {
        TriggerEnable(lib1926661B_gt_KL_TimerExpires2, false);
    }
    else if (auto0FC3EDF6_val == 3) {
        TriggerEnable(lib1926661B_gt_KL_TimerExpires3, false);
    }
    else {
    }
    lib1926661B_gf_ShowHideTimerWindowLotC(false, lp_index);
    libNtve_gf_StopTimer(lib1926661B_gv_kL_WindowTimer[lp_index]);
    lib1926661B_gv_kL_WindowTimer[lp_index] = null;
    return true;
}

trigger auto_lib1926661B_gf_KL_UpdateTimerWindow_Trigger = null;
int auto_lib1926661B_gf_KL_UpdateTimerWindow_lp_index;

void lib1926661B_gf_KL_UpdateTimerWindow (int lp_index) {
    auto_lib1926661B_gf_KL_UpdateTimerWindow_lp_index = lp_index;

    if (auto_lib1926661B_gf_KL_UpdateTimerWindow_Trigger == null) {
        auto_lib1926661B_gf_KL_UpdateTimerWindow_Trigger = TriggerCreate("auto_lib1926661B_gf_KL_UpdateTimerWindow_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_KL_UpdateTimerWindow_Trigger, false, false);
}

bool auto_lib1926661B_gf_KL_UpdateTimerWindow_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_lib1926661B_gf_KL_UpdateTimerWindow_lp_index;

    // Automatic Variable Declarations
    bool auto813EB206_val;

    // Implementation
    auto813EB206_val = lib1926661B_gv_timerPanel[lp_index].lv_timerType;
    if (auto813EB206_val == false) {
        libNtve_gf_SetDialogItemText(lib1926661B_gv_timerPanel[lp_index].lv_timeLabel, lib1926661B_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(lib1926661B_gv_kL_WindowTimer[lp_index]))), PlayerGroupAll());
    }
    else if (auto813EB206_val == true) {
        libNtve_gf_SetDialogItemText(lib1926661B_gv_timerPanel[lp_index].lv_timeLabel, lib1926661B_gf_FormatTimeCampaign(FixedToInt(TimerGetElapsed(lib1926661B_gv_kL_WindowTimer[lp_index]))), PlayerGroupAll());
    }
    else {
    }
    return true;
}

void lib1926661B_gf_TimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed, int lp_position) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    string auto95A7B6CE_val;
    int auto2B9FA9B3_val;

    // Variable Initialization

    // Implementation
    TimerWindowCreate(lp_timer, lp_title, lp_visible, lp_elapsed);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBackground, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFill, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBorder, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFrame, c_triggerImageTypeNineSlice);
    TimerWindowSetStyle(TimerWindowLastCreated(), c_timerWindowStyleVerticalTitleTime, false);
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 80);
    lib1926661B_gf_RepositionTimerWindowDeprecated(TimerWindowLastCreated());
    if ((lib1926661B_gv_kC_TimerWindowHighlightFrame != c_invalidDialogControlId)) {
        DialogControlDestroy(lib1926661B_gv_kC_TimerWindowHighlightFrame);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer\\ConsoleUIContainer\\TriggerWindowPanel\\TimerWindowTemplate");
    lib1926661B_gv_kC_TimerWindowHighlightFrame = DialogControlLastCreated();
    lib1926661B_gv_kCTimerWindowTimer = lp_timer;
    lib1926661B_gv_kC_TimerWindowInDanger = false;
    TriggerEnable(lib1926661B_gt_PU_TimerWindowThresholdCrossed, true);
    TriggerEnable(lib1926661B_gt_PU_TimerWindowLoadUpdate, true);
    lib1926661B_gf_FlashTimerWindowDeprecated(8.0, false);
    auto95A7B6CE_val = PlayerRace(1);
    if (auto95A7B6CE_val == "Prot") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 100.00, 0.00), 1);
    }
    else if (auto95A7B6CE_val == "Terr") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(42.75, 68.24, 16.86), 1);
    }
    else if (auto95A7B6CE_val == "Zerg") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 1);
    }
    else {
    }
    auto2B9FA9B3_val = lp_position;
    if (auto2B9FA9B3_val == lib1926661B_ge_TimerWindowPosition_BottomRight) {
        DialogControlSetAnimationState(lib1926661B_gv_kC_TimerWindowHighlightFrame, PlayerGroupAll(), "Position", "Bottom-Right");
    }
    else if (auto2B9FA9B3_val == lib1926661B_ge_TimerWindowPosition_TopCenter) {
        DialogControlSetPosition(lib1926661B_gv_kC_TimerWindowHighlightFrame, PlayerGroupAll(), c_anchorTop, 0, 0);
        DialogControlSetAnimationState(lib1926661B_gv_kC_TimerWindowHighlightFrame, PlayerGroupAll(), "Position", "Top-Center");
    }
    else if (auto2B9FA9B3_val == lib1926661B_ge_TimerWindowPosition_TopRight) {
        DialogControlSetAnimationState(lib1926661B_gv_kC_TimerWindowHighlightFrame, PlayerGroupAll(), "Position", "Top-Right");
    }
    else {
    }
}

void lib1926661B_gf_RepositionTimerWindowDeprecated (int lp_timerWindow) {
    // Automatic Variable Declarations
    // Implementation
    TimerWindowSetAnchor(lp_timerWindow, c_anchorTopRight, 0, 50);
}

void lib1926661B_gf_FlashTimerWindowDeprecated (fixed lp_duration, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_kC_TimerWindowHighlightDuration = lp_duration;
    TriggerExecute(lib1926661B_gt_PU_TimerWindowFlash, true, lp_waitOption);
}

void lib1926661B_gf_SetTimerWindowDangerThresholdDeprecated (fixed lp_thresholdTime) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_kC_TimerWindowDangerThreshold = lp_thresholdTime;
}

color lib1926661B_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps) {
    // Variable Declarations
    int lv_middle;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Automatic Variable Declarations
    int auto6CC7C496_val;

    // Variable Initialization

    // Implementation
    auto6CC7C496_val = lp_steps;
    if (auto6CC7C496_val == 1) {
        return lp_color1;
    }
    else if (auto6CC7C496_val == 2) {
        lv_r = (ColorGetComponent(lp_color1, c_colorComponentRed)+(ColorGetComponent(lp_color2, c_colorComponentRed)-ColorGetComponent(lp_color1, c_colorComponentRed))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_g = (ColorGetComponent(lp_color1, c_colorComponentGreen)+(ColorGetComponent(lp_color2, c_colorComponentGreen)-ColorGetComponent(lp_color1, c_colorComponentGreen))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_b = (ColorGetComponent(lp_color1, c_colorComponentBlue)+(ColorGetComponent(lp_color2, c_colorComponentBlue)-ColorGetComponent(lp_color1, c_colorComponentBlue))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        return Color(lv_r, lv_g, lv_b);
    }
    else if (auto6CC7C496_val == 3) {
        lv_middle = ((lp_minValue+lp_maxValue)/2);
        if ((lp_progress < lv_middle)) {
            return lib1926661B_gf_ProgressColor(lp_minValue, lv_middle, lp_progress, lp_color1, lp_color2, Color(0,0,0), 2);
        }
        else if ((lp_progress == lv_middle)) {
            return lp_color2;
        }
        else if ((lp_progress > lv_middle)) {
            return lib1926661B_gf_ProgressColor(lv_middle, lp_maxValue, lp_progress, lp_color2, lp_color3, Color(0,0,0), 2);
        }
    }
    else {
    }
    return lp_color1;
}

trigger auto_lib1926661B_gf_DisplayArmyButton_Trigger = null;
bool auto_lib1926661B_gf_DisplayArmyButton_lp_doDoNot;

void lib1926661B_gf_DisplayArmyButton (bool lp_doDoNot) {
    auto_lib1926661B_gf_DisplayArmyButton_lp_doDoNot = lp_doDoNot;

    if (auto_lib1926661B_gf_DisplayArmyButton_Trigger == null) {
        auto_lib1926661B_gf_DisplayArmyButton_Trigger = TriggerCreate("auto_lib1926661B_gf_DisplayArmyButton_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_DisplayArmyButton_Trigger, false, false);
}

bool auto_lib1926661B_gf_DisplayArmyButton_TriggerFunc (bool testConds, bool runActions) {
    bool lp_doDoNot = auto_lib1926661B_gf_DisplayArmyButton_lp_doDoNot;

    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kC_ArmyButton != c_invalidDialogControlId)) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeFlash, "UIContainer/ConsoleUIContainer/ArmyButtonTipEffects");
    lib1926661B_gv_kC_ArmyButtonTipPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/ArmyButton");
    lib1926661B_gv_kC_ArmyButton = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    TriggerEnable(lib1926661B_gt_KC_ArmyButtonUsed, true);
    if ((lp_doDoNot == true)) {
        Wait(3.0, c_timeReal);
        TriggerQueueEnter();
        TriggerExecute(lib1926661B_gt_KC_FlashArmyButtonHelpTip, true, false);
        TriggerQueueExit();
    }

    return true;
}

trigger auto_lib1926661B_gf_DisplayProgressBar_Trigger = null;
text auto_lib1926661B_gf_DisplayProgressBar_lp_title;
int auto_lib1926661B_gf_DisplayProgressBar_lp_min;
int auto_lib1926661B_gf_DisplayProgressBar_lp_max;

void lib1926661B_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max) {
    auto_lib1926661B_gf_DisplayProgressBar_lp_title = lp_title;
    auto_lib1926661B_gf_DisplayProgressBar_lp_min = lp_min;
    auto_lib1926661B_gf_DisplayProgressBar_lp_max = lp_max;

    if (auto_lib1926661B_gf_DisplayProgressBar_Trigger == null) {
        auto_lib1926661B_gf_DisplayProgressBar_Trigger = TriggerCreate("auto_lib1926661B_gf_DisplayProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_DisplayProgressBar_Trigger, false, false);
}

bool auto_lib1926661B_gf_DisplayProgressBar_TriggerFunc (bool testConds, bool runActions) {
    text lp_title = auto_lib1926661B_gf_DisplayProgressBar_lp_title;
    int lp_min = auto_lib1926661B_gf_DisplayProgressBar_lp_min;
    int lp_max = auto_lib1926661B_gf_DisplayProgressBar_lp_max;

    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_pP_ProgressBarPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ProgressFrame");
        lib1926661B_gv_pP_ProgressBarPanel = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_pP_ProgressBarPanel, c_triggerControlTypeLabel, "NameLabel");
        lib1926661B_gv_pP_ProgressBarLabelTitle = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_pP_ProgressBarPanel, c_triggerControlTypeImage, "BarImage");
        lib1926661B_gv_pP_ProgressBarImageBar = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_pP_ProgressBarPanel, c_triggerControlTypeLabel, "LeftBarLabel");
        lib1926661B_gv_pP_ProgressBarLabelBarLeft = DialogControlLastCreated();
    }

    lib1926661B_gf_SetProgressBarTitle(lp_title);
    lib1926661B_gf_SetProgressBarColor(Color(42.75, 68.24, 16.86));
    lib1926661B_gf_SetProgressBarValueRange(lp_min, lp_max);
    DialogControlSetVisible(lib1926661B_gv_pP_ProgressBarPanel, PlayerGroupAll(), true);
    lib1926661B_gv_pP_ProgressBarShowing = true;
    while (true) {
        if ((lib1926661B_gv_pP_ProgressBarPanel == c_invalidDialogControlId)) {
            return true;
        }

        if ((DialogControlIsVisible(lib1926661B_gv_pP_ProgressBarPanel, 1) == true)) {
            lib1926661B_gf_PP_UpdateProgressBar();
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

void lib1926661B_gf_SetProgressBarTitle (text lp_title) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1926661B_gv_pP_ProgressBarLabelTitle, lp_title, PlayerGroupAll());
}

void lib1926661B_gf_SetProgressBarValueRange (int lp_min, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_pP_ProgressBarMin = lp_min;
    lib1926661B_gv_pP_ProgressBarMax = lp_max;
}

void lib1926661B_gf_SetProgressBarLabel (text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1926661B_gv_pP_ProgressBarLabelBarLeft, lp_label, PlayerGroupAll());
}

void lib1926661B_gf_SetProgressBarProgress (int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_pP_ProgressBarProgress = lp_progress;
}

void lib1926661B_gf_SetProgressBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(lib1926661B_gv_pP_ProgressBarImageBar, lp_color, PlayerGroupAll());
}

void lib1926661B_gf_ShowHideProgressBar (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_pP_ProgressBarPanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((lp_showHide == true)) {
        lib1926661B_gf_PP_UpdateProgressBar();
    }

    DialogControlSetVisible(lib1926661B_gv_pP_ProgressBarPanel, PlayerGroupAll(), lp_showHide);
}

void lib1926661B_gf_PP_UpdateProgressBar () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1926661B_gv_pP_ProgressBarProgress > 0)) {
        DialogControlSetSize(lib1926661B_gv_pP_ProgressBarImageBar, PlayerGroupAll(), FixedToInt((IntToFixed(lib1926661B_gv_pPC_ProgressBarWidth) * (IntToFixed(lib1926661B_gv_pP_ProgressBarProgress) / IntToFixed(lib1926661B_gv_pP_ProgressBarMax)))), lib1926661B_gv_pPC_ProgressBarHeight);
        DialogControlSetVisible(lib1926661B_gv_pP_ProgressBarImageBar, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lib1926661B_gv_pP_ProgressBarImageBar, PlayerGroupAll(), false);
    }
}

color lib1926661B_gf_GetProgressBarColorCampaign () {
    // Automatic Variable Declarations
    // Implementation
    return Color(100.00, 61.57, 23.53);
}

int lib1926661B_gf_PP_BB_HPBarCurrentWidth () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    int lv_width;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1926661B_gv_pP_BB_Boss == null)) {
        lv_current = lib1926661B_gv_pP_BB_CurrentValue;
        lv_max = lib1926661B_gv_pP_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(lib1926661B_gv_pP_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lib1926661B_gv_pP_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(lib1926661B_gv_pP_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lib1926661B_gv_pP_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    if ((lv_max <= 0.0)) {
        lv_max = 1.0;
    }

    if ((lv_current > lv_max)) {
        lv_current = lv_max;
    }

    lv_width = FixedToInt((224.0 * (lv_current / lv_max)));
    return lv_width;
}

text lib1926661B_gf_PP_BB_HPBarFormatLabel () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1926661B_gv_pP_BB_Boss == null)) {
        lv_current = lib1926661B_gv_pP_BB_CurrentValue;
        lv_max = lib1926661B_gv_pP_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(lib1926661B_gv_pP_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lib1926661B_gv_pP_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(lib1926661B_gv_pP_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lib1926661B_gv_pP_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    lv_label = (IntToText(FixedToInt(lv_current)) + StringExternal("Param/Value/lib_1926661B_B6DC76CA") + IntToText(FixedToInt(lv_max)));
    return lv_label;
}

trigger auto_lib1926661B_gf_PP_BB_HPBarChange_Trigger = null;

void lib1926661B_gf_PP_BB_HPBarChange () {
    if (auto_lib1926661B_gf_PP_BB_HPBarChange_Trigger == null) {
        auto_lib1926661B_gf_PP_BB_HPBarChange_Trigger = TriggerCreate("auto_lib1926661B_gf_PP_BB_HPBarChange_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_PP_BB_HPBarChange_Trigger, false, false);
}

bool auto_lib1926661B_gf_PP_BB_HPBarChange_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newWidth;
    int lv_width;
    int lv_damageBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Implementation
    lv_newWidth = lib1926661B_gf_PP_BB_HPBarCurrentWidth();
    lv_width = (lib1926661B_gv_pP_BB_HPOldWidth - lv_newWidth);
    lib1926661B_gv_pP_BB_HPOldWidth = lv_newWidth;
    if ((lv_width > 0)) {
        DialogControlCreateInPanelFromTemplate(lib1926661B_gv_pP_BB_Panel, c_triggerControlTypeImage, "HotS_GameUnitFrame/BossHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, lib1926661B_gv_pP_BB_HpBackground, c_anchorRight, 0, 0);
        lv_damageBar = DialogControlLastCreated();
        DialogControlSetSize(lv_damageBar, PlayerGroupAll(), (lib1926661B_gv_pP_BB_HPOldWidth + lv_width), 22);
        libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 511, PlayerGroupAll());
        DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
        Wait(1.0, c_timeReal);
        DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
        Wait(1.1, c_timeReal);
        DialogControlDestroy(lv_damageBar);
    }

    return true;
}

void lib1926661B_gf_DisplaySingularBossBarSwarmCampaign (string lp_portrait, text lp_title, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_pP_BB_Portraits = lp_portrait;
    lib1926661B_gv_pP_BB_Title = lp_title;
    lib1926661B_gv_pP_BB_Boss = null;
    lib1926661B_gf_SetSingularBossBarMaximumValueSwarmCampaign(lp_max, true);
    lib1926661B_gf_SetSingularBossBarCurrentValueSwarmCampaign(lp_max, true);
    lib1926661B_gv_pP_BB_HPOldWidth = -1;
    TriggerEnable(lib1926661B_gt_PP_BB_MouseHoverText, true);
    if ((lib1926661B_gv_pP_BB_Panel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/BossUnitFrame");
        lib1926661B_gv_pP_BB_Panel = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_pP_BB_Panel, c_triggerControlTypeImage, "IconImage");
        lib1926661B_gv_pP_BB_PortraitImage = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_pP_BB_Panel, c_triggerControlTypeLabel, "NameLabel");
        lib1926661B_gv_pP_BB_TitleLabel = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_pP_BB_Panel, c_triggerControlTypeImage, "HealthBarImage");
        lib1926661B_gv_pP_BB_HpCurrentImage = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_pP_BB_Panel, c_triggerControlTypeLabel, "HealthLabel");
        lib1926661B_gv_pP_BB_HpLabel = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_pP_BB_Panel, c_triggerControlTypeImage, "BarBackground");
        lib1926661B_gv_pP_BB_HpBackground = DialogControlLastCreated();
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 510, PlayerGroupAll());
        DialogControlHookup(lib1926661B_gv_pP_BB_Panel, c_triggerControlTypeImage, "BorderImage");
        lib1926661B_gv_pP_BB_BorderImage = DialogControlLastCreated();
        libNtve_gf_SetDialogItemAcceptMouse(lib1926661B_gv_pP_BB_BorderImage, true, PlayerGroupAll());
    }

    DialogControlSetVisible(lib1926661B_gv_pP_BB_Panel, PlayerGroupAll(), true);
    lib1926661B_gf_RefreshSingularBossBarSwarmCampaign();
}

void lib1926661B_gf_SetSingularBossBarMaximumValueSwarmCampaign (int lp_max, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_pP_BB_MaxValue = IntToFixed(lp_max);
    if ((lib1926661B_gv_pP_BB_MaxValue <= 0.0)) {
        lib1926661B_gv_pP_BB_MaxValue = 1.0;
    }

    lib1926661B_gv_pP_BB_Boss = null;
    if ((lp_refresh == true)) {
        lib1926661B_gf_RefreshSingularBossBarSwarmCampaign();
    }

}

void lib1926661B_gf_SetSingularBossBarCurrentValueSwarmCampaign (int lp_current, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_pP_BB_CurrentValue = IntToFixed(lp_current);
    if ((lib1926661B_gv_pP_BB_CurrentValue < 0.0)) {
        lib1926661B_gv_pP_BB_CurrentValue = 0.0;
    }

    lib1926661B_gv_pP_BB_Boss = null;
    if ((lp_refresh == true)) {
        lib1926661B_gf_RefreshSingularBossBarSwarmCampaign();
    }

}

void lib1926661B_gf_SetSingularBossBarBossSwarmCampaign (unit lp_boss, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boss != null)) {
        TriggerEnable(lib1926661B_gt_KC_BB_BossHPChanged, true);
        TriggerEnable(lib1926661B_gt_PP_BB_MouseHoverText, true);
    }

    lib1926661B_gv_pP_BB_Boss = lp_boss;
    lib1926661B_gv_pP_BB_MaxValue = 0.0;
    lib1926661B_gv_pP_BB_CurrentValue = 0.0;
    if ((lp_refresh == true)) {
        lib1926661B_gf_RefreshSingularBossBarSwarmCampaign();
    }

}

void lib1926661B_gf_ShowHideSingularBossBarSwarmCampaign (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_pP_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(lib1926661B_gv_pP_BB_Panel, PlayerGroupAll(), lp_showHide);
}

void lib1926661B_gf_RefreshSingularBossBarSwarmCampaign () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_pP_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    libNtve_gf_SetDialogItemImage(lib1926661B_gv_pP_BB_PortraitImage, lib1926661B_gv_pP_BB_Portraits, PlayerGroupSingle(1));
    libNtve_gf_SetDialogItemText(lib1926661B_gv_pP_BB_TitleLabel, lib1926661B_gv_pP_BB_Title, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib1926661B_gv_pP_BB_HpLabel, lib1926661B_gf_PP_BB_HPBarFormatLabel(), PlayerGroupAll());
    DialogControlSetSize(lib1926661B_gv_pP_BB_HpCurrentImage, PlayerGroupSingle(1), lib1926661B_gf_PP_BB_HPBarCurrentWidth(), 22);
    lib1926661B_gf_PP_BB_HPBarChange();
}

void lib1926661B_gf_SetSingularBossBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(lib1926661B_gv_pP_BB_HpCurrentImage, lp_color, PlayerGroupAll());
}

void lib1926661B_gf_SetSingularBossBarTitleColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(lib1926661B_gv_pP_BB_TitleLabel, lp_color, PlayerGroupAll());
}

void lib1926661B_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit) {
    // Variable Declarations
    string lv_icon;

    // Automatic Variable Declarations
    int auto408967ED_val;

    // Variable Initialization
    lv_icon = "";

    // Implementation
    lib1926661B_gv_kC_HeroPanel[lp_index].lv_unit = lp_heroUnit;
    lv_icon = CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lp_heroUnit), "HeroIcon", c_playerAny);
    lib1926661B_gv_kC_HeroPanel[lp_index].lv_icon = (lv_icon);
    lib1926661B_gf_KC_UpdateHeroPanel(lp_index);
    libNtve_gf_SetDialogItemUnit(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, lp_heroUnit, PlayerGroupAll());
    if ((lib1926661B_gv_kC_HeroPanel[lp_index].lv_unit == null)) {
        if ((lib1926661B_gv_kC_HeroPanel[1].lv_unit == null) && (lib1926661B_gv_kC_HeroPanel[2].lv_unit == null) && (lib1926661B_gv_kC_HeroPanel[3].lv_unit == null)) {
            TriggerEnable(lib1926661B_gt_KC_HeroPanelUpdate, false);
            TriggerEnable(lib1926661B_gt_KC_HeroUIUnitDamaged, false);
            TriggerEnable(lib1926661B_gt_KC_HeroUnitDead, false);
        }

    }
    else {
        TriggerEnable(lib1926661B_gt_KC_HeroUnitDead, true);
        TriggerEnable(lib1926661B_gt_KC_HeroPanelUpdate, true);
        TriggerEnable(lib1926661B_gt_KC_HeroUIUnitDamaged, true);
        auto408967ED_val = lp_index;
        if (auto408967ED_val == 1) {
            libNtve_gf_SetDialogItemHotkey(lib1926661B_gv_kC_HeroPanel[1].lv_button, c_hotkeyHeroSelect0, PlayerGroupAll());
        }
        else if (auto408967ED_val == 2) {
            libNtve_gf_SetDialogItemHotkey(lib1926661B_gv_kC_HeroPanel[2].lv_button, c_hotkeyHeroSelect1, PlayerGroupAll());
        }
        else if (auto408967ED_val == 3) {
            libNtve_gf_SetDialogItemHotkey(lib1926661B_gv_kC_HeroPanel[3].lv_button, c_hotkeyHeroSelect2, PlayerGroupAll());
        }
        else {
        }
    }
}

void lib1926661B_gf_ShowHideHeroPanel (int lp_slot, bool lp_showHide) {
    // Automatic Variable Declarations
    bool autoF0A19727_val;

    // Implementation
    if ((lib1926661B_gv_kC_HeroPanel[lp_slot].lv_panel != c_invalidDialogControlId)) {
        autoF0A19727_val = lp_showHide;
        if (autoF0A19727_val == false) {
            lib1926661B_gv_kC_HeroPanelHidden[lp_slot] = true;
        }
        else if (autoF0A19727_val == true) {
            lib1926661B_gv_kC_HeroPanelHidden[lp_slot] = false;
        }
        else {
        }
        DialogControlSetVisible(lib1926661B_gv_kC_HeroPanel[lp_slot].lv_panel, PlayerGroupAll(), lp_showHide);
    }
    else {
        return ;
    }
}

void lib1926661B_gf_KC_ShowHideAllHeroPanels (bool lp_showHide) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoB1A14525_ae = 3;
    const int autoB1A14525_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoB1A14525_ai >= 0 && lv_index <= autoB1A14525_ae) || (autoB1A14525_ai < 0 && lv_index >= autoB1A14525_ae) ) ; lv_index += autoB1A14525_ai ) {
        if ((lib1926661B_gv_kC_HeroPanel[lv_index].lv_panel != c_invalidDialogControlId)) {
            DialogControlSetVisible(lib1926661B_gv_kC_HeroPanel[lv_index].lv_panel, PlayerGroupAll(), lp_showHide);
        }

    }
}

void lib1926661B_gf_KC_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int auto7C77441F_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypeUnitStatus, "UIContainer/ConsoleUIContainer/HeroUnitFramePrimary");
    }
    else {
        if ((lp_index == 2)) {
            DialogControlHookupStandard(c_triggerControlTypeUnitStatus, "UIContainer/ConsoleUIContainer/HeroUnitFrameSecondary");
        }
        else {
            DialogControlHookupStandard(c_triggerControlTypeUnitStatus, "UIContainer/ConsoleUIContainer/HeroUnitFrameTertiary");
        }
    }
    lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CooldownImage"));
    lib1926661B_gv_kC_HeroPanel[lp_index].lv_cooldownImage = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("DamageTakenImage"));
    lib1926661B_gv_kC_HeroPanel[lp_index].lv_damageTakenImage = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("IconImage"));
    lib1926661B_gv_kC_HeroPanel[lp_index].lv_iconImage = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DamageTakenLabel"));
    lib1926661B_gv_kC_HeroPanel[lp_index].lv_damageTakenLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_HeroPanel[lp_index].lv_damageTakenLabel, StringToText(""), PlayerGroupAll());
    DialogControlHookup(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("NameLabel"));
    lib1926661B_gv_kC_HeroPanel[lp_index].lv_nameLabel = DialogControlLastCreated();
    auto7C77441F_val = lp_index;
    if (auto7C77441F_val == 1) {
        DialogControlHookup(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, c_triggerControlTypeUnitTarget, libNtve_gf_ConvertStringToUILayoutFrameName("UnitTargetFrame"));
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (auto7C77441F_val == 2) {
        DialogControlHookup(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, c_triggerControlTypeUnitTarget, libNtve_gf_ConvertStringToUILayoutFrameName("UnitTargetFrame"));
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else if (auto7C77441F_val == 3) {
        DialogControlHookup(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, c_triggerControlTypeUnitTarget, libNtve_gf_ConvertStringToUILayoutFrameName("UnitTargetFrame"));
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect2, PlayerGroupAll());
    }
    else {
    }
    lib1926661B_gv_kC_HeroPanel[lp_index].lv_button = DialogControlLastCreated();
    DialogControlSetVisible(lib1926661B_gv_kC_HeroPanel[lp_index].lv_damageTakenImage, PlayerGroupAll(), false);
    DialogControlSetVisible(lib1926661B_gv_kC_HeroPanel[lp_index].lv_cooldownImage, PlayerGroupAll(), false);
}

void lib1926661B_gf_KC_UpdateHeroPanel (int lp_index) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_life2;
    int lv_energy;
    int lv_lifeBarHeight;

    // Automatic Variable Declarations
    int autoD31592C2_val;

    // Variable Initialization

    // Implementation
    if ((lib1926661B_gv_kC_HeroPanel[lp_index].lv_unit == null)) {
        if ((lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel != c_invalidDialogControlId)) {
            DialogControlSetVisible(lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel, PlayerGroupAll(), false);
        }

        return ;
    }

    if ((lib1926661B_gv_kC_HeroPanel[lp_index].lv_panel == c_invalidDialogControlId)) {
        lib1926661B_gf_KC_CreateHeroPanel(lp_index);
    }

    autoD31592C2_val = lp_index;
    if (autoD31592C2_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_1926661B_2E28A610");
    }
    else if (autoD31592C2_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_1926661B_980657DB");
    }
    else if (autoD31592C2_val == 3) {
        lv_hotkey = StringExternal("Param/Value/lib_1926661B_B34652E3");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_1926661B_90DF92F1", "A", UnitTypeGetName(UnitGetType(lib1926661B_gv_kC_HeroPanel[lp_index].lv_unit)));
    TextExpressionSetToken("Param/Expression/lib_1926661B_90DF92F1", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_HeroPanel[lp_index].lv_nameLabel, TextExpressionAssemble("Param/Expression/lib_1926661B_90DF92F1"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lib1926661B_gv_kC_HeroPanel[lp_index].lv_iconImage, lib1926661B_gv_kC_HeroPanel[lp_index].lv_icon, PlayerGroupAll());
    if ((lib1926661B_gv_kC_HeroPanel[lp_index].lv_damageTimer == 0.0)) {
        lib1926661B_gv_kC_HeroPanel[lp_index].lv_damageTimer -= lib1926661B_gv_kC_HeroUIUpdateFrequency;
        if ((lib1926661B_gv_kC_HeroPanel[lp_index].lv_damageTimer == 0.0)) {
            DialogControlSetVisible(lib1926661B_gv_kC_HeroPanel[lp_index].lv_damageTakenLabel, PlayerGroupAll(), false);
        }

    }

    if ((UnitIsAlive(lib1926661B_gv_kC_HeroPanel[lp_index].lv_unit) == true)) {
        libNtve_gf_SetDialogItemUnit(lib1926661B_gv_kC_HeroPanel[lp_index].lv_button, lib1926661B_gv_kC_HeroPanel[lp_index].lv_unit, PlayerGroupAll());
    }

}

void lib1926661B_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;

    // Automatic Variable Declarations
    bool auto767876CD_val;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    auto767876CD_val = lp_objectiveType;
    if (auto767876CD_val == true) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 1.0;
        lv_model = "PingObjective";
    }
    else if (auto767876CD_val == false) {
        lv_color = Color(100.00, 100.00, 0.00);
        lv_scale = 0.8;
        lv_model = "PingBonus";
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_model, lp_position, lv_color, 0.0, 270.0);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(lib1926661B_gt_KopruluCampaignPingSound, true, false);
}

trigger auto_lib1926661B_gf_PingMinimapCampaign_Trigger = null;
playergroup auto_lib1926661B_gf_PingMinimapCampaign_lp_players;
point auto_lib1926661B_gf_PingMinimapCampaign_lp_pos;
fixed auto_lib1926661B_gf_PingMinimapCampaign_lp_dur;
color auto_lib1926661B_gf_PingMinimapCampaign_lp_color;

void lib1926661B_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color) {
    auto_lib1926661B_gf_PingMinimapCampaign_lp_players = lp_players;
    auto_lib1926661B_gf_PingMinimapCampaign_lp_pos = lp_pos;
    auto_lib1926661B_gf_PingMinimapCampaign_lp_dur = lp_dur;
    auto_lib1926661B_gf_PingMinimapCampaign_lp_color = lp_color;

    if (auto_lib1926661B_gf_PingMinimapCampaign_Trigger == null) {
        auto_lib1926661B_gf_PingMinimapCampaign_Trigger = TriggerCreate("auto_lib1926661B_gf_PingMinimapCampaign_TriggerFunc");
    }

    TriggerExecute(auto_lib1926661B_gf_PingMinimapCampaign_Trigger, false, false);
}

bool auto_lib1926661B_gf_PingMinimapCampaign_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_lib1926661B_gf_PingMinimapCampaign_lp_players;
    point lp_pos = auto_lib1926661B_gf_PingMinimapCampaign_lp_pos;
    fixed lp_dur = auto_lib1926661B_gf_PingMinimapCampaign_lp_dur;
    color lp_color = auto_lib1926661B_gf_PingMinimapCampaign_lp_color;

    // Automatic Variable Declarations
    playergroup auto5D3E40F6_g;
    int auto5D3E40F6_var;
    string auto2B44BE14_val;

    // Implementation
    auto5D3E40F6_g = lp_players;
    auto5D3E40F6_var = -1;
    while (true) {
        auto5D3E40F6_var = PlayerGroupNextPlayer(auto5D3E40F6_g, auto5D3E40F6_var);
        if (auto5D3E40F6_var < 0) { break; }
        auto2B44BE14_val = PlayerRace(auto5D3E40F6_var);
        if (auto2B44BE14_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (auto2B44BE14_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (auto2B44BE14_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), lp_players, 100.0, 0.0);
        }
        else {
        }
    }
    libNtve_gf_CreatePingFacingAngle(lp_players, "PingAlert", lp_pos, lp_color, lp_dur, 270.0);
    Wait(lp_dur, c_timeGame);
    PingDestroy(PingLastCreated());
    return true;
}

void lib1926661B_gf_KC_HookupCastingPanel (unit lp_caster) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("NukePanel"));
    lib1926661B_gv_kC_NukePanel.lv_nukePanel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeCommandPanel, libNtve_gf_ConvertStringToUILayoutFrameName("NukeCommandPanel"));
    lib1926661B_gv_kC_NukePanel.lv_commandPanel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(lp_caster), PlayerGroupAll());
    lib1926661B_gv_kC_NukePanel.lv_panelActive = true;
    TriggerEnable(lib1926661B_gt_KC_NukeHideCinematic, true);
}

void lib1926661B_gf_ShowHideNukeCastingPanel (bool lp_showHide) {
    // Automatic Variable Declarations
    bool auto7C8A997E_val;

    // Implementation
    if ((lp_showHide == true) && (lib1926661B_gv_kC_NukePanel.lv_nukePanel == c_invalidDialogControlId)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LotC_NukeCaster", c_unitCreateIgnorePlacement, 1, Point(3.0, 3.0));
        lib1926661B_gv_kC_NukePanel.lv_casterUnit = UnitLastCreated();
        lib1926661B_gf_KC_HookupCastingPanel(lib1926661B_gv_kC_NukePanel.lv_casterUnit);
    }

    auto7C8A997E_val = lp_showHide;
    if (auto7C8A997E_val == true) {
        DialogControlSetVisible(lib1926661B_gv_kC_NukePanel.lv_nukePanel, PlayerGroupAll(), true);
    }
    else if (auto7C8A997E_val == false) {
        DialogControlSetVisible(lib1926661B_gv_kC_NukePanel.lv_nukePanel, PlayerGroupAll(), false);
    }
    else {
    }
}

void lib1926661B_gf_KC_CreateForcePanel () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoFCAF5B7C_ae = 4;
    const int autoFCAF5B7C_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1926661B_gv_kC_ForcePanel.lv_panel != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("ForceCard"));
    lib1926661B_gv_kC_ForcePanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ForcePanel.lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("TitleLabel"));
    lib1926661B_gv_kC_ForcePanel.lv_titleLabel = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (autoFCAF5B7C_ai >= 0 && lv_index <= autoFCAF5B7C_ae) || (autoFCAF5B7C_ai < 0 && lv_index >= autoFCAF5B7C_ae) ) ; lv_index += autoFCAF5B7C_ai ) {
        DialogControlHookup(lib1926661B_gv_kC_ForcePanel.lv_panel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("ForceButton" + IntToString(lv_index))));
        lib1926661B_gv_kC_ForcePanel.lv_button[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CooldownImage"));
        lib1926661B_gv_kC_ForcePanel.lv_buttonCooldown[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemAnimationDuration(lib1926661B_gv_kC_ForcePanel.lv_buttonCooldown[lv_index], 60.0, PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[1], StringExternal("Param/Value/lib_1926661B_05D81D22"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[2], StringExternal("Param/Value/lib_1926661B_12910BFE"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[3], StringExternal("Param/Value/lib_1926661B_49A335AD"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[4], StringExternal("Param/Value/lib_1926661B_B4D1363F"), PlayerGroupAll());
}

int lib1926661B_gf_KC_ReturnUnitSupplyCost (int lp_amount, string lp_unitType) {
    // Variable Declarations
    int lv_index;
    int lv_cost;

    // Automatic Variable Declarations
    int autoFEDF0D5E_ae;
    const int autoFEDF0D5E_ai = 1;

    // Variable Initialization

    // Implementation
    autoFEDF0D5E_ae = lp_amount;
    lv_index = 1;
    for ( ; ( (autoFEDF0D5E_ai >= 0 && lv_index <= autoFEDF0D5E_ae) || (autoFEDF0D5E_ai < 0 && lv_index >= autoFEDF0D5E_ae) ) ; lv_index += autoFEDF0D5E_ai ) {
        lv_cost += CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "Food", c_playerAny);
    }
    return lv_cost;
}

int lib1926661B_gf_KC_SuppliesAvailable (int lp_player) {
    // Variable Declarations
    int lv_suppliesRemaining;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_suppliesRemaining = (PlayerGetPropertyInt(lp_player, c_playerPropSuppliesUsed) - PlayerGetPropertyInt(lp_player, c_playerPropSuppliesMade));
    return lv_suppliesRemaining;
}

void lib1926661B_gf_ShowHideForcePanel (int lp_playerOwner, bool lp_showHide, region lp_spawnRegion, point lp_landPoint) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    bool autoB6CE5479_val;
    const int auto3F15CDB5_ae = 4;
    const int auto3F15CDB5_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1926661B_gv_kC_ForcePanel.lv_panel == c_invalidDialogControlId)) {
        lib1926661B_gf_KC_CreateForcePanel();
    }

    autoB6CE5479_val = lp_showHide;
    if (autoB6CE5479_val == true) {
        lv_index = 1;
        for ( ; ( (auto3F15CDB5_ai >= 0 && lv_index <= auto3F15CDB5_ae) || (auto3F15CDB5_ai < 0 && lv_index >= auto3F15CDB5_ae) ) ; lv_index += auto3F15CDB5_ai ) {
            DialogControlSetVisible(lib1926661B_gv_kC_ForcePanel.lv_buttonCooldown[lv_index], PlayerGroupAll(), false);
            DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), true);
        }
        lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown = false;
        lib1926661B_gv_kC_ForcePanel.lv_forceCondor = null;
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ForcePanel.lv_titleLabel, lib1926661B_gv_kC_ForceNameReady, PlayerGroupAll());
        lib1926661B_gv_kC_ForcePlayerOwner = lp_playerOwner;
        lib1926661B_gv_kC_ForceSpawnRegion = lp_spawnRegion;
        lib1926661B_gv_kC_ForceLandPoint = lp_landPoint;
        DialogControlSetVisible(lib1926661B_gv_kC_ForcePanel.lv_panel, PlayerGroupAll(), true);
        TriggerEnable(lib1926661B_gt_KC_ForceTimersUpdate, true);
    }
    else if (autoB6CE5479_val == false) {
        DialogControlSetVisible(lib1926661B_gv_kC_ForcePanel.lv_panel, PlayerGroupAll(), false);
        TriggerEnable(lib1926661B_gt_KC_ForceTimersUpdate, false);
    }
    else {
    }
}

void lib1926661B_gf_FlashForcePanel () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSendAnimationEvent(lib1926661B_gv_kC_ForcePanel.lv_panel, PlayerGroupAll(), "Suggest");
}

void lib1926661B_gf_KC_CreateForceCondor (int lp_type) {
    // Variable Declarations
    point lv_airUnitSpawn;
    int lv_index;

    // Automatic Variable Declarations
    unitgroup autoC2A13E82_g;
    int autoC2A13E82_u;
    unit autoC2A13E82_var;
    unitgroup auto739AFB21_g;
    int auto739AFB21_u;
    unit auto739AFB21_var;
    const int auto40262DB0_ae = 4;
    const int auto40262DB0_ai = 1;
    unitgroup autoF370BC14_g;
    int autoF370BC14_u;
    unit autoF370BC14_var;

    // Variable Initialization

    // Implementation
    if ((lp_type == lib1926661B_ge_ForceType_Air)) {
        lv_airUnitSpawn = RegionRandomPoint(lib1926661B_gv_kC_ForceSpawnRegion);
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Osprey", 0, lib1926661B_gv_kC_ForcePlayerOwner, lv_airUnitSpawn);
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaptorJet", 0, lib1926661B_gv_kC_ForcePlayerOwner, lv_airUnitSpawn);
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        autoC2A13E82_g = lib1926661B_gv_kC_ForcePanel.lv_forceGroup;
        autoC2A13E82_u = UnitGroupCount(autoC2A13E82_g, c_unitCountAll);
        for (;; autoC2A13E82_u -= 1) {
            autoC2A13E82_var = UnitGroupUnitFromEnd(autoC2A13E82_g, autoC2A13E82_u);
            if (autoC2A13E82_var == null) { break; }
            UnitSetHeight(autoC2A13E82_var, lib1926661B_gv_kC_ForceCondorHeight, 0.0);
        }
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Condor", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionRandomPoint(lib1926661B_gv_kC_ForceSpawnRegion));
        lib1926661B_gv_kC_ForcePanel.lv_forceCondor = UnitLastCreated();
        UnitSetHeight(lib1926661B_gv_kC_ForcePanel.lv_forceCondor, lib1926661B_gv_kC_ForceCondorHeight, 0.0);
    }
    lib1926661B_gv_kC_ForcePanel.lv_type = lp_type;
    if ((lp_type == lib1926661B_ge_ForceType_Air)) {
        auto739AFB21_g = lib1926661B_gv_kC_ForcePanel.lv_forceGroup;
        auto739AFB21_u = UnitGroupCount(auto739AFB21_g, c_unitCountAll);
        for (;; auto739AFB21_u -= 1) {
            auto739AFB21_var = UnitGroupUnitFromEnd(auto739AFB21_g, auto739AFB21_u);
            if (auto739AFB21_var == null) { break; }
            libNtve_gf_ShowHideUnit(auto739AFB21_var, false);
            libNtve_gf_PauseUnit(auto739AFB21_var, true);
        }
    }

    UnitGroupRemove(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, lib1926661B_gv_kC_ForcePanel.lv_forceCondor);
    libNtve_gf_ShowHideUnit(lib1926661B_gv_kC_ForcePanel.lv_forceCondor, false);
    libNtve_gf_PauseUnit(lib1926661B_gv_kC_ForcePanel.lv_forceCondor, true);
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ForcePanel.lv_titleLabel, lib1926661B_gv_kC_ForceNameDeploying, PlayerGroupAll());
    TimerStart(lib1926661B_gv_kC_ForcePanel.lv_forceTimer, lib1926661B_gv_kC_ForceTimerTime, false, c_timeReal);
    lv_index = 1;
    for ( ; ( (auto40262DB0_ai >= 0 && lv_index <= auto40262DB0_ae) || (auto40262DB0_ai < 0 && lv_index >= auto40262DB0_ae) ) ; lv_index += auto40262DB0_ai ) {
        DialogControlSetVisible(lib1926661B_gv_kC_ForcePanel.lv_buttonCooldown[lv_index], PlayerGroupAll(), true);
        DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), false);
    }
    lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown = true;
    while (!((TimerGetRemaining(lib1926661B_gv_kC_ForcePanel.lv_forceTimer) <= 50.0))) {
        Wait(0.5, c_timeReal);
    }
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ForcePanel.lv_titleLabel, lib1926661B_gv_kC_ForceNameCD, PlayerGroupAll());
    if ((lp_type == lib1926661B_ge_ForceType_Air)) {
        autoF370BC14_g = lib1926661B_gv_kC_ForcePanel.lv_forceGroup;
        autoF370BC14_u = UnitGroupCount(autoF370BC14_g, c_unitCountAll);
        for (;; autoF370BC14_u -= 1) {
            autoF370BC14_var = UnitGroupUnitFromEnd(autoF370BC14_g, autoF370BC14_u);
            if (autoF370BC14_var == null) { break; }
            libNtve_gf_ShowHideUnit(autoF370BC14_var, true);
            libNtve_gf_PauseUnit(autoF370BC14_var, false);
            UnitIssueOrder(autoF370BC14_var, OrderTargetingPoint(AbilityCommand("move", 0), lib1926661B_gv_kC_ForceLandPoint), c_orderQueueReplace);
            UnitSetHeight(autoF370BC14_var, lib1926661B_gv_kC_ForceCondorHeightBase, 18.0);
        }
    }

    libNtve_gf_ShowHideUnit(lib1926661B_gv_kC_ForcePanel.lv_forceCondor, true);
    libNtve_gf_PauseUnit(lib1926661B_gv_kC_ForcePanel.lv_forceCondor, false);
    UnitIssueOrder(lib1926661B_gv_kC_ForcePanel.lv_forceCondor, OrderTargetingPoint(AbilityCommand("move", 0), lib1926661B_gv_kC_ForceLandPoint), c_orderQueueReplace);
    UnitSetHeight(lib1926661B_gv_kC_ForcePanel.lv_forceCondor, 0.0, 18.0);
}

void lib1926661B_gf_KC_CreateForceUnits (int lp_type) {
    // Variable Declarations
    int lv_activeInfantryOfficers;

    // Automatic Variable Declarations
    int autoCDC18384_val;
    unitgroup auto977FC55F_g;
    int auto977FC55F_u;
    unit auto977FC55F_var;
    unitgroup autoFEE9CC4E_g;
    int autoFEE9CC4E_u;
    unit autoFEE9CC4E_var;

    // Variable Initialization

    // Implementation
    autoCDC18384_val = lib1926661B_gv_kC_ForcePanel.lv_type;
    if (autoCDC18384_val == lib1926661B_ge_ForceType_Infantry) {
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "InfantryRocket", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "InfantryMortar", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "InfantryHeavy", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "InfantryRifle", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        auto977FC55F_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto977FC55F_u = UnitGroupCount(auto977FC55F_g, c_unitCountAll);
        for (;; auto977FC55F_u -= 1) {
            auto977FC55F_var = UnitGroupUnitFromEnd(auto977FC55F_g, auto977FC55F_u);
            if (auto977FC55F_var == null) { break; }
            if ((UnitGetType(auto977FC55F_var) == "InfantryOfficer")) {
                lv_activeInfantryOfficers += 1;
            }
        }
        if ((lv_activeInfantryOfficers < 3)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryOfficer", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
            UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        }
    }
    else if (autoCDC18384_val == lib1926661B_ge_ForceType_AA) {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "A6", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "InfantryRifle", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Z1", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
    }
    else if (autoCDC18384_val == lib1926661B_ge_ForceType_Tank) {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "TR17", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoutheTank", 0, lib1926661B_gv_kC_ForcePlayerOwner, RegionGetCenter(RegionEntireMap()));
        UnitGroupAddUnitGroup(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, UnitLastCreatedGroup());
    }
    else {
    }
    autoFEE9CC4E_g = lib1926661B_gv_kC_ForcePanel.lv_forceGroup;
    autoFEE9CC4E_u = UnitGroupCount(autoFEE9CC4E_g, c_unitCountAll);
    for (;; autoFEE9CC4E_u -= 1) {
        autoFEE9CC4E_var = UnitGroupUnitFromEnd(autoFEE9CC4E_g, autoFEE9CC4E_u);
        if (autoFEE9CC4E_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFEE9CC4E_var, false);
        libNtve_gf_PauseUnit(autoFEE9CC4E_var, true);
    }
}

void lib1926661B_gf_KC_UnloadForceUnits (point lp_point) {
    // Automatic Variable Declarations
    unitgroup auto1E283258_g;
    int auto1E283258_u;
    unit auto1E283258_var;

    // Implementation
    auto1E283258_g = lib1926661B_gv_kC_ForcePanel.lv_forceGroup;
    auto1E283258_u = UnitGroupCount(auto1E283258_g, c_unitCountAll);
    for (;; auto1E283258_u -= 1) {
        auto1E283258_var = UnitGroupUnitFromEnd(auto1E283258_g, auto1E283258_u);
        if (auto1E283258_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto1E283258_var, true);
        libNtve_gf_PauseUnit(auto1E283258_var, false);
        UnitSetPosition(auto1E283258_var, lp_point, false);
        if (((UnitGetType(auto1E283258_var) == "InfantryOfficer") || (UnitGetType(auto1E283258_var) == "InfantryRifle") || (UnitGetType(auto1E283258_var) == "InfantryHeavy") || (UnitGetType(auto1E283258_var) == "InfantryMortar") || (UnitGetType(auto1E283258_var) == "InfantryRocket"))) {
            SoundPlayAtPointForPlayer(SoundLink("Condor_UnloadInfantry", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lib1926661B_gv_kC_ForcePanel.lv_forceCondor), 0.0, 100.0, 0.0);
        }
        else if (((UnitGetType(auto1E283258_var) == "A6") || (UnitGetType(auto1E283258_var) == "TR17"))) {
            SoundPlayAtPointForPlayer(SoundLink("Condor_UnloadVehicle_Cinematic", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lib1926661B_gv_kC_ForcePanel.lv_forceCondor), 0.0, 100.0, 0.0);
        }
        else if (((UnitGetType(auto1E283258_var) == "Z1") || (UnitGetType(auto1E283258_var) == "TR17"))) {
            SoundPlayAtPointForPlayer(SoundLink("Condor_UnloadVehicle_Cinematic", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lib1926661B_gv_kC_ForcePanel.lv_forceCondor), 0.0, 100.0, 0.0);
        }
        Wait(0.125, c_timeReal);
        libNtve_gf_RescueUnit(auto1E283258_var, 1, true);
        UnitGroupRemove(lib1926661B_gv_kC_ForcePanel.lv_forceGroup, auto1E283258_var);
    }
}

void lib1926661B_gf_KC_CreatePhasePanel () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("PhasePanel"));
    lib1926661B_gv_kC_PhasePanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("PhaseLabel"));
    lib1926661B_gv_kC_PhasePanel.lv_phaseNumber = DialogControlLastCreated();
}

void lib1926661B_gf_SetPhasePanelPhase (int lp_phase) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto97E5ADBA_val;

    // Variable Initialization

    // Implementation
    if ((lib1926661B_gv_kC_PhasePanel.lv_panel == c_invalidDialogControlId)) {
        lib1926661B_gf_KC_CreatePhasePanel();
    }

    auto97E5ADBA_val = lp_phase;
    if (auto97E5ADBA_val == 0) {
        lv_text = StringExternal("Param/Value/lib_1926661B_8F3F149A");
    }
    else if (auto97E5ADBA_val == 1) {
        lv_text = StringExternal("Param/Value/lib_1926661B_460FAE45");
    }
    else if (auto97E5ADBA_val == 2) {
        lv_text = StringExternal("Param/Value/lib_1926661B_7A1ADD41");
    }
    else if (auto97E5ADBA_val == 3) {
        lv_text = StringExternal("Param/Value/lib_1926661B_37C2695C");
    }
    else if (auto97E5ADBA_val == 4) {
        lv_text = StringExternal("Param/Value/lib_1926661B_34982E45");
    }
    else if (auto97E5ADBA_val == 5) {
        lv_text = StringExternal("Param/Value/lib_1926661B_090FAC94");
    }
    else {
        lv_text = StringExternal("Param/Value/lib_1926661B_8A04B6F1");
    }
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_PhasePanel.lv_phaseNumber, lv_text, PlayerGroupAll());
}

void lib1926661B_gf_ShowHidePhasePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    bool auto6D212456_val;

    // Implementation
    if ((lib1926661B_gv_kC_PhasePanel.lv_panel == c_invalidDialogControlId)) {
        lib1926661B_gf_KC_CreatePhasePanel();
    }

    auto6D212456_val = lp_showHide;
    if (auto6D212456_val == true) {
        DialogControlSendAnimationEvent(lib1926661B_gv_kC_PhasePanel.lv_panel, PlayerGroupAll(), "Birth");
    }
    else if (auto6D212456_val == false) {
        DialogControlSendAnimationEvent(lib1926661B_gv_kC_PhasePanel.lv_panel, PlayerGroupAll(), "Death");
    }
    else {
    }
}

void lib1926661B_gf_KC_CreatePConfirm () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("PhaseConfirmPanel"));
    lib1926661B_gv_kC_PConfirm.lv_panel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_PConfirm.lv_panel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ConfirmationButton"));
    lib1926661B_gv_kC_PConfirm.lv_cofirmButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_PConfirm.lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("WarningLabel"));
    lib1926661B_gv_kC_PConfirm.lv_warningLabel = DialogControlLastCreated();
}

void lib1926661B_gf_ShowHidePhaseConfirmationPanel (bool lp_showHide) {
    // Automatic Variable Declarations
    bool auto18D79620_val;

    // Implementation
    if ((lib1926661B_gv_kC_PConfirm.lv_panel == c_invalidDialogControlId)) {
        lib1926661B_gf_KC_CreatePConfirm();
    }

    auto18D79620_val = lp_showHide;
    if (auto18D79620_val == true) {
        TriggerEnable(lib1926661B_gt_KC_ConfirmPanel_Btn, true);
        DialogControlSendAnimationEvent(lib1926661B_gv_kC_PConfirm.lv_panel, PlayerGroupAll(), "Birth");
        Wait(0.5, c_timeGame);
        DialogControlSetVisible(lib1926661B_gv_kC_PConfirm.lv_panel, PlayerGroupAll(), true);
    }
    else if (auto18D79620_val == false) {
        TriggerEnable(lib1926661B_gt_KC_ConfirmPanel_Btn, false);
        DialogControlSendAnimationEvent(lib1926661B_gv_kC_PConfirm.lv_panel, PlayerGroupAll(), "Death");
        Wait(0.5, c_timeGame);
        DialogControlSetVisible(lib1926661B_gv_kC_PConfirm.lv_panel, PlayerGroupAll(), false);
    }
    else {
    }
}

void lib1926661B_gf_SetPhaseConfirmationPanelText (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kC_PConfirm.lv_panel == c_invalidDialogControlId)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_PConfirm.lv_warningLabel, lp_text, PlayerGroupAll());
}

void lib1926661B_gf_EnableDisableConfirmationPanel (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kC_PConfirm.lv_panel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetEnabled(lib1926661B_gv_kC_PConfirm.lv_cofirmButton, PlayerGroupAll(), lp_enableDisable);
}

void lib1926661B_gf_KC_CreateUnitChoicePanel () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("UnitChoicePanel"));
    lib1926661B_gv_kC_UnitChoicePanel.lv_panel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_UnitChoicePanel.lv_panel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("UltraliskButton"));
    lib1926661B_gv_kC_UnitChoicePanel.lv_choiceButtons[1] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_UnitChoicePanel.lv_panel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("MutaliskButton"));
    lib1926661B_gv_kC_UnitChoicePanel.lv_choiceButtons[2] = DialogControlLastCreated();
}

void lib1926661B_gf_ShowHideUnitChoicePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    bool auto49F08865_val;

    // Implementation
    if ((lib1926661B_gv_kC_UnitChoicePanel.lv_panel == c_invalidDialogControlId)) {
        lib1926661B_gf_KC_CreateUnitChoicePanel();
    }

    auto49F08865_val = lp_showHide;
    if (auto49F08865_val == true) {
        TriggerEnable(lib1926661B_gt_KC_UnitChoice_Ultralisk, true);
        TriggerEnable(lib1926661B_gt_KC_UnitChoice_Mutalisk, true);
        DialogControlSetEnabled(lib1926661B_gv_kC_UnitChoicePanel.lv_choiceButtons[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(lib1926661B_gv_kC_UnitChoicePanel.lv_choiceButtons[2], PlayerGroupAll(), true);
        DialogControlSendAnimationEvent(lib1926661B_gv_kC_UnitChoicePanel.lv_panel, PlayerGroupAll(), "Birth");
        Wait(0.5, c_timeGame);
        DialogControlSetVisible(lib1926661B_gv_kC_UnitChoicePanel.lv_panel, PlayerGroupAll(), true);
    }
    else if (auto49F08865_val == false) {
        TriggerEnable(lib1926661B_gt_KC_UnitChoice_Ultralisk, false);
        TriggerEnable(lib1926661B_gt_KC_UnitChoice_Mutalisk, false);
        DialogControlSetEnabled(lib1926661B_gv_kC_UnitChoicePanel.lv_choiceButtons[1], PlayerGroupAll(), false);
        DialogControlSetEnabled(lib1926661B_gv_kC_UnitChoicePanel.lv_choiceButtons[2], PlayerGroupAll(), false);
        DialogControlSendAnimationEvent(lib1926661B_gv_kC_UnitChoicePanel.lv_panel, PlayerGroupAll(), "Death");
        Wait(0.5, c_timeGame);
        DialogControlSetVisible(lib1926661B_gv_kC_UnitChoicePanel.lv_panel, PlayerGroupAll(), false);
    }
    else {
    }
}

void lib1926661B_gf_CreateTipCampaign (string lp_tipData, int lp_tipType, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTip(lp_players, libNtve_gf_FormatTipTitle(UserDataGetText("CampaignTips", lp_tipData, "Name", 1), lp_tipType), UserDataGetText("CampaignTips", lp_tipData, "Description", 1), UserDataGetText("CampaignTips", lp_tipData, "Name", 1), UserDataGetImagePath("CampaignTips", lp_tipData, "Icon", 1));
    UserDataSetInt("CampaignTips", lp_tipData, "Created", 1, 1);
}

void lib1926661B_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    int auto27B4E145_val;

    // Implementation
    auto27B4E145_val = lp_mode;
    if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_CinematicInTransmission) {
        libLbty_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll());
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_CinematicOutofTransmission) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 40.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.25);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_Game) {
        lib1926661B_gv_kC_VolumeChannelModeInSpeech = false;
        if ((lib1926661B_gv_kC_VolumeChannelModeInLowHP == true)) {
            lib1926661B_gf_SetAllSoundChannelVolumesCampaign(lib1926661B_ge_VolumeChannelModeCampaign_LowHealthBegin);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        lib1926661B_gv_kC_VolumeChannelModeInLowHP = true;
        if ((lib1926661B_gv_kC_VolumeChannelModeInSpeech == true)) {
            lib1926661B_gf_SetAllSoundChannelVolumesCampaign(lib1926661B_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        lib1926661B_gv_kC_VolumeChannelModeInLowHP = false;
        if ((lib1926661B_gv_kC_VolumeChannelModeInSpeech == true)) {
            lib1926661B_gf_SetAllSoundChannelVolumesCampaign(lib1926661B_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_Speech) {
        lib1926661B_gv_kC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto27B4E145_val == lib1926661B_ge_VolumeChannelModeCampaign_Victory) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 1.0);
    }
    else {
    }
}

void lib1926661B_gf_MuteUnmuteAllSoundChannels (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryBuild, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDialogue, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFoley, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryGather, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryME, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovement, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryOther, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryReady, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySEmitters, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySPieces, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryTV, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, lp_muteUnmute);
}

unit lib1926661B_gf_KC_TownBestWorkerRallyMineral (unit lp_town) {
    // Variable Declarations
    unit lv_indexUnitOuter;
    unit lv_indexUnitInner;
    fixed lv_bestDistance;
    fixed lv_curDistance;
    region lv_searchArea;
    unitgroup lv_mineralGroup;
    unit lv_bestMineral;

    // Automatic Variable Declarations
    unitgroup autoFAD5FBE0_g;
    int autoFAD5FBE0_u;
    unitgroup auto7AF3D22D_g;
    int auto7AF3D22D_u;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    lv_searchArea = RegionCircle(UnitGetPosition(lp_town), 10.0);
    lv_mineralGroup = UnitGroup("MineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("RichMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("UmojanLabMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    autoFAD5FBE0_g = lv_mineralGroup;
    autoFAD5FBE0_u = UnitGroupCount(autoFAD5FBE0_g, c_unitCountAll);
    for (;; autoFAD5FBE0_u -= 1) {
        lv_indexUnitOuter = UnitGroupUnitFromEnd(autoFAD5FBE0_g, autoFAD5FBE0_u);
        if (lv_indexUnitOuter == null) { break; }
        lv_curDistance = 0.0;
        auto7AF3D22D_g = lv_mineralGroup;
        auto7AF3D22D_u = UnitGroupCount(auto7AF3D22D_g, c_unitCountAll);
        for (;; auto7AF3D22D_u -= 1) {
            lv_indexUnitInner = UnitGroupUnitFromEnd(auto7AF3D22D_g, auto7AF3D22D_u);
            if (lv_indexUnitInner == null) { break; }
            if ((lv_indexUnitInner != lv_indexUnitOuter)) {
                lv_curDistance += DistanceBetweenPoints(UnitGetPosition(lv_indexUnitInner), UnitGetPosition(lv_indexUnitOuter));
            }

        }
        if (((lv_bestDistance == 0.0) || (lv_curDistance < lv_bestDistance))) {
            lv_bestDistance = lv_curDistance;
            lv_bestMineral = lv_indexUnitOuter;
        }

    }
    return lv_bestMineral;
}

void lib1926661B_gf_SetWorkerRallyPointforTown (unit lp_town) {
    // Variable Declarations
    unit lv_bestMineral;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bestMineral = lib1926661B_gf_KC_TownBestWorkerRallyMineral(lp_town);
    if ((lv_bestMineral != null)) {
        UnitIssueOrder(lp_town, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), lv_bestMineral), c_orderQueueReplace);
    }

}

void lib1926661B_gf_SetWorkerRallyPointsforPlayersTowns (int lp_player) {
    // Variable Declarations
    unit lv_indexTowns;
    unitgroup lv_townsGroup;

    // Automatic Variable Declarations
    unitgroup auto38B199BB_g;
    int auto38B199BB_u;

    // Variable Initialization
    lv_townsGroup = UnitGroupEmpty();

    // Implementation
    lv_townsGroup = UnitGroup("UPLHeadquarters", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38B199BB_g = lv_townsGroup;
    auto38B199BB_u = UnitGroupCount(auto38B199BB_g, c_unitCountAll);
    for (;; auto38B199BB_u -= 1) {
        lv_indexTowns = UnitGroupUnitFromEnd(auto38B199BB_g, auto38B199BB_u);
        if (lv_indexTowns == null) { break; }
        lib1926661B_gf_SetWorkerRallyPointforTown(lv_indexTowns);
    }
}

void lib1926661B_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player) {
    // Automatic Variable Declarations
    int autoE2BA9C4E_n;
    int autoE2BA9C4E_i;

    // Implementation
    autoE2BA9C4E_n = lp_count;
    for (autoE2BA9C4E_i = 1; autoE2BA9C4E_i <= autoE2BA9C4E_n; autoE2BA9C4E_i += 1) {
        AIResearch(lp_player, 4, -1, lp_upgrade);
    }
}

void lib1926661B_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gf_GivePlayerResources(UnitGetPosition(lp_cacheUnit), lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
    UnitKill(lp_cacheUnit);
}

void lib1926661B_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto0E3820E8_val;

    // Variable Initialization

    // Implementation
    auto0E3820E8_val = lp_resourceType;
    if (auto0E3820E8_val == lib1926661B_ge_CacheResourceType_Mineral) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto0E3820E8_val == lib1926661B_ge_CacheResourceType_Vespene) {
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else {
    }
    lib1926661B_gf_DisplayRewardFloatingText(lp_location, lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
}

void lib1926661B_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto5D2805D4_val;
    int auto611467ED_val;

    // Variable Initialization

    // Implementation
    auto5D2805D4_val = lp_resourceType;
    if (auto5D2805D4_val == lib1926661B_ge_CacheResourceType_Mineral) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_429F7B07", "A", StringToText(("Kicker_Minerals")));
        TextExpressionSetToken("Param/Expression/lib_1926661B_429F7B07", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_1926661B_429F7B07");
    }
    else if (auto5D2805D4_val == lib1926661B_ge_CacheResourceType_Vespene) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_E48EBCCC", "A", StringToText(("Kicker_Gas")));
        TextExpressionSetToken("Param/Expression/lib_1926661B_E48EBCCC", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_1926661B_E48EBCCC");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1926661B_BFEDF31D", "A", StringToText(("Kicker_Zerg")));
        TextExpressionSetToken("Param/Expression/lib_1926661B_BFEDF31D", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_1926661B_BFEDF31D");
    }
    if ((lp_resourceIcon != null)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_2E30CC8D", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_1926661B_2E30CC8D", "B", StringToText(lp_resourceIcon));
        lv_text = TextExpressionAssemble("Param/Expression/lib_1926661B_2E30CC8D");
    }
    else {
        auto611467ED_val = lp_resourceType;
        if (auto611467ED_val == lib1926661B_ge_CacheResourceType_Mineral) {
            TextExpressionSetToken("Param/Expression/lib_1926661B_7106A1DB", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_1926661B_7106A1DB");
        }
        else if (auto611467ED_val == lib1926661B_ge_CacheResourceType_Vespene) {
            TextExpressionSetToken("Param/Expression/lib_1926661B_8767B2BC", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_1926661B_8767B2BC");
        }
        else {
        }
    }
    if (((lp_resourceText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_79F7F239", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_1926661B_79F7F239", "B", lp_resourceText);
        lv_text = TextExpressionAssemble("Param/Expression/lib_1926661B_79F7F239");
    }

    SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    TextTagCreate(lv_text, 24, lp_location, 2.0, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    if ((lp_resourceType == lib1926661B_ge_CacheResourceType_CustomResource)) {
        TextTagSetEdgeImage(TextTagLastCreated(), c_textTagEdgeBottom, "Assets\\Textures\\ui_hots_frame_objectives_bonus_popup_short.dds", 0, -15);
    }
    else {
        TextTagSetEdgeImage(TextTagLastCreated(), c_textTagEdgeBottom, "Assets\\Textures\\ui_hots_frame_objectives_bonus_popup_reg.dds", 0, -15);
    }
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

void lib1926661B_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorSpawn(lp_hatchery, "SpawnLarva", lp_larvaCount);
}

text lib1926661B_gf_FormatTextWithReplacement (text lp_text, text lp_replacement1, text lp_replacement2, text lp_replacement3, text lp_replacement4) {
    // Variable Declarations
    text lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_result = lp_text;
    if (((lp_replacement1 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_1926661B_40AF78D2"), lp_replacement1, c_stringReplaceAll, c_stringCase);
    }

    if (((lp_replacement2 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_1926661B_97EB67D7"), lp_replacement2, c_stringReplaceAll, c_stringCase);
    }

    if (((lp_replacement3 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_1926661B_5B1A5BD8"), lp_replacement3, c_stringReplaceAll, c_stringCase);
    }

    if (((lp_replacement4 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_1926661B_EBECA6C5"), lp_replacement4, c_stringReplaceAll, c_stringCase);
    }

    return lv_result;
}

unit lib1926661B_gf_KC_HatcheryBestWorkerRallyMineral (unit lp_hatcher) {
    // Variable Declarations
    unit lv_indexUnitOuter;
    unit lv_indexUnitInner;
    fixed lv_bestDistance;
    fixed lv_curDistance;
    region lv_searchArea;
    unitgroup lv_mineralGroup;
    unit lv_bestMineral;

    // Automatic Variable Declarations
    unitgroup auto53FBEFBE_g;
    int auto53FBEFBE_u;
    unitgroup auto1DCFFF03_g;
    int auto1DCFFF03_u;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    lv_searchArea = RegionCircle(UnitGetPosition(lp_hatcher), 10.0);
    lv_mineralGroup = UnitGroup("MineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("RichMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("UmojanLabMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    auto53FBEFBE_g = lv_mineralGroup;
    auto53FBEFBE_u = UnitGroupCount(auto53FBEFBE_g, c_unitCountAll);
    for (;; auto53FBEFBE_u -= 1) {
        lv_indexUnitOuter = UnitGroupUnitFromEnd(auto53FBEFBE_g, auto53FBEFBE_u);
        if (lv_indexUnitOuter == null) { break; }
        lv_curDistance = 0.0;
        auto1DCFFF03_g = lv_mineralGroup;
        auto1DCFFF03_u = UnitGroupCount(auto1DCFFF03_g, c_unitCountAll);
        for (;; auto1DCFFF03_u -= 1) {
            lv_indexUnitInner = UnitGroupUnitFromEnd(auto1DCFFF03_g, auto1DCFFF03_u);
            if (lv_indexUnitInner == null) { break; }
            if ((lv_indexUnitOuter != lv_indexUnitInner)) {
                lv_curDistance += DistanceBetweenPoints(UnitGetPosition(lv_indexUnitOuter), UnitGetPosition(lv_indexUnitInner));
            }

        }
        if (((lv_bestDistance == 0.0) || (lv_curDistance < lv_bestDistance))) {
            lv_bestDistance = lv_curDistance;
            lv_bestMineral = lv_indexUnitOuter;
        }

    }
    return lv_bestMineral;
}

void lib1926661B_gf_SetHatcheryRallyPoint (unit lp_hatchery, point lp_rallyPoint) {
    // Variable Declarations
    unit lv_bestMineral;
    point lv_rallyPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bestMineral = lib1926661B_gf_KC_HatcheryBestWorkerRallyMineral(lp_hatchery);
    if ((lv_bestMineral != null)) {
        UnitIssueOrder(lp_hatchery, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lv_bestMineral), c_orderQueueReplace);
    }

    lv_rallyPoint = lp_rallyPoint;
    if ((lv_rallyPoint == null)) {
        if ((lv_bestMineral != null)) {
            lv_rallyPoint = PointWithOffsetPolar(UnitGetPosition(lp_hatchery), 5.0, (AngleBetweenPoints(UnitGetPosition(lp_hatchery), UnitGetPosition(lv_bestMineral)) + 180.0));
        }

    }

    if ((lv_rallyPoint != null)) {
        UnitIssueOrder(lp_hatchery, OrderTargetingPoint(AbilityCommand("RallyHatchery", 0), lv_rallyPoint), c_orderQueueReplace);
    }

}

void lib1926661B_gf_SetAllHatcheriesRallyPoints (int lp_player) {
    // Variable Declarations
    unit lv_indexHatchery;
    unitgroup lv_hatcheryGroup;

    // Automatic Variable Declarations
    unitgroup auto2F5CB7CB_g;
    int auto2F5CB7CB_u;

    // Variable Initialization
    lv_hatcheryGroup = UnitGroupEmpty();

    // Implementation
    lv_hatcheryGroup = UnitGroup("Hatchery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_hatcheryGroup, UnitGroup("Lair", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_hatcheryGroup, UnitGroup("Hive", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto2F5CB7CB_g = lv_hatcheryGroup;
    auto2F5CB7CB_u = UnitGroupCount(auto2F5CB7CB_g, c_unitCountAll);
    for (;; auto2F5CB7CB_u -= 1) {
        lv_indexHatchery = UnitGroupUnitFromEnd(auto2F5CB7CB_g, auto2F5CB7CB_u);
        if (lv_indexHatchery == null) { break; }
        lib1926661B_gf_SetHatcheryRallyPoint(lv_indexHatchery, null);
    }
}

string lib1926661B_gf_KC_ReticleModelOfStyle (int lp_type, int lp_size) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    int autoFBEAC457_val;
    int auto205BAC24_val;
    int autoD234B893_val;
    int autoBF3CD6A4_val;

    // Variable Initialization

    // Implementation
    autoFBEAC457_val = lp_size;
    if (autoFBEAC457_val == lib1926661B_ge_CampaginReticleSize_Large) {
        auto205BAC24_val = lp_type;
        if (auto205BAC24_val == lib1926661B_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (auto205BAC24_val == lib1926661B_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (auto205BAC24_val == lib1926661B_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (auto205BAC24_val == lib1926661B_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (auto205BAC24_val == lib1926661B_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (auto205BAC24_val == lib1926661B_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (auto205BAC24_val == lib1926661B_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto205BAC24_val == lib1926661B_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto205BAC24_val == lib1926661B_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else {
        }
    }
    else if (autoFBEAC457_val == lib1926661B_ge_CampaginReticleSize_Medium) {
        autoD234B893_val = lp_type;
        if (autoD234B893_val == lib1926661B_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (autoD234B893_val == lib1926661B_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (autoD234B893_val == lib1926661B_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (autoD234B893_val == lib1926661B_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (autoD234B893_val == lib1926661B_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (autoD234B893_val == lib1926661B_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (autoD234B893_val == lib1926661B_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoD234B893_val == lib1926661B_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoD234B893_val == lib1926661B_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else {
        }
    }
    else if (autoFBEAC457_val == lib1926661B_ge_CampaginReticleSize_Small) {
        autoBF3CD6A4_val = lp_type;
        if (autoBF3CD6A4_val == lib1926661B_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (autoBF3CD6A4_val == lib1926661B_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (autoBF3CD6A4_val == lib1926661B_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (autoBF3CD6A4_val == lib1926661B_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (autoBF3CD6A4_val == lib1926661B_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (autoBF3CD6A4_val == lib1926661B_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (autoBF3CD6A4_val == lib1926661B_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (autoBF3CD6A4_val == lib1926661B_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (autoBF3CD6A4_val == lib1926661B_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string lib1926661B_gf_KC_ReticleTextFontOfStyle (int lp_type) {
    // Variable Declarations
    string lv_fontStyle;

    // Automatic Variable Declarations
    int auto46EB6D30_val;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto46EB6D30_val = lp_type;
    if (auto46EB6D30_val == lib1926661B_ge_CampaginReticleType_TerranBonusObjective) {
        lv_fontStyle = "VoidReticleTerranBonusObjective";
    }
    else if (auto46EB6D30_val == lib1926661B_ge_CampaginReticleType_TerranEnemy) {
        lv_fontStyle = "VoidReticleTerranEnemy";
    }
    else if (auto46EB6D30_val == lib1926661B_ge_CampaginReticleType_TerranMainObjective) {
        lv_fontStyle = "VoidReticleTerranMainObjective";
    }
    else if (auto46EB6D30_val == lib1926661B_ge_CampaginReticleType_ZergBonusObjective) {
        lv_fontStyle = "VoidReticleZergBonusObjective";
    }
    else if (auto46EB6D30_val == lib1926661B_ge_CampaginReticleType_ZergEnemy) {
        lv_fontStyle = "VoidReticleZergEnemy";
    }
    else if (auto46EB6D30_val == lib1926661B_ge_CampaginReticleType_ZergMainObjective) {
        lv_fontStyle = "VoidReticleZergMainObjective";
    }
    else if (auto46EB6D30_val == lib1926661B_ge_CampaginReticleType_ProtossBonusObjective) {
        lv_fontStyle = "VoidReticleProtossBonusObjective";
    }
    else if (auto46EB6D30_val == lib1926661B_ge_CampaginReticleType_ProtossEnemy) {
        lv_fontStyle = "VoidReticleProtossEnemy";
    }
    else if (auto46EB6D30_val == lib1926661B_ge_CampaginReticleType_ProtossMainObjective) {
        lv_fontStyle = "VoidReticleProtossMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void lib1926661B_gf_KC_ReticleApplyTint (actor lp_reticle, int lp_type2) {
    // Automatic Variable Declarations
    int auto601A80BD_val;

    // Implementation
    auto601A80BD_val = lp_type2;
    if (auto601A80BD_val == lib1926661B_ge_CampaginReticleType_ProtossMainObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else if (auto601A80BD_val == lib1926661B_ge_CampaginReticleType_ProtossEnemy) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 255,0,0");
    }
    else if (auto601A80BD_val == lib1926661B_ge_CampaginReticleType_ProtossBonusObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else {
    }
}

void lib1926661B_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = lib1926661B_gf_KC_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    lib1926661B_gf_KC_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = lib1926661B_gf_KC_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_1926661B_9C52A85A", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_1926661B_9C52A85A", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_1926661B_9C52A85A"), 24, lp_location, (PointGetHeight(lp_location) + 1.0), true, true, PlayerGroupSingle(1));
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void lib1926661B_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = lib1926661B_gf_KC_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnit(lp_target, lv_model, lp_attachPoint);
    lib1926661B_gf_KC_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = lib1926661B_gf_KC_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_1926661B_11F142F1", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_1926661B_11F142F1", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_1926661B_11F142F1"), 24, UnitGetPosition(lp_target), 0.0, true, true, PlayerGroupSingle(1));
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 0.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void lib1926661B_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_point != null)) {
        if ((lp_actor != null)) {
            libNtve_gf_CreateActorAtPoint(lp_actor, lp_point);
        }

        if ((lp_sound != null)) {
            SoundPlayAtPoint(lp_sound, PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
        }

    }

}

bool lib1926661B_gf_PlayerIsInCombatCampaign (int lp_player) {
    // Variable Declarations
    fixed lv_combatTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        return false;
    }

    lv_combatTime = MaxF(PlayerGetPropertyFixed(lp_player, c_playerPropDamageDealtTime), PlayerGetPropertyFixed(lp_player, c_playerPropDamageTakenTime));
    lv_combatTime = (TimerGetElapsed(lib1926661B_gv_kC_CombatTimer) - lv_combatTime);
    return (lv_combatTime < 4.0);
}

void lib1926661B_gf_ShareVisionAmongPlayers (playergroup lp_players) {
    // Variable Declarations
    int lv_indexPlayer1;
    int lv_indexPlayer2;

    // Automatic Variable Declarations
    playergroup auto50F9E41A_g;
    playergroup auto4A64F3D4_g;

    // Variable Initialization

    // Implementation
    auto50F9E41A_g = lp_players;
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(auto50F9E41A_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        auto4A64F3D4_g = lp_players;
        lv_indexPlayer2 = -1;
        while (true) {
            lv_indexPlayer2 = PlayerGroupNextPlayer(auto4A64F3D4_g, lv_indexPlayer2);
            if (lv_indexPlayer2 < 0) { break; }
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                PlayerSetAlliance(lv_indexPlayer1, c_allianceIdVision, lv_indexPlayer2, true);
            }

        }
    }
}

void lib1926661B_gf_CinematicModeSwarmCampaign (bool lp_onOff, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CinematicMode(lp_onOff, PlayerGroupAll(), lp_duration);
    if ((lp_onOff == true)) {
        lib1926661B_gf_SetAllSoundChannelVolumesCampaign(lib1926661B_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    }

}

bool lib1926661B_gf_KC_StartingWorkerAutoHarvestEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGetState(1, c_playerStateStartingRallyEnabled);
}

void lib1926661B_gf_StartingWorkersAutoHarvest (region lp_regionMineralWorker, region lp_regionGasWorker) {
    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_resourceGroup;
    unit lv_indexResource;
    unitgroup lv_unitGroupHarvestMinerals;
    unitgroup lv_unitGroupHarvestGas;

    // Automatic Variable Declarations
    unitgroup autoCD998777_g;
    int autoCD998777_u;
    unitgroup autoB515F0CD_g;
    int autoB515F0CD_u;
    unitgroup auto5FB1A3FC_g;
    int auto5FB1A3FC_u;
    unitgroup auto3798FC29_g;
    int auto3798FC29_u;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();
    lv_unitGroupHarvestMinerals = UnitGroupEmpty();
    lv_unitGroupHarvestGas = UnitGroupEmpty();

    // Implementation
    if ((lib1926661B_gf_KC_StartingWorkerAutoHarvestEnabled() == false)) {
        return ;
    }

    if ((lp_regionMineralWorker != null)) {
        lv_unitGroupHarvestMinerals = UnitGroup(null, 1, lp_regionMineralWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }

    if ((TechTreeUpgradeCount(1, "K5AutoExtractor", c_techCountQueuedOrBetter) > 0)) {
        UnitGroupAddUnitGroup(lv_unitGroupHarvestMinerals, UnitGroup(null, 1, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        if ((lp_regionGasWorker != null)) {
            lv_unitGroupHarvestGas = UnitGroup(null, 1, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    if ((lv_unitGroupHarvestMinerals != UnitGroupEmpty())) {
        autoCD998777_g = lv_unitGroupHarvestMinerals;
        autoCD998777_u = UnitGroupCount(autoCD998777_g, c_unitCountAll);
        for (;; autoCD998777_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(autoCD998777_g, autoCD998777_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_resourceGroup);
            autoB515F0CD_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB515F0CD_u = UnitGroupCount(autoB515F0CD_g, c_unitCountAll);
            for (;; autoB515F0CD_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(autoB515F0CD_g, autoB515F0CD_u);
                if (lv_indexResource == null) { break; }
                if (((UnitGetType(lv_indexResource) == "MineralField") || (UnitGetType(lv_indexResource) == "RichMineralField"))) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }

        }
    }

    if ((lv_unitGroupHarvestGas != UnitGroupEmpty())) {
        auto5FB1A3FC_g = lv_unitGroupHarvestGas;
        auto5FB1A3FC_u = UnitGroupCount(auto5FB1A3FC_g, c_unitCountAll);
        for (;; auto5FB1A3FC_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(auto5FB1A3FC_g, auto5FB1A3FC_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_resourceGroup);
            auto3798FC29_g = UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3798FC29_u = UnitGroupCount(auto3798FC29_g, c_unitCountAll);
            for (;; auto3798FC29_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(auto3798FC29_g, auto3798FC29_u);
                if (lv_indexResource == null) { break; }
                if (((UnitGetType(lv_indexResource) == "Refinery") || (UnitGetType(lv_indexResource) == "Extractor") || (UnitGetType(lv_indexResource) == "Assimilator") || (UnitGetType(lv_indexResource) == "UPLExhumer"))) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }

        }
    }

}

void lib1926661B_gf_KC_ResetAbilityCD (abilcmd lp_abilityCommand, unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitAbilityExists(lp_hero, AbilityCommandGetAbility(lp_abilityCommand)) == true)) {
        UnitAbilityReset(lp_hero, lp_abilityCommand, c_spendLocationAll);
    }

}

int lib1926661B_gf_KC_DifficultyIndex (int lp_difficulty) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto72D793CD_val;

    // Variable Initialization

    // Implementation
    auto72D793CD_val = lp_difficulty;
    if (auto72D793CD_val == 2) {
        return 1;
    }
    else if (auto72D793CD_val == 3) {
        return 2;
    }
    else {
        return 1;
    }
}

int lib1926661B_gf_KC_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int auto64EFB35F_val;

    // Implementation
    auto64EFB35F_val = lp_index;
    if (auto64EFB35F_val == lib1926661B_gf_KC_DifficultyIndex(2)) {
        return 2;
    }
    else if (auto64EFB35F_val == lib1926661B_gf_KC_DifficultyIndex(3)) {
        return 3;
    }
    else {
        return 2;
    }
}

void lib1926661B_gf_KC_SetCampaignDifficulty (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_kCX_CampaignDifficulty = lp_difficulty;
}

int lib1926661B_gf_ReturnCampaignDifficulty () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_kCX_CampaignDifficulty;
}

int lib1926661B_gf_DifficultyValueInteger (int lp_normal, int lp_hard) {
    // Automatic Variable Declarations
    int autoA9CB1DF0_val;

    // Implementation
    autoA9CB1DF0_val = PlayerDifficulty(1);
    if (autoA9CB1DF0_val == 2) {
        return lp_normal;
    }
    else if (autoA9CB1DF0_val == 3) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

fixed lib1926661B_gf_DifficultyValueReal (fixed lp_normal, fixed lp_hard) {
    // Automatic Variable Declarations
    int auto1D193244_val;

    // Implementation
    auto1D193244_val = PlayerDifficulty(1);
    if (auto1D193244_val == 2) {
        return lp_normal;
    }
    else if (auto1D193244_val == 3) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

bool lib1926661B_gf_DifficultyValueBoolean (bool lp_normal, bool lp_hard) {
    // Automatic Variable Declarations
    int auto1DDF6DDF_val;

    // Implementation
    auto1DDF6DDF_val = PlayerDifficulty(1);
    if (auto1DDF6DDF_val == 2) {
        return lp_normal;
    }
    else if (auto1DDF6DDF_val == 3) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

string lib1926661B_gf_DifficultyValueUnitType (string lp_normal, string lp_hard) {
    // Automatic Variable Declarations
    int autoCC434825_val;

    // Implementation
    autoCC434825_val = PlayerDifficulty(1);
    if (autoCC434825_val == 2) {
        return lp_normal;
    }
    else if (autoCC434825_val == 3) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

string lib1926661B_gf_StoryMapLoadingScreenImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "Assets\\Textures\\blank.dds";
    }

    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingImage", c_playerAny));
}

string lib1926661B_gf_StoryMapLoadingScreenVictoryImage (string lp_map) {
    // Variable Declarations
    string lv_victoryImage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_map == null) || (lib1926661B_gf_StoryMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return "Assets\\Textures\\blank.dds";
    }

    lv_victoryImage = UserDataGetImagePath("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_map), "LoadingScreenVictoryImage", 1);
    if ((lv_victoryImage == null)) {
        lv_victoryImage = lib1926661B_gf_StoryMapLoadingScreenImage(lib1926661B_gf_PP_NextMission(lp_map, lib1926661B_gv_kCX_IsSimulation, c_gameOverVictory));
    }

    return lv_victoryImage;
}

string lib1926661B_gf_StoryMapMissionArchiveBackgroundImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_map), "UI_MissionArchive_Background", 1);
}

string lib1926661B_gf_StoryMapMissionArchiveIconImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_map), "ArchivesIconImage", 1);
}

string lib1926661B_gf_StoryMapMissionSummaryImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "MissionBackgroundImage", c_playerAny));
}

bool lib1926661B_gf_StoryMapTypeCheck (string lp_map, int lp_mapType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return false;
    }

    return (CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_map), "Kind", 1) == (lp_mapType));
}

string lib1926661B_gf_StoryMapFile (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "";
    }

    return CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "File", 1);
}

text lib1926661B_gf_StoryMapName (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_1926661B_0D01B8AD");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", 1));
}

text lib1926661B_gf_StoryMapNameLowerCase (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_1926661B_61C047EF");
    }

    return UserDataGetText("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_map), "NameLowerCase", 1);
}

text lib1926661B_gf_StoryMapHelp (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_map == null) || (lib1926661B_gf_StoryMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return StringExternal("Param/Value/lib_1926661B_969F6414");
    }
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingHelp", 1));
}

text lib1926661B_gf_StoryMapHelp2 (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "Summary", 1));
}

text lib1926661B_gf_StoryMapHelp3 (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "LoadingTitle", 1));
}

text lib1926661B_gf_StoryMapHelp4 (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "LoadingBody", 1));
}

string lib1926661B_gf_StoryMapContactPortrait (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactModelLink", 1));
}

int lib1926661B_gf_MissionStatusAge (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int auto0FCBD4E2_val;

    // Implementation
    auto0FCBD4E2_val = lp_status;
    if (auto0FCBD4E2_val == lib1926661B_ge_MissionStatus_Available) {
        return UserDataGetInt("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "AvailableAge", 1);
    }
    else if (auto0FCBD4E2_val == lib1926661B_ge_MissionStatus_Completed) {
        return UserDataGetInt("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "CompletedAge", 1);
    }
    else {
    }
    return 0;
}

int lib1926661B_gf_MissionStatusAge2 (string lp_mission, int lp_status) {
    // Variable Declarations
    string lv_sectionName;

    // Automatic Variable Declarations
    int autoFBB4F271_val;

    // Variable Initialization
    lv_sectionName = "";

    // Implementation
    autoFBB4F271_val = lp_status;
    if (autoFBB4F271_val == lib1926661B_ge_MissionStatus_Available) {
        lv_sectionName = lib1926661B_gf_KC_BankSectionName(lp_mission, "MissionAvailableAge");
        return lib1926661B_gf_KC_LoadTransitionVarInteger(lib1926661B_gv_kC_CampaignBank, lv_sectionName, lib1926661B_gf_KC_StoryMapBankID(lp_mission), 0);
    }
    else if (autoFBB4F271_val == lib1926661B_ge_MissionStatus_Completed) {
        lv_sectionName = lib1926661B_gf_KC_BankSectionName(lp_mission, "MissionCompletedAge");
        return lib1926661B_gf_KC_LoadTransitionVarInteger(lib1926661B_gv_kC_CampaignBank, lv_sectionName, lib1926661B_gf_KC_StoryMapBankID(lp_mission), 0);
    }
    else {
    }
    return 0;
}

bool lib1926661B_gf_MissionStatusAge3 (string lp_mission, int lp_status) {
    // Variable Declarations
    string lv_sectionName;

    // Automatic Variable Declarations
    int auto7741F88A_val;

    // Variable Initialization
    lv_sectionName = "";

    // Implementation
    auto7741F88A_val = lp_status;
    if (auto7741F88A_val == lib1926661B_ge_MissionStatus_Completed) {
        lv_sectionName = lib1926661B_gf_KC_BankSectionName(lp_mission, "MissionCompleteted");
        return lib1926661B_gf_KC_LoadTransitionVarBoolean(lib1926661B_gv_kC_CampaignBank, lv_sectionName, lib1926661B_gf_KC_StoryMapBankID(lp_mission), false);
    }
    else {
    }
    return false;
}

int lib1926661B_gf_MissionStatus (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_MissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed) > 0)) {
        return lib1926661B_ge_MissionStatus_Completed;
    }

    if ((lib1926661B_gf_MissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Available) > 0)) {
        return lib1926661B_ge_MissionStatus_Available;
    }

    return lib1926661B_ge_MissionStatus_Locked;
}

int lib1926661B_gf_MissionStatus2 (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_MissionStatusAge2(lp_mission, lib1926661B_ge_MissionStatus_Completed) > 0)) {
        return lib1926661B_ge_MissionStatus_Completed;
    }

    if ((lib1926661B_gf_MissionStatusAge2(lp_mission, lib1926661B_ge_MissionStatus_Available) > 0)) {
        return lib1926661B_ge_MissionStatus_Available;
    }

    return lib1926661B_ge_MissionStatus_Locked;
}

bool lib1926661B_gf_MissionStatusCheck (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1926661B_gf_MissionStatus(lp_mission) == lp_status);
}

bool lib1926661B_gf_MissionStatusCheck2 (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1926661B_gf_MissionStatus2(lp_mission) == lp_status);
}

string lib1926661B_gf_MissionPitch (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "Pitch", 1);
}

string lib1926661B_gf_TravelPitch (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "Travel Pitch", 1);
}

int lib1926661B_gf_NumberOfMissions (int lp_options) {
    // Variable Declarations
    string lv_indexMission;
    int lv_total;

    // Automatic Variable Declarations
    int autoD8EB8CD1_ae;
    int autoD8EB8CD1_ai;
    int autoA1F55B7F_val;

    // Variable Initialization

    // Implementation
    autoD8EB8CD1_ae = CatalogEntryCount(c_gameCatalogMap);
    autoD8EB8CD1_ai = 1;
    while (autoD8EB8CD1_ai <= autoD8EB8CD1_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoD8EB8CD1_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            autoA1F55B7F_val = lp_options;
            if (autoA1F55B7F_val == lib1926661B_ge_MissionCountOptions_All) {
                lv_total += 1;
            }
            else if (autoA1F55B7F_val == lib1926661B_ge_MissionCountOptions_Available) {
                if ((lib1926661B_gf_MissionStatusCheck(lv_indexMission, lib1926661B_ge_MissionStatus_Available) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoA1F55B7F_val == lib1926661B_ge_MissionCountOptions_Completed) {
                if ((lib1926661B_gf_MissionStatusAge3(lv_indexMission, lib1926661B_ge_MissionStatus_Completed) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoA1F55B7F_val == lib1926661B_ge_MissionCountOptions_Locked) {
                if ((lib1926661B_gf_MissionStatusCheck(lv_indexMission, lib1926661B_ge_MissionStatus_Locked) == true)) {
                    lv_total += 1;
                }

            }
            else {
            }
        }
        autoD8EB8CD1_ai = autoD8EB8CD1_ai + 1;
    }
    return lv_total;
}

int lib1926661B_gf_NumberOfMissionsAll (int lp_options) {
    // Variable Declarations
    string lv_indexMission;
    int lv_total;

    // Automatic Variable Declarations
    int auto4745C134_ae;
    int auto4745C134_ai;
    int autoAF47181C_val;

    // Variable Initialization

    // Implementation
    auto4745C134_ae = CatalogEntryCount(c_gameCatalogMap);
    auto4745C134_ai = 1;
    while (auto4745C134_ai <= auto4745C134_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto4745C134_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            autoAF47181C_val = lp_options;
            if (autoAF47181C_val == lib1926661B_ge_MissionCountOptions_All) {
                lv_total += 1;
            }
            else if (autoAF47181C_val == lib1926661B_ge_MissionCountOptions_Available) {
                if ((lib1926661B_gf_MissionStatusCheck(lv_indexMission, lib1926661B_ge_MissionStatus_Available) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoAF47181C_val == lib1926661B_ge_MissionCountOptions_Completed) {
                if ((lib1926661B_gf_MissionStatusCheck(lv_indexMission, lib1926661B_ge_MissionStatus_Completed) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoAF47181C_val == lib1926661B_ge_MissionCountOptions_Locked) {
                if ((lib1926661B_gf_MissionStatusCheck(lv_indexMission, lib1926661B_ge_MissionStatus_Locked) == true)) {
                    lv_total += 1;
                }

            }
            else {
            }
        }
        auto4745C134_ai = auto4745C134_ai + 1;
    }
    return lv_total;
}

int lib1926661B_gf_NumberOfMissionArcsCompleted () {
    // Variable Declarations
    int lv_total;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return lv_total;
}

int lib1926661B_gf_MissionCompleteBestTime (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_kC_MissionCompletionBestTime[lib1926661B_gf_KC_DifficultyIndex(lp_difficulty)];
}

int lib1926661B_gf_MissionCompleteBestTImeArchives (string lp_mission, int lp_difficulty) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    int lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(null, "MissionBestTime");
    lv_time = lib1926661B_gf_KC_LoadTransitionVarInteger(lib1926661B_gv_kC_CampaignBank, lv__SectionName, lib1926661B_gf_KC_BankMIssionDifficultyKey(lp_mission, lp_difficulty), 0);
    return lv_time;
}

bool lib1926661B_gf_ReturnNotificationState (string lp_notifactionName) {
    // Variable Declarations
    string lv__SectionName;
    bool lv_state;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(null, "NotificationStates");
    lv_state = lib1926661B_gf_KC_LoadTransitionVarBoolean(lib1926661B_gv_kC_CampaignBank, lv__SectionName, lp_notifactionName, false);
    return lv_state;
}

void lib1926661B_gf_SaveNotificationState (string lp_notifactionName, bool lp_state) {
    // Variable Declarations
    string lv__SectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(null, "NotificationStates");
    lib1926661B_gf_KC_SaveTransitionVarBoolean(lib1926661B_gv_kC_CampaignBank, lv__SectionName, lp_notifactionName, lp_state, false);
    lib1926661B_gf_KC_SaveCampaignBank();
}

string lib1926661B_gf_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_kC_CurrentMap;
}

string lib1926661B_gf_MissionArmyCategoryUnlocked (string lp_mission) {
    // Variable Declarations
    string lv_category;
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    lv_value = CatalogFieldValueGet(c_gameCatalogMap, (lp_mission), "ArmyCategory", 1);
    return (lv_value);
}

int lib1926661B_gf_MissionRewardTotalEarned (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    int auto5269B614_ae;
    int auto5269B614_ai;

    // Variable Initialization

    // Implementation
    auto5269B614_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    auto5269B614_ai = 1;
    while (auto5269B614_ai <= auto5269B614_ae) {
        lv_objective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto5269B614_ai-1)+"]", 1);
        lv_count += lib1926661B_gf_MissionObjectiveRewardsEarned(lv_objective, lp_type);
        auto5269B614_ai = auto5269B614_ai + 1;
    }
    return lv_count;
}

int lib1926661B_gf_MissionRewardTotal (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    int autoB30C0D32_ae;
    int autoB30C0D32_ai;

    // Variable Initialization

    // Implementation
    autoB30C0D32_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    autoB30C0D32_ai = 1;
    while (autoB30C0D32_ai <= autoB30C0D32_ae) {
        lv_objective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(autoB30C0D32_ai-1)+"]", 1);
        if ((lib1926661B_gf_KC_ObjectiveRewardDivided(lv_objective) == true)) {
            lv_count += (lib1926661B_gf_MissionObjectiveRewards(lv_objective, lp_type)*lib1926661B_gf_MissionObjectiveItemCount(lv_objective));
        }
        else {
            lv_count += lib1926661B_gf_MissionObjectiveRewards(lv_objective, lp_type);
        }
        autoB30C0D32_ai = autoB30C0D32_ai + 1;
    }
    return lv_count;
}

string lib1926661B_gf_MissionDefaultMusic () {
    // Automatic Variable Declarations
    // Implementation
    return "Music_ProtLow";
}

bool lib1926661B_gf_MissionIsUEDFL (string lp_mission) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMission = lp_mission;

    // Implementation
    if (((lv_indexMission == "UEDFL_EP01M00") || (lv_indexMission == "UEDFL_EP01M01") || (lv_indexMission == "UEDFL_EP01M02_1") || (lv_indexMission == "UEDFL_EP01M02_2") || (lv_indexMission == "UEDFL_EP01M03") || (lv_indexMission == "UEDFL_EP01M04") || (lv_indexMission == "UEDFL_EP01M05") || (lv_indexMission == "UEDFL_EP01M06") || (lv_indexMission == "UEDFL_EP01M07") || (lv_indexMission == "UEDFL_EP01M08") || (lv_indexMission == "UEDFL_EP01M09") || (lv_indexMission == "UEDFL_EP01M10"))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1926661B_gf_MissionCompletedOnDifficulty (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1926661B_gf_MissionCompleteBestTime(lp_mission, lp_difficulty) > 0);
}

bool lib1926661B_gf_MissionCompletedOnDifficulty2 (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1926661B_gf_MissionCompleteBestTImeArchives(lp_mission, lp_difficulty) > 0);
}

string lib1926661B_gf_KC_MapUserDataInstance (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", 1));
}

string lib1926661B_gf_KC_MapDataFromUserDataInstance (string lp_map) {
    // Variable Declarations
    string lv_indexMap;

    // Automatic Variable Declarations
    int auto1444F78C_ae;
    int auto1444F78C_ai;

    // Variable Initialization

    // Implementation
    auto1444F78C_ae = CatalogEntryCount(c_gameCatalogMap);
    auto1444F78C_ai = 1;
    while (auto1444F78C_ai <= auto1444F78C_ae) {
        lv_indexMap = CatalogEntryGet(c_gameCatalogMap, auto1444F78C_ai);
        if ((lib1926661B_gf_KC_MapUserDataInstance(lv_indexMap) == lp_map)) {
            return lv_indexMap;
        }

        auto1444F78C_ai = auto1444F78C_ai + 1;
    }
    return null;
}

string lib1926661B_gf_KC_StoryMapBankID (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_map);
}

bool lib1926661B_gf_KC_MissionisInstallation (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int lib1926661B_gf_KC_CompletedMissionCountOnDifficulty (int lp_difficulty) {
    // Variable Declarations
    string lv_indexMission;
    int lv_count;

    // Automatic Variable Declarations
    int autoC9AEF9E3_ae;
    int autoC9AEF9E3_ai;

    // Variable Initialization

    // Implementation
    autoC9AEF9E3_ae = CatalogEntryCount(c_gameCatalogMap);
    autoC9AEF9E3_ai = 1;
    while (autoC9AEF9E3_ai <= autoC9AEF9E3_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoC9AEF9E3_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lib1926661B_gf_MissionCompletedOnDifficulty(lv_indexMission, lp_difficulty) == true)) {
                lv_count += 1;
            }

        }
        autoC9AEF9E3_ai = autoC9AEF9E3_ai + 1;
    }
    return lv_count;
}

void lib1926661B_gf_LaunchMission (string lp_mission, bool lp_simulation, int lp_difficulty) {
    // Variable Declarations
    bool lv_useDebugDialog;
    string lv_nextMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1926661B_gf_PrepareForMission(lp_mission, lp_simulation, false, lp_difficulty);
    GameOver(1, c_gameOverVictory, false, false);
}

void lib1926661B_gf_StoryMapSwitch (string lp_nextMap) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gf_PrepareForStoryMapSwitch(lp_nextMap);
    GameOver(1, c_gameOverVictory, false, false);
}

void lib1926661B_gf_UpdateMissionFlow () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1926661B_gf_KC_LockUnlockMissionIfCondition(false, "UEDFL_EP01M01", true);
    lib1926661B_gf_KC_LockUnlockMissionIfCondition(false, "UEDFL_EP01M02_1", lib1926661B_gf_MissionStatusCheck("UEDFL_EP01M01", lib1926661B_ge_MissionStatus_Completed));
    lib1926661B_gf_KC_LockUnlockMissionIfCondition(false, "UEDFL_EP01M03", lib1926661B_gf_MissionStatusCheck("UEDFL_EP01M02_1", lib1926661B_ge_MissionStatus_Completed));
}

void lib1926661B_gf_KC_SetMissionStatusAge (string lp_mission, int lp_status, int lp_age) {
    // Variable Declarations
    string lv_indexObjective;

    // Automatic Variable Declarations
    int autoDFD646A8_val;

    // Variable Initialization

    // Implementation
    autoDFD646A8_val = lp_status;
    if (autoDFD646A8_val == lib1926661B_ge_MissionStatus_Available) {
        UserDataSetInt("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "AvailableAge", 1, lp_age);
    }
    else if (autoDFD646A8_val == lib1926661B_ge_MissionStatus_Completed) {
        UserDataSetInt("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "CompletedAge", 1, lp_age);
    }
    else {
    }
}

void lib1926661B_gf_KC_IncreaseMissionAge (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_MissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Available) > 0)) {
        lib1926661B_gf_KC_SetMissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Available, (lib1926661B_gf_MissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Available) + 1));
    }

    if ((lib1926661B_gf_MissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed) > 0)) {
        lib1926661B_gf_KC_SetMissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed, (lib1926661B_gf_MissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed) + 1));
    }

}

void lib1926661B_gf_KC_CompleteMission (string lp_mission) {
    // Variable Declarations
    string lv_indexMision;

    // Automatic Variable Declarations
    int auto02739C89_ae;
    int auto02739C89_ai;

    // Variable Initialization

    // Implementation
    if (((lp_mission == null) || (lib1926661B_gf_MissionStatusCheck(lp_mission, lib1926661B_ge_MissionStatus_Completed) == true))) {
        return ;
    }

    lib1926661B_gf_KC_MarkMissionAsStatus(lp_mission, lib1926661B_ge_MissionStatus_Completed);
    if ((lib1926661B_gf_StoryMapTypeCheck(lp_mission, c_mapKindMission) != true)) {
        return ;
    }

    auto02739C89_ae = CatalogEntryCount(c_gameCatalogMap);
    auto02739C89_ai = 1;
    while (auto02739C89_ai <= auto02739C89_ae) {
        lv_indexMision = CatalogEntryGet(c_gameCatalogMap, auto02739C89_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMision, "Kind", 1) == "Mission") {
            if ((lv_indexMision != lp_mission)) {
                lib1926661B_gf_KC_IncreaseMissionAge(lv_indexMision);
            }

        }
        auto02739C89_ai = auto02739C89_ai + 1;
    }
    lib1926661B_gf_UpdateMissionFlow();
}

void lib1926661B_gf_KC_UpdateSimulationMissionAges (string lp_simulationMap) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    string autoD82902A4_val;

    // Variable Initialization

    // Implementation
    lib1926661B_gf_KC_MarkMissionAsStatus(lp_simulationMap, lib1926661B_ge_MissionStatus_Available);
    autoD82902A4_val = lp_simulationMap;
    if (autoD82902A4_val == "UEDFL_EP01M01") {
        lib1926661B_gf_KC_MarkMissionAsStatus("UEDFL_EP01M02_1", lib1926661B_ge_MissionStatus_Locked);
        lib1926661B_gf_KC_MarkMissionAsStatus("UEDFL_EP01M03", lib1926661B_ge_MissionStatus_Locked);
    }
    else if (autoD82902A4_val == "UEDFL_EP01M02_1") {
        lib1926661B_gf_KC_MarkMissionAsStatus("UEDFL_EP01M03", lib1926661B_ge_MissionStatus_Locked);
    }
    else {
    }
    lib1926661B_gf_UpdateMissionFlow();
    lib1926661B_gf_KC_UpdateTechStates(1);
    lib1926661B_gf_KC_ApplyTech(1);
}

void lib1926661B_gf_KC_MarkMissionAsStatus (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int autoAE226A94_val;

    // Implementation
    autoAE226A94_val = lp_status;
    if (autoAE226A94_val == lib1926661B_ge_MissionStatus_Locked) {
        lib1926661B_gf_KC_SetMissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Available, 0);
        lib1926661B_gf_KC_SetMissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed, 0);
    }
    else if (autoAE226A94_val == lib1926661B_ge_MissionStatus_Available) {
        lib1926661B_gf_KC_SetMissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Available, 1);
        lib1926661B_gf_KC_SetMissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed, 0);
    }
    else if (autoAE226A94_val == lib1926661B_ge_MissionStatus_Completed) {
        lib1926661B_gf_KC_SetMissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Available, 0);
        lib1926661B_gf_KC_SetMissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed, 1);
    }
    else {
    }
}

void lib1926661B_gf_KC_LockUnlockMissionIfCondition (bool lp_lockUnlock, string lp_mission, bool lp_condition) {
    // Variable Declarations
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_lockUnlock == true)) {
        lv_label = StringExternal("Param/Value/lib_1926661B_DF3A05B3");
    }
    else {
        lv_label = StringExternal("Param/Value/lib_1926661B_47A5386C");
    }
    TextExpressionSetToken("Param/Expression/lib_1926661B_1221812A", "A", lv_label);
    TextExpressionSetToken("Param/Expression/lib_1926661B_1221812A", "B", StringToText((lp_mission)));
    TextExpressionSetToken("Param/Expression/lib_1926661B_1221812A", "C", libNtve_gf_ConvertBooleanToText(lp_condition));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1926661B_1221812A"), false);
    if ((lp_condition == true)) {
        if ((lp_lockUnlock == false)) {
            if ((lib1926661B_gf_MissionStatusCheck(lp_mission, lib1926661B_ge_MissionStatus_Locked) == true)) {
                lib1926661B_gf_KC_MarkMissionAsStatus(lp_mission, lib1926661B_ge_MissionStatus_Available);
            }

        }
        else {
            if ((lib1926661B_gf_MissionStatusCheck(lp_mission, lib1926661B_ge_MissionStatus_Available) == true)) {
                lib1926661B_gf_KC_MarkMissionAsStatus(lp_mission, lib1926661B_ge_MissionStatus_Locked);
            }

        }
    }

}

void lib1926661B_gf_KC_SetMissionCompletionBestTime (string lp_mIssion, int lp_difficulty, int lp_time) {
    // Variable Declarations
    int lv_untitledVariable001;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_time < 0)) {
        lib1926661B_gv_kC_MissionCompletionBestTime[lib1926661B_gf_KC_DifficultyIndex(lp_difficulty)] = 0;
        return ;
    }

    lib1926661B_gv_kC_MissionCompletionBestTime[lib1926661B_gf_KC_DifficultyIndex(lp_difficulty)] = lp_time;
}

void lib1926661B_gf_KC_SaveMapToBank (string lp_bankMap, bank lp_targetBank, bool lp_isSimulation) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficulty;

    // Automatic Variable Declarations
    int auto72A0EA06_ae;
    int auto72A0EA06_ai;
    int auto7E5546BA_ae;
    int auto7E5546BA_ai;
    int autoCE8C9321_ae;
    int autoCE8C9321_ai;
    int auto6C89DB5E_ae;
    int auto6C89DB5E_ai;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 3;

    // Implementation
    auto72A0EA06_ae = CatalogEntryCount(c_gameCatalogMap);
    auto72A0EA06_ai = 1;
    while (auto72A0EA06_ai <= auto72A0EA06_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto72A0EA06_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lv_indexMission == lib1926661B_gf_CurrentMap())) {
                lv__SectionName = lib1926661B_gf_KC_BankSectionName(null, "MissionBestTime");
                lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, lib1926661B_gf_KC_BankMIssionDifficultyKey(lv_indexMission, PlayerDifficulty(1)), lib1926661B_gf_MissionCompleteBestTime(lv_indexMission, PlayerDifficulty(1)), 0);
            }

        }
        auto72A0EA06_ai = auto72A0EA06_ai + 1;
    }
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_bankMap, "MissionObjectives");
    if ((lp_isSimulation == true)) {
        if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindUpgrade) == true) && (lib1926661B_gf_MissionStatusAge(lib1926661B_gf_CurrentMap(), lib1926661B_ge_MissionStatus_Completed) != 0)) {
            lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_bankMap, "MissionCompletedAge");
            lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, lib1926661B_gf_KC_StoryMapBankID(lib1926661B_gf_CurrentMap()), lib1926661B_gf_MissionStatusAge(lib1926661B_gf_CurrentMap(), lib1926661B_ge_MissionStatus_Completed), 0);
            lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_bankMap, "MissionAvailableAge");
            lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, lib1926661B_gf_KC_StoryMapBankID(lib1926661B_gf_CurrentMap()), lib1926661B_gf_MissionStatusAge(lib1926661B_gf_CurrentMap(), lib1926661B_ge_MissionStatus_Available), 0);
        }

        return ;
    }

    lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_bankMap, "MissionAvailableAge");
    auto7E5546BA_ae = CatalogEntryCount(c_gameCatalogMap);
    auto7E5546BA_ai = 1;
    while (auto7E5546BA_ai <= auto7E5546BA_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto7E5546BA_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, lib1926661B_gf_KC_StoryMapBankID(lv_indexMission), lib1926661B_gf_MissionStatusAge(lv_indexMission, lib1926661B_ge_MissionStatus_Available), 0);
        }
        auto7E5546BA_ai = auto7E5546BA_ai + 1;
    }
    autoCE8C9321_ae = CatalogEntryCount(c_gameCatalogMap);
    autoCE8C9321_ai = 1;
    while (autoCE8C9321_ai <= autoCE8C9321_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoCE8C9321_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, lib1926661B_gf_KC_StoryMapBankID(lv_indexMission), lib1926661B_gf_MissionStatusAge(lv_indexMission, lib1926661B_ge_MissionStatus_Available), 0);
        }
        autoCE8C9321_ai = autoCE8C9321_ai + 1;
    }
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_bankMap, "MissionCompletedAge");
    auto6C89DB5E_ae = CatalogEntryCount(c_gameCatalogMap);
    auto6C89DB5E_ai = 1;
    while (auto6C89DB5E_ai <= auto6C89DB5E_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto6C89DB5E_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, lib1926661B_gf_KC_StoryMapBankID(lv_indexMission), lib1926661B_gf_MissionStatusAge(lv_indexMission, lib1926661B_ge_MissionStatus_Completed), 0);
        }
        auto6C89DB5E_ai = auto6C89DB5E_ai + 1;
    }
}

void lib1926661B_gf_KC_LoadMapFromBank (string lp_bankMap, bank lp_sourceBank) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int autoFF84D179_ae;
    int autoFF84D179_ai;
    int autoEF0E26DA_ae;
    int autoEF0E26DA_ai;
    int autoFD6CFF07_ae;
    int autoFD6CFF07_ai;
    int autoF61805E8_ae;
    int autoF61805E8_ai;
    int autoF4A6A1CE_ae;
    int autoF4A6A1CE_ai;
    int auto575851C8_ae;
    int auto575851C8_ai;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((lp_bankMap == null)) {
        lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_bankMap, "MissionAvailableAge");
        autoEF0E26DA_ae = CatalogEntryCount(c_gameCatalogMap);
        autoEF0E26DA_ai = 1;
        while (autoEF0E26DA_ai <= autoEF0E26DA_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoEF0E26DA_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                lib1926661B_gf_KC_SetMissionStatusAge(lv_indexMission, lib1926661B_ge_MissionStatus_Available, lib1926661B_gf_KC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, lib1926661B_gf_KC_StoryMapBankID(lv_indexMission), 0));
            }
            autoEF0E26DA_ai = autoEF0E26DA_ai + 1;
        }
        lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_bankMap, "MissionCompletedAge");
        autoFD6CFF07_ae = CatalogEntryCount(c_gameCatalogMap);
        autoFD6CFF07_ai = 1;
        while (autoFD6CFF07_ai <= autoFD6CFF07_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFD6CFF07_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                lib1926661B_gf_KC_SetMissionStatusAge(lv_indexMission, lib1926661B_ge_MissionStatus_Completed, lib1926661B_gf_KC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, lib1926661B_gf_KC_StoryMapBankID(lv_indexMission), 0));
                DataTableSetInt(true, ("ZPrevStatus_" + (lv_indexMission)), lib1926661B_gf_MissionStatusAge(lv_indexMission, lib1926661B_ge_MissionStatus_Completed));
            }
            autoFD6CFF07_ai = autoFD6CFF07_ai + 1;
        }
        if ((lib1926661B_gf_NumberOfMissions(lib1926661B_ge_MissionCountOptions_Completed) == lib1926661B_gf_NumberOfMissions(lib1926661B_ge_MissionCountOptions_All))) {
            lib1926661B_gv_kC_InCompletedCampaign = true;
        }

        lv__SectionName = lib1926661B_gf_KC_BankSectionName(null, "MissionBestTime");
        autoF61805E8_ae = CatalogEntryCount(c_gameCatalogMap);
        autoF61805E8_ai = 1;
        while (autoF61805E8_ai <= autoF61805E8_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF61805E8_ai);
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                lib1926661B_gf_KC_SetMissionCompletionBestTime(lv_indexMission, 2, lib1926661B_gf_KC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, lib1926661B_gf_KC_BankMIssionDifficultyKey(lv_indexMission, 2), 0));
                lib1926661B_gf_KC_SetMissionCompletionBestTime(lv_indexMission, 3, lib1926661B_gf_KC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, lib1926661B_gf_KC_BankMIssionDifficultyKey(lv_indexMission, 3), 0));
            }
            autoF61805E8_ai = autoF61805E8_ai + 1;
        }
        lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_bankMap, "MissionObjectives");
        autoF4A6A1CE_ae = CatalogEntryCount(c_gameCatalogObjective);
        autoF4A6A1CE_ai = 1;
        while (autoF4A6A1CE_ai <= autoF4A6A1CE_ae) {
            lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoF4A6A1CE_ai);
            if ((lib1926661B_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                UserDataLoadInstance("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
            }

            autoF4A6A1CE_ai = autoF4A6A1CE_ai + 1;
        }
        auto575851C8_ae = CatalogFieldValueCount(c_gameCatalogMap, lib1926661B_gf_CurrentMap(), "ObjectiveArray", 1);
        auto575851C8_ai = 1;
        while (auto575851C8_ai <= auto575851C8_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lib1926661B_gf_CurrentMap(), "ObjectiveArray["+IntToString(auto575851C8_ai-1)+"]", 1);
            if ((lib1926661B_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                lib1926661B_gf_KC_MissionObjectivePreviousProgressSet(lv_indexObjective, lib1926661B_gf_MissionObjectiveProgress(lv_indexObjective));
            }

            auto575851C8_ai = auto575851C8_ai + 1;
        }
    }
    else {
        if ((lib1926661B_gv_kC_InCompletedCampaign == false)) {
            lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_bankMap, "MissionObjectives");
            autoFF84D179_ae = CatalogEntryCount(c_gameCatalogObjective);
            autoFF84D179_ai = 1;
            while (autoFF84D179_ai <= autoFF84D179_ae) {
                lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoFF84D179_ai);
                if ((lib1926661B_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                    UserDataResetInstance("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lv_indexObjective));
                    UserDataLoadInstance("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
                }

                autoFF84D179_ai = autoFF84D179_ai + 1;
            }
        }

    }
}

void lib1926661B_gf_UEDFL_InitMaps () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M00";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M01";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M02_1";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M02_2";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M03";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M04";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M05";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M06";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M07";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M08";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M09";
    lv_i += 1;
    lib1926661B_gv_UEDFL_Maps[lv_i] = "UEDFL_EP01M10";
    lv_i += 1;
}

int lib1926661B_gf_KC_GetObjectiveForData (string lp_objectiveData) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetObjective(true, lib1926661B_gf_KC_ObjectiveTableString(lp_objectiveData));
}

string lib1926661B_gf_KC_ObjectiveUserDataInstance (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "UserReference", 1));
}

text lib1926661B_gf_MissionObjectiveDescription (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Description", c_playerAny));
}

bool lib1926661B_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 1) && (lp_state == lib1926661B_ge_MissionObjectiveState_Available)) {
        return true;
    }

    if ((UserDataGetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 1) && (lp_state == lib1926661B_ge_MissionObjectiveState_Completed)) {
        return true;
    }

    if ((lp_state == lib1926661B_ge_MissionObjectiveState_Undiscovered) && (ObjectiveGetState(lib1926661B_gf_KC_GetObjectiveForData(lp_objective)) == c_objectiveStateHidden)) {
        return true;
    }

    if ((lp_state == lib1926661B_ge_MissionObjectiveState_Failed) && (ObjectiveGetState(lib1926661B_gf_KC_GetObjectiveForData(lp_objective)) == c_objectiveStateFailed)) {
        return true;
    }

    return false;
}

bool lib1926661B_gf_MissionObjectiveIsPrimary (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1926661B_gf_KC_GetObjectiveTypeInteger(lp_objective) == c_objectiveTypePrimary);
}

text lib1926661B_gf_MissionObjectiveName (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Name", c_playerAny));
}

int lib1926661B_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_MissionObjectiveIsPrimary(lp_objective) == true)) {
        return 0;
    }

    if ((lib1926661B_gf_KC_ObjectiveRewardDivided(lp_objective) == false)) {
        if ((lib1926661B_gf_MissionObjectiveProgress(lp_objective) == lib1926661B_gf_MissionObjectiveItemCount(lp_objective))) {
            return lib1926661B_gf_MissionObjectiveRewards(lp_objective, lp_type);
        }
        else {
            return 0;
        }
    }

    return (lib1926661B_gf_MissionObjectiveRewards(lp_objective, lp_type) * lib1926661B_gf_MissionObjectiveProgress(lp_objective));
}

int lib1926661B_gf_MissionObjectiveRewardsAvailable (string lp_objective, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_KC_ObjectiveRewardDivided(lp_objective) == false)) {
        return (lib1926661B_gf_MissionObjectiveRewards(lp_objective, lp_type) - lib1926661B_gf_MissionObjectiveRewardsEarned(lp_objective, lp_type));
    }

    return (((lib1926661B_gf_MissionObjectiveRewards(lp_objective, lp_type)*lib1926661B_gf_MissionObjectiveItemCount(lp_objective))) - lib1926661B_gf_MissionObjectiveRewardsEarned(lp_objective, lp_type));
}

int lib1926661B_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_KC_ObjectiveRewardDivided(lp_objective) == false)) {
        return lib1926661B_gf_MissionObjectiveRewards(lp_objective, lp_type);
    }

    return ((lib1926661B_gf_MissionObjectiveRewards(lp_objective, lp_type)*lib1926661B_gf_MissionObjectiveItemCount(lp_objective)));
}

int lib1926661B_gf_MissionObjectiveItemCount (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "RequiredCount", 1);
}

int lib1926661B_gf_MissionObjectiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
}

int lib1926661B_gf_MissionObjectiveRewards (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return 0;
}

int lib1926661B_gf_KC_MissionObjectivePreviousProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("ZC_PrvObj_" + (lp_objective)));
}

int lib1926661B_gf_KC_GetObjectiveTypeInteger (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return c_objectiveTypePrimary;
    }
    else {
        return c_objectiveTypeOptional;
    }
}

bool lib1926661B_gf_KC_GetObjectiveTypeBoolean (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1926661B_gf_KC_AllObjectivesCompletedForMission (string lp_mission) {
    // Variable Declarations
    string lv_obj;

    // Automatic Variable Declarations
    int autoFD69D482_ae;
    int autoFD69D482_ai;

    // Variable Initialization

    // Implementation
    autoFD69D482_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    autoFD69D482_ai = 1;
    while (autoFD69D482_ai <= autoFD69D482_ae) {
        lv_obj = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(autoFD69D482_ai-1)+"]", 1);
        if ((ObjectiveGetState(lib1926661B_gf_KC_GetObjectiveForData(lv_obj)) != c_objectiveStateCompleted)) {
            return false;
        }

        autoFD69D482_ai = autoFD69D482_ai + 1;
    }
    return true;
}

bool lib1926661B_gf_KC_ObjectiveRewardDivided (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "RewardWhole", 1) == 0);
}

string lib1926661B_gf_KC_ObjectiveTableString (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return ("KC_Obj_" + (lp_objective));
}

text lib1926661B_gf_KC_CampaignObjectiveBonusText (string lp_objective) {
    // Variable Declarations
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bonusText = UserDataGetText("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "RewardText", 1);
    return lv_bonusText;
}

void lib1926661B_gf_SetMissionObjectiveProgress2 (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label, bool lp_updatetext) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1926661B_gf_KC_MissionObjectiveProgressDataSet(lp_objective, lp_current, true);
    if ((lp_updatetext == false)) {
        return ;
    }

    lib1926661B_gf_UpdateMissionObjectiveText(lp_objective, lp_current, lp_showHideMax, lp_label);
}

void lib1926661B_gf_SetMissionObjectiveProgressAdvanced (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label, bool lp_updatetext, bool lp_updateObjectiveStateOption) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;
    bool lv_updateObjective;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_updateObjectiveStateOption == true)) {
        lv_updateObjective = true;
    }
    else {
        lv_updateObjective = false;
    }
    lib1926661B_gf_KC_MissionObjectiveProgressDataSet(lp_objective, lp_current, lv_updateObjective);
    if ((lp_updatetext == false)) {
        return ;
    }

    lib1926661B_gf_UpdateMissionObjectiveText(lp_objective, lp_current, lp_showHideMax, lp_label);
}

void lib1926661B_gf_UpdateMissionObjectiveText (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_name = lib1926661B_gf_MissionObjectiveName(lp_objective);
    if ((lib1926661B_gf_MissionObjectiveStateCheck(lp_objective, lib1926661B_ge_MissionObjectiveState_Completed) == false)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_1D409BFB", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_1926661B_1D409BFB", "B", StringToText(("ObjectivePanelProgress_Protoss")));
        lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_1D409BFB");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1926661B_DC150B08", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_DC150B08");
    }
    TextExpressionSetToken("Param/Expression/lib_1926661B_7EAE4F74", "A", lv_name);
    TextExpressionSetToken("Param/Expression/lib_1926661B_7EAE4F74", "B", IntToText(lp_current));
    lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_7EAE4F74");
    if ((lp_showHideMax != false)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_A25AEEB9", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_1926661B_A25AEEB9", "B", IntToText(lib1926661B_gf_MissionObjectiveItemCount(lp_objective)));
        lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_A25AEEB9");
    }

    if ((lp_label != null)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_B75FC165", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_1926661B_B75FC165", "B", lp_label);
        lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_B75FC165");
    }

    TextExpressionSetToken("Param/Expression/lib_1926661B_F3369DF0", "A", lv_name);
    lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_F3369DF0");
    lv_bonusText = lib1926661B_gf_KC_CampaignObjectiveBonusText(lp_objective);
    if (((lv_bonusText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_F19B810A", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_1926661B_F19B810A", "B", lv_bonusText);
        lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_F19B810A");
    }

    if ((lib1926661B_gf_MissionObjectiveStateCheck(lp_objective, lib1926661B_ge_MissionObjectiveState_Completed) == false)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_484CBB38", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_484CBB38");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1926661B_0334FCBD", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_0334FCBD");
    }
    ObjectiveSetName(DataTableGetObjective(true, lib1926661B_gf_KC_ObjectiveTableString(lp_objective)), lv_name);
}

void lib1926661B_gf_CreateObjectiveCampaign (string lp_objectiveData) {
    // Variable Declarations
    bool lv_isPrimary;
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_name = lib1926661B_gf_MissionObjectiveName(lp_objectiveData);
    lv_bonusText = lib1926661B_gf_KC_CampaignObjectiveBonusText(lp_objectiveData);
    if (((lv_bonusText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_1926661B_7C1B795A", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_1926661B_7C1B795A");
    }

    ObjectiveCreate(lv_name, lib1926661B_gf_MissionObjectiveDescription(lp_objectiveData), c_objectiveStateActive, lib1926661B_gf_KC_GetObjectiveTypeBoolean(lp_objectiveData));
    DataTableSetObjective(true, lib1926661B_gf_KC_ObjectiveTableString(lp_objectiveData), ObjectiveLastCreated());
    lib1926661B_gf_KC_MissionObjectiveProgressDataSet(lp_objectiveData, 0, false);
}

void lib1926661B_gf_SetObjectiveStateCampaign (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    int autoCE66EC0D_val;

    // Implementation
    autoCE66EC0D_val = lp_state;
    if (autoCE66EC0D_val == lib1926661B_ge_MissionObjectiveState_Available) {
        UserDataSetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Available", 1, 1);
        UserDataSetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, lib1926661B_gf_KC_ObjectiveTableString(lp_objective)), c_objectiveStateActive);
    }
    else if (autoCE66EC0D_val == lib1926661B_ge_MissionObjectiveState_Completed) {
        UserDataSetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 1);
        UserDataSetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        UserDataSetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Progress", 1, lib1926661B_gf_MissionObjectiveItemCount(lp_objective));
        ObjectiveSetState(DataTableGetObjective(true, lib1926661B_gf_KC_ObjectiveTableString(lp_objective)), c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/lib_1926661B_DF210163", "A", ObjectiveGetName(DataTableGetObjective(true, lib1926661B_gf_KC_ObjectiveTableString(lp_objective))));
        ObjectiveSetName(DataTableGetObjective(true, lib1926661B_gf_KC_ObjectiveTableString(lp_objective)), TextExpressionAssemble("Param/Expression/lib_1926661B_DF210163"));
    }
    else if (autoCE66EC0D_val == lib1926661B_ge_MissionObjectiveState_Undiscovered) {
        ObjectiveSetState(DataTableGetObjective(true, lib1926661B_gf_KC_ObjectiveTableString(lp_objective)), c_objectiveStateHidden);
    }
    else if (autoCE66EC0D_val == lib1926661B_ge_MissionObjectiveState_Failed) {
        UserDataSetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, lib1926661B_gf_KC_ObjectiveTableString(lp_objective)), c_objectiveStateFailed);
    }
    else {
    }
}

void lib1926661B_gf_KC_MissionObjectiveProgressDataSet (string lp_objective, int lp_progress, bool lp_updateObjectiveState) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("MissionObjective", lib1926661B_gf_KC_ObjectiveUserDataInstance(lp_objective), "Progress", 1, lp_progress);
    if ((lp_updateObjectiveState == true) && (lp_progress == lib1926661B_gf_MissionObjectiveItemCount(lp_objective))) {
        lib1926661B_gf_SetObjectiveStateCampaign(lp_objective, lib1926661B_ge_MissionObjectiveState_Completed);
    }

}

void lib1926661B_gf_KC_MissionObjectivePreviousProgressSet (string lp_objective, int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, ("ZC_PrvObj_" + (lp_objective)), lp_progress);
}

void lib1926661B_gf_DisplayConversationTimestamp (string lp_conversation) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto075F95F9_ae;
    const int auto075F95F9_ai = 1;

    // Variable Initialization

    // Implementation
    auto075F95F9_ae = UserDataInstanceCount("ConversationTimestamps");
    lv_index = 1;
    for ( ; ( (auto075F95F9_ai >= 0 && lv_index <= auto075F95F9_ae) || (auto075F95F9_ai < 0 && lv_index >= auto075F95F9_ae) ) ; lv_index += auto075F95F9_ai ) {
        if ((UserDataGetGameLink("ConversationTimestamps", UserDataInstance("ConversationTimestamps", lv_index), "Conversation", 1) == lp_conversation)) {
            if ((UserDataGetInt("ConversationTimestamps", UserDataInstance("ConversationTimestamps", lv_index), "Wait", 1) == 1)) {
                lib1926661B_gf_DisplayTimestamp(UserDataInstance("ConversationTimestamps", lv_index), true);
            }
            else {
                lib1926661B_gf_DisplayTimestamp(UserDataInstance("ConversationTimestamps", lv_index), false);
            }
            return ;
        }

    }
}

void lib1926661B_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait) {
    // Variable Declarations
    bool lv_cinematicOn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, false);
    lib1926661B_gv_kC_CutsceneTimestamp = lp_timestamp;
    if ((lp_waitDontWait == true)) {
        lv_cinematicOn = libNtve_gf_PlayerInCinematicMode(1);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        }

        UISetWorldVisible(PlayerGroupAll(), false);
        TriggerExecute(lib1926661B_gt_DisplayTimestampSkippable, true, true);
        UIHideTextCrawl(PlayerGroupAll());
        Wait(0.625, c_timeGame);
        UISetWorldVisible(PlayerGroupAll(), true);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        }

    }
    else {
        TriggerExecute(lib1926661B_gt_DisplayTimestamp, true, false);
    }
}

void lib1926661B_gf_HaltTimestamp () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(lib1926661B_gt_DisplayTimestampSkippable);
    TriggerStop(lib1926661B_gt_DisplayTimestamp);
    UIHideTextCrawl(PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), true);
}

void lib1926661B_gf_KC_DisplayCinematicTimestamp (string lp_scene) {
    // Automatic Variable Declarations
}

void lib1926661B_gf_PlayCinematic (string lp_scene, bool lp_animatic) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_KC_CinematicCutscene(lp_scene) != null) && (lp_animatic == false)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
        lib1926661B_gf_KC_DisplayCinematicTimestamp(lp_scene);
        lib1926661B_gf_CampaignPlayCutscene(lib1926661B_gf_KC_CinematicCutscene(lp_scene), Point(64.0, 64.0), true, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        return ;
    }

    if ((lib1926661B_gf_KC_SceneMovie(lp_scene) != null)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
        lib1926661B_gf_MuteUnmuteAllSoundChannels(true, c_soundCategoryMovie, PlayerGroupAll());
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, false);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, false);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryOther, false);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
        lib1926661B_gv_kC_PlaySceneCurrentScene = lp_scene;
        lib1926661B_gf_KC_DisplayCinematicTimestamp(lp_scene);
        TriggerExecute(lib1926661B_gt_KC_PlayCinematicSkippable, true, true);
        lib1926661B_gf_HaltTimestamp();
        TransmissionClearAll();
        lib1926661B_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
        lib1926661B_gf_MuteUnmuteAllSoundChannels(false, c_soundCategoryMovie, PlayerGroupAll());
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        return ;
    }

}

string lib1926661B_gf_KC_CinematicCutscene (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetString("Scenes", lp_scene, "Cutscene", 1));
}

void lib1926661B_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_kC_CampaignCutsceneSkipped = false;
    CutsceneCreateNew(lp_file, lp_position, 0.0, PlayerGroupAll(), true);
    lib1926661B_gv_kC_CurrentCampaignCutscene = CutsceneLastCreated();
    lib1926661B_gv_kC_CampaignCutsceneSkippable = (lp_allowSkip == true);
    TriggerExecute(lib1926661B_gt_KC_WaitForCutscene, true, lp_waitDontWait);
}

void lib1926661B_gf_CampaignPlayCutscene2 (string lp_file, bool lp_waitDontWait, bool lp_allowSkip) {
    // Variable Declarations
    string lv_recordingName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_recordingName = "";

    // Implementation
    lib1926661B_gv_kC_CampaignCutsceneSkipped = false;
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1926661B_gv_kC_CampaignCutsceneDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), lp_file, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
    lib1926661B_gv_kC_CurrentCampaignCutscene = CutsceneGetTriggerControl(DialogControlLastCreated());
    lib1926661B_gv_kC_CampaignCutsceneSkippable = (lp_allowSkip == true);
    lv_recordingName = (lv_recordingName + ".ogg");
    CutscenePlay(lib1926661B_gv_kC_CurrentCampaignCutscene);
    TriggerExecute(lib1926661B_gt_KC_WaitForDialogCutscene, true, lp_waitDontWait);
    DialogDestroy(lib1926661B_gv_kC_CampaignCutsceneDialog);
    lib1926661B_gv_kC_CampaignCutsceneDialog = c_invalidDialogId;
    TransmissionClearAll();
}

bool lib1926661B_gf_CampaignCutsceneWasSkipped () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_kC_CampaignCutsceneSkipped;
}

void lib1926661B_gf_SetStoryScenePlayed (string lp_scene, bool lp_played) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_played == true)) {
        UserDataSetInt("Scenes", lp_scene, "played", 1, 1);
    }
    else {
        UserDataSetInt("Scenes", lp_scene, "played", 1, 0);
    }
}

void lib1926661B_gf_KC_FadeAllSoundsExceptMusic (fixed lp_duration, bool lp_wait) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

text lib1926661B_gf_StorySceneName (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Scenes", lp_scene, "Name", 1);
}

bool lib1926661B_gf_StoryScenePlayed (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Scenes", lp_scene, "played", 1) > 0);
}

string lib1926661B_gf_KC_SceneMovie (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetMovie("Scenes", lp_scene, "movie", 1);
}

void lib1926661B_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", 1, 1);
    }
    else {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", 1, 0);
    }
    lv_armyCategory = lib1926661B_gf_KC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        lib1926661B_gf_KC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyCategory, (lv_armyCategory), null, null, lp_player);
    }

    lib1926661B_gf_KC_UpdateWeaponArmorUpgrades(lp_player);
    if ((lib1926661B_gf_KC_MissionisInstallation(lib1926661B_gf_CurrentMap()) == false)) {
        if ((lp_enableDisable == true)) {
            if ((lib1926661B_gv_kC_ApplyingCampaignTech == true)) {
                lib1926661B_gf_AddUnitTypeToUnitHelpPanel(lib1926661B_gf_KC_CampaignTechUnitType(lp_techUnit), true, lp_player);
            }
            else {
                lib1926661B_gf_AddUnitTypeToUnitHelpPanel(lib1926661B_gf_KC_CampaignTechUnitType(lp_techUnit), false, lp_player);
            }
        }
        else {
            TechTreeUnitHelp(lp_player, lib1926661B_gf_KC_CampaignTechUnitType(lp_techUnit), false);
        }
    }

}

bool lib1926661B_gf_CampaignTechUnitIsEnabled (string lp_techUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", lp_techUnit, "Enabled", 1) > 0);
}

string lib1926661B_gf_KC_CampaignTechUnitType (string lp_techUnit) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_armyCategory = lib1926661B_gf_KC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        return lib1926661B_gf_KC_StoryArmyCategoryUnitType(lv_armyCategory);
    }

    return null;
}

void lib1926661B_gf_KC_UpdateWeaponArmorUpgrades (int lp_player) {
    // Variable Declarations
    bool lv_meleeWeapon1;
    bool lv_meleeWeapon2;
    bool lv_meleeWeapon3;
    bool lv_rangeWeapon1;
    bool lv_rangeWeapon2;
    bool lv_rangeWeapon3;
    bool lv_groundArmor1;
    bool lv_groundArmor2;
    bool lv_groundArmor3;
    bool lv_flyerWeapon1;
    bool lv_flyerWeapon2;
    bool lv_flyerWeapon3;
    bool lv_flyerArmor1;
    bool lv_flyerArmor2;
    bool lv_flyerArmor3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_meleeWeapon1 = true;
    lv_meleeWeapon2 = true;
    lv_meleeWeapon3 = true;
    lv_rangeWeapon1 = true;
    lv_rangeWeapon2 = true;
    lv_rangeWeapon3 = true;
    lv_groundArmor1 = true;
    lv_groundArmor2 = true;
    lv_groundArmor3 = true;
    lv_flyerWeapon1 = true;
    lv_flyerWeapon2 = true;
    lv_flyerWeapon3 = true;
    lv_flyerArmor1 = true;
    lv_flyerArmor2 = true;
    lv_flyerArmor3 = true;

    // Implementation
    lv_groundArmor1 = true;
    lv_rangeWeapon3 = false;
    lv_rangeWeapon2 = false;
    lv_rangeWeapon1 = true;
    lv_meleeWeapon3 = false;
    lv_meleeWeapon2 = false;
    lv_meleeWeapon1 = true;
    lv_groundArmor3 = false;
    lv_groundArmor2 = false;
    lv_flyerWeapon3 = false;
    lv_flyerWeapon2 = false;
    lv_flyerWeapon1 = false;
    lv_flyerArmor3 = false;
    lv_flyerArmor2 = false;
    lv_flyerArmor1 = false;
    if (((lib1926661B_gf_CampaignTechUnitIsEnabled("Phoenix") == true) || (lib1926661B_gf_CampaignTechUnitIsEnabled("VoidRay") == true) || (lib1926661B_gf_CampaignTechUnitIsEnabled("Carrier") == true) || (lib1926661B_gf_CampaignTechUnitIsEnabled("Tempest") == true) || (lib1926661B_gf_CampaignTechUnitIsEnabled("Oracle") == true))) {
        lv_flyerArmor1 = true;
    }

    lv_flyerWeapon1 = lv_flyerArmor1;
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 0), lv_meleeWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 3), lv_groundArmor1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), lv_rangeWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 0), lv_flyerWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 3), lv_flyerArmor1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 1), lv_meleeWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 4), lv_groundArmor2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), lv_rangeWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 1), lv_flyerWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 4), lv_flyerArmor2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 2), lv_meleeWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 5), lv_groundArmor3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), lv_rangeWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 2), lv_flyerWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 5), lv_flyerArmor3);
}

void lib1926661B_gf_KC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_indexUpgrade;
    int lv_index;
    int lv_unitIndex;
    string lv_upgrade;
    abilcmd lv_abilityCommand;
    string lv_uField;
    string lv_aField;

    // Automatic Variable Declarations
    int auto62CDBCA3_ae;
    const int auto62CDBCA3_ai = 1;
    int auto68552800_ae;
    const int auto68552800_ai = 1;

    // Variable Initialization
    lv_uField = "";
    lv_aField = "";

    // Implementation
    if ((lp_upgradeField == null)) {
        lv_uField = "UpgradeArray";
    }
    else {
        lv_uField = lp_upgradeField;
    }
    if ((lp_abilCommandField == null)) {
        lv_aField = "AbilCommandArray";
    }
    else {
        lv_aField = lp_abilCommandField;
    }
    auto62CDBCA3_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_uField, 1);
    lv_index = 1;
    for ( ; ( (auto62CDBCA3_ai >= 0 && lv_index <= auto62CDBCA3_ae) || (auto62CDBCA3_ai < 0 && lv_index >= auto62CDBCA3_ae) ) ; lv_index += auto62CDBCA3_ai ) {
        lv_upgrade = (lib1926661B_gf_KC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_uField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 0);
        }
    }
    auto68552800_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_aField, 1);
    lv_index = 1;
    for ( ; ( (auto68552800_ai >= 0 && lv_index <= auto68552800_ae) || (auto68552800_ai < 0 && lv_index >= auto68552800_ae) ) ; lv_index += auto68552800_ai ) {
        lv_abilityCommand = StringToAbilCmd(lib1926661B_gf_KC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, true);
        }
        else {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, false);
        }
    }
}

void lib1926661B_gf_KC_ApplyTech (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_index;
    string lv_indexTechUnit;
    bool lv_morphedUnitPanelEnabled;
    string lv_unitType;
    string lv_abilType;

    // Automatic Variable Declarations
    int auto5AB05DA9_catalog;
    int auto5AB05DA9_i;
    int autoA15CDC86_catalog;
    int autoA15CDC86_i;
    playergroup auto29524B7D_g;

    // Variable Initialization

    // Implementation
    lib1926661B_gv_kC_ApplyingCampaignTech = true;
    TechTreeRestrictionsEnable(lp_player, true);
    auto5AB05DA9_catalog = c_gameCatalogUnit;
    auto5AB05DA9_i = 1;
    for ( ; auto5AB05DA9_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto5AB05DA9_i += 1 ) {
        lv_unitType = CatalogEntryGet(auto5AB05DA9_catalog, auto5AB05DA9_i);
        if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Race", 1), "UPL", c_stringAnywhere, c_stringNoCase) == true)) {
            TechTreeUnitAllow(1, lv_unitType, true);
        }
    }
    autoA15CDC86_catalog = c_gameCatalogAbil;
    autoA15CDC86_i = 1;
    for ( ; autoA15CDC86_i <= CatalogEntryCount(c_gameCatalogAbil) ; autoA15CDC86_i += 1 ) {
        lv_abilType = CatalogEntryGet(autoA15CDC86_catalog, autoA15CDC86_i);
        if ((StringContains(CatalogFieldValueGet(c_gameCatalogAbil, lv_abilType, "EditorCategories", 1), "UPL", c_stringAnywhere, c_stringNoCase) == true)) {
            TechTreeAbilityAllow(1, AbilityCommand(lv_abilType, 0), true);
        }
    }
    lib1926661B_gv_kC_ApplyingCampaignTech = false;
    if ((lp_player == 1)) {
        lib1926661B_gf_KC_HelpTechTree_UpdatePanel();
        lib1926661B_gf_KC_HelpUnitPanel_UpdatePanel();
    }

    auto29524B7D_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto29524B7D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser) && (PlayerStatus(lv_indexPlayer) == c_playerStatusActive)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "BansheeCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "HunterSeeker", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "YamatoCannon", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "ReaperSpeed", 1);
        }

    }
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 2), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 1), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 0), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 3), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 4), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 5), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 6), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 7), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 8), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 9), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 10), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLRnDFacilityResearch", 11), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLManufacturingFacilityResearch", 1), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLBilletResearch", 1), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLAirstripResearch", 2), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLAirstripResearch", 1), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLAirstripResearch", 0), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLForwardOperatingBaseResearch", 2), true);
    TechTreeAbilityAllow(1, AbilityCommand("UPLForwardOperatingBaseResearch", 1), true);
    TechTreeUnitHelp(1, "KatherineHalsey", false);
    TechTreeUnitHelp(1, "KatherineHalseyElder", false);
    TechTreeUnitHelp(1, "KatherineHalseyPistol", false);
    TechTreeUnitHelp(1, "AltonPetersZ1", false);
    TechTreeUnitHelp(1, "RichardGideon", false);
    TechTreeUnitHelp(1, "WilliamGraves", false);
    TechTreeUnitHelp(1, "UPLSpecOps", false);
    TechTreeUnitHelp(1, "MyraDavisOfficer", false);
    TechTreeUnitHelp(1, "MyraDavisRiotOfficer", false);
    TechTreeUnitHelp(1, "TrevorRand", false);
    TechTreeUnitHelp(1, "LillyRollins", false);
    TechTreeUnitHelp(1, "CARR", false);
    TechTreeUnitHelp(1, "AltonPeters", false);
    TechTreeUnitHelp(1, "RileyJerico", false);
    TechTreeUnitHelp(1, "UPLScout", false);
    TechTreeUnitHelp(1, "UPLDetectiveFemale", false);
    TechTreeUnitHelp(1, "UPLDetectiveMale", false);
    TechTreeUnitHelp(1, "UPLRiotOfficer", false);
    TechTreeUnitHelp(1, "UPLPoliceOfficer", false);
    TechTreeUnitHelp(1, "AnimalControl", false);
    TechTreeUnitHelp(1, "UPLAnimalControlOfficer", false);
    TechTreeUnitHelp(1, "UPLCivilianFemale", false);
    TechTreeUnitHelp(1, "UPLCivilianMale", false);
    TechTreeUnitHelp(1, "UPLEngineer", false);
    TechTreeUnitHelp(1, "SwatVan", false);
    TechTreeUnitHelp(1, "APC", false);
}

void lib1926661B_gf_KC_UpdateGlossary (string lp_map, int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_index;
    string lv_indexTechUnit;
    bool lv_morphedUnitPanelEnabled;
    string lv_unitType;
    string lv_abilType;
    string lv_indexMission;
    int lv_i;

    // Automatic Variable Declarations
    int auto6E9F1765_catalog;
    int auto6E9F1765_i;
    const int auto8C323E3B_ae = lib1926661B_gv_UEDFL_MapCount;
    const int auto8C323E3B_ai = 1;

    // Variable Initialization
    lv_indexPlayer = lp_player;

    // Implementation
    auto6E9F1765_catalog = c_gameCatalogUnit;
    auto6E9F1765_i = 1;
    for ( ; auto6E9F1765_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto6E9F1765_i += 1 ) {
        lv_unitType = CatalogEntryGet(auto6E9F1765_catalog, auto6E9F1765_i);
        TechTreeUnitHelp(lv_indexPlayer, lv_unitType, false);
    }
    lv_i = 0;
    for ( ; ( (auto8C323E3B_ai >= 0 && lv_i <= auto8C323E3B_ae) || (auto8C323E3B_ai < 0 && lv_i >= auto8C323E3B_ae) ) ; lv_i += auto8C323E3B_ai ) {
        lv_indexMission = lib1926661B_gv_UEDFL_Maps[lv_i];
        if ((lv_indexMission == "UEDFL_EP01M00")) {
            TechTreeUnitHelp(lv_indexPlayer, "InfantryRifle", true);
        }
        else if ((lv_indexMission == "UEDFL_EP01M01")) {
            TechTreeUnitHelp(lv_indexPlayer, "UPLGenerator", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLBillet", true);
            TechTreeUnitHelp(lv_indexPlayer, "InfantryHeavy", true);
            TechTreeUnitHelp(lv_indexPlayer, "InfantryFlamethrower", true);
            TechTreeUnitHelp(lv_indexPlayer, "LillyRollins", true);
            TechTreeUnitHelp(lv_indexPlayer, "CARR", true);
            TechTreeUnitHelp(lv_indexPlayer, "AltonPeters", true);
            TechTreeUnitHelp(lv_indexPlayer, "TrevorRand", true);
            TechTreeUnitHelp(lv_indexPlayer, "HazmatTechnician", true);
        }
        else if ((lv_indexMission == "UEDFL_EP01M02_1")) {
            TechTreeUnitHelp(lv_indexPlayer, "MyraDavisOfficer", true);
            TechTreeUnitHelp(lv_indexPlayer, "AltonPetersZ1", true);
        }
        else if ((lv_indexMission == "UEDFL_EP01M02_2")) {
            TechTreeUnitHelp(lv_indexPlayer, "MyraDavisRiotOfficer", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLPoliceOfficer", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLRiotOfficer", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLEngineer", true);
            TechTreeUnitHelp(lv_indexPlayer, "DeniseAllisterRiotOfficer", true);
            TechTreeUnitHelp(lv_indexPlayer, "RusellPeters", true);
            TechTreeUnitHelp(lv_indexPlayer, "DarrenRodgers", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLPoliceCruiser", true);
            TechTreeUnitHelp(lv_indexPlayer, "APC", true);
        }
        else if ((lv_indexMission == "UEDFL_EP01M03")) {
            TechTreeUnitHelp(lv_indexPlayer, "MiningDrone", true);
            TechTreeUnitHelp(lv_indexPlayer, "InfantryMortar", true);
            TechTreeUnitHelp(lv_indexPlayer, "RoutheTank", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLHeadquarters", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLElectrostaticDefenseTower", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLRnDFacility", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLManufacturingFacility", true);
        }
        else if ((lv_indexMission == "UEDFL_EP01M04")) {
            TechTreeUnitHelp(lv_indexPlayer, "WilliamGraves", true);
            TechTreeUnitHelp(lv_indexPlayer, "RileyJerico", true);
            TechTreeUnitHelp(lv_indexPlayer, "InfantryRocket", true);
            TechTreeUnitHelp(lv_indexPlayer, "CSV", true);
            TechTreeUnitHelp(lv_indexPlayer, "InfantryOfficer", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLForwardOperatingBase", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLExhumer", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLCommStation", true);
        }
        else if ((lv_indexMission == "UEDFL_EP01M05")) {
            TechTreeUnitHelp(lv_indexPlayer, "Osprey", true);
            TechTreeUnitHelp(lv_indexPlayer, "Z1", true);
            TechTreeUnitHelp(lv_indexPlayer, "A6", true);
            TechTreeUnitHelp(lv_indexPlayer, "TR17", true);
        }
        else if ((lv_indexMission == "UEDFL_EP01M06")) {
            TechTreeUnitHelp(lv_indexPlayer, "RaptorJet", true);
            TechTreeUnitHelp(lv_indexPlayer, "Condor", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLAirstrip", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLSolitaire", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLNightjar", true);
        }
        else if ((lv_indexMission == "UEDFL_EP01M07")) {
            TechTreeUnitHelp(lv_indexPlayer, "KatherineHalsey", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLScout", true);
            TechTreeUnitHelp(lv_indexPlayer, "RichardGideon", true);
            TechTreeUnitHelp(lv_indexPlayer, "UPLSpecOps", true);
        }
        else if ((lv_indexMission == "UEDFL_EP01M08")) {
        }
        else if ((lv_indexMission == "UEDFL_EP01M09")) {
        }
        else if ((lv_indexMission == "UEDFL_EP01M10")) {
            TechTreeUnitHelp(lv_indexPlayer, "KatherineHalsey", false);
            TechTreeUnitHelp(lv_indexPlayer, "KatherineHalseyPistol", true);
        }
        else if (true) {
        }
        if ((lv_indexMission == lp_map)) {
            break;
        }
    }
}

void lib1926661B_gf_KC_UpdateTechStates (int lp_player) {
    // Automatic Variable Declarations
}

void lib1926661B_gf_KC_ResetTech () {
    // Automatic Variable Declarations
}

void lib1926661B_gf_KC_StoreTechBonusAtMissionBeginning () {
    // Automatic Variable Declarations
    // Implementation
}

void lib1926661B_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1926661B_C8310DD7", "A", StringToText((lp_unitType)));
    TextExpressionSetToken("Param/Expression/lib_1926661B_C8310DD7", "B", libNtve_gf_ConvertBooleanToText(lp_saveInHistory));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1926661B_C8310DD7"), false);
    TechTreeUnitHelp(lp_player, lp_unitType, true);
    if ((lp_saveInHistory == true)) {
        lib1926661B_gf_KC_HelpUnitPanel_AddEnabledUnitType(lp_unitType);
    }

}

string lib1926661B_gf_KC_HelpUnitPanel_EnabledUnitTypeStringID (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_unitType);
}

bool lib1926661B_gf_KC_HelpUnitPanel_UnitTypeEnabled (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableValueExists(true, lib1926661B_gf_KC_HelpUnitPanel_EnabledUnitTypeStringID(lp_unitType));
}

void lib1926661B_gf_KC_HelpUnitPanel_AddEnabledUnitType (string lp_unitType) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypeCount == lib1926661B_gv_kCC_HelpUnitPanel_EnabledUnitTypeCountMax) || (lib1926661B_gf_KC_HelpUnitPanel_UnitTypeEnabled(lp_unitType) == true))) {
        return ;
    }

    lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypeCount += 1;
    lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypes[lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypeCount] = lp_unitType;
    DataTableSetString(true, lib1926661B_gf_KC_HelpUnitPanel_EnabledUnitTypeStringID(lp_unitType), IntToString(lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypeCount));
}

void lib1926661B_gf_KC_HelpUnitPanel_Reset () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypeCount = 0;
}

void lib1926661B_gf_KC_HelpUnitPanel_UpdatePanel () {
    // Variable Declarations
    int lv_index;
    string lv_unitType;
    string lv_category;
    string lv_indexCategory;
    string lv_indexArmyUnit;
    string lv_armyUnit;

    // Automatic Variable Declarations
    int autoD6BAB8CA_ae;
    const int autoD6BAB8CA_ai = 1;

    // Variable Initialization

    // Implementation
    TechTreeUnitHelpDefault(1, true);
    if (((lib1926661B_gf_KC_MissionisInstallation(lib1926661B_gf_CurrentMap()) == true) || (lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindUpgrade) == true))) {
        return ;
    }

    TechTreeUnitHelp(1, "MiningDrone", true);
    autoD6BAB8CA_ae = lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypeCount;
    lv_index = 1;
    for ( ; ( (autoD6BAB8CA_ai >= 0 && lv_index <= autoD6BAB8CA_ae) || (autoD6BAB8CA_ai < 0 && lv_index >= autoD6BAB8CA_ae) ) ; lv_index += autoD6BAB8CA_ai ) {
        TechTreeUnitHelp(1, lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypes[lv_index], true);
    }
}

void lib1926661B_gf_KC_HelpTechTree_UpdatePanel () {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    if (((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindMission) == false) || (lib1926661B_gf_KC_MissionisInstallation(lib1926661B_gf_CurrentMap()) == true))) {
        return ;
    }

    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", true);
}

void lib1926661B_gf_ZerglingRespawnSetPrimaryHatchery (unit lp_hatchery) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_zS_PrimaryHatchery = lp_hatchery;
}

string lib1926661B_gf_ZS_HeroUnitType (int lp_hero) {
    // Automatic Variable Declarations
    int autoBD1F111B_val;

    // Implementation
    autoBD1F111B_val = lp_hero;
    if (autoBD1F111B_val == lib1926661B_ge_HeroUnit_JackFrost) {
        return "JackFrost";
    }
    else {
        return "JackFrost";
    }
}

void lib1926661B_gf_CreateHero2 (point lp_spawnPoint, int lp_player, int lp_type, fixed lp_facing, int lp_flags, int lp_purpose) {
    // Automatic Variable Declarations
    int autoA7CA60A2_val;

    // Implementation
    UnitCreate(1, lib1926661B_gf_ZS_HeroUnitType(lp_type), lp_flags, lp_player, lp_spawnPoint, lp_facing);
    if ((lp_purpose == lib1926661B_ge_HeroCreatePurpose_GamePlay)) {
        autoA7CA60A2_val = lp_type;
        if (autoA7CA60A2_val == lib1926661B_ge_HeroUnit_JackFrost) {
            lib1926661B_gf_RegisterCampaignKerrigan(UnitLastCreated());
            lib1926661B_gv_zS_Kerrigan = UnitLastCreated();
        }
        else if (autoA7CA60A2_val == lib1926661B_ge_HeroUnit_GhostKefren) {
            lib1926661B_gv_zS_Kerrigan4 = UnitLastCreated();
        }
        else if (autoA7CA60A2_val == lib1926661B_ge_HeroUnit_GhostKeops) {
            lib1926661B_gv_zS_Kerrigan2 = UnitLastCreated();
        }
        else if (autoA7CA60A2_val == lib1926661B_ge_HeroUnit_GhostMicerinos) {
            lib1926661B_gv_zS_Kerrigan3 = UnitLastCreated();
        }
        else {
        }
        UnitStatusBarOverride(UnitLastCreated(), c_unitStatusGroupOwner);
    }

}

void lib1926661B_gf_ZS_CreateKerriganPing () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_zS_KerriganPing == c_invalidPingId)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircleImportant", UnitGetPosition(lib1926661B_gv_zS_Kerrigan), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        lib1926661B_gv_zS_KerriganPing = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.4);
    }

    PingSetUnit(lib1926661B_gv_zS_KerriganPing, lib1926661B_gv_zS_Kerrigan);
    PingSetUseUnitVisibility(lib1926661B_gv_zS_KerriganPing, true);
    PingSetUseUnitTeamColor(lib1926661B_gv_zS_KerriganPing, false);
    PingSetColor(lib1926661B_gv_zS_KerriganPing, Color(25.88, 100.00, 100.00));
}

void lib1926661B_gf_RegisterCampaignKerrigan (unit lp_kerrigan) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_zS_Kerrigan = lp_kerrigan;
    lib1926661B_gf_ZS_CreateKerriganPing();
    UnitStatusBarOverride(lib1926661B_gv_zS_Kerrigan, c_unitStatusGroupAll);
}

text lib1926661B_gf_StoryArmyCategoryName (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Name", 1));
}

text lib1926661B_gf_StoryArmyCategoryName2 (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Description", 1));
}

string lib1926661B_gf_StoryArmyCategoryIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Icon", c_playerAny));
}

bool lib1926661B_gf_StoryArmyCategoryStateCheck (string lp_armyCategory, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1926661B_gf_KC_StoryArmyCategoryState(lp_armyCategory) == lp_state);
}

string lib1926661B_gf_StoryArmyCategoryPlanetCamera (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("TechUnit", lib1926661B_gf_KC_TechUnitOfArmyCategory(lp_armyCategory), "PlanetPanelCamera", 1);
}

string lib1926661B_gf_StoryArmyCategoryEvolutionMission (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int autoD8DD77C8_ae;
    int autoD8DD77C8_ai;

    // Variable Initialization

    // Implementation
    autoD8DD77C8_ae = CatalogEntryCount(c_gameCatalogMap);
    autoD8DD77C8_ai = 1;
    while (autoD8DD77C8_ai <= autoD8DD77C8_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoD8DD77C8_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Upgrade") {
            if ((lib1926661B_gf_MissionArmyCategoryUnlocked(lv_indexMission) == lp_armyCategory)) {
                return lv_indexMission;
            }

        }
        autoD8DD77C8_ai = autoD8DD77C8_ai + 1;
    }
    return null;
}

void lib1926661B_gf_KC_SetArmyCategoryState (string lp_armyCategory, int lp_state) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1926661B_gf_KC_StoryArmyCategoryState(lp_armyCategory) == lp_state)) {
        return ;
    }

    DataTableSetInt(true, (lib1926661B_gv_kCC_ArmyCategoryStateKey + (lp_armyCategory)), (lp_state));
}

void lib1926661B_gf_KC_UpdateArmyCategoryStates (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexMission;
    string lv_missionCategory;
    string lv_requiredMission;

    // Automatic Variable Declarations
    int autoB11A3FD0_ae;
    int autoB11A3FD0_ai;
    int auto071DCEC4_ae;
    int auto071DCEC4_ai;
    int auto39314A95_ae;
    int auto39314A95_ai;

    // Variable Initialization

    // Implementation
    autoB11A3FD0_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoB11A3FD0_ai = 1;
    while (autoB11A3FD0_ai <= autoB11A3FD0_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoB11A3FD0_ai);
        DataTableSetBool(false, (lv_indexCategory), false);
        autoB11A3FD0_ai = autoB11A3FD0_ai + 1;
    }
    auto071DCEC4_ae = CatalogEntryCount(c_gameCatalogMap);
    auto071DCEC4_ai = 1;
    while (auto071DCEC4_ai <= auto071DCEC4_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto071DCEC4_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lib1926661B_gf_MissionStatusCheck(lv_indexMission, lib1926661B_ge_MissionStatus_Completed) == true)) {
                lv_missionCategory = lib1926661B_gf_MissionArmyCategoryUnlocked(lv_indexMission);
                if ((lv_missionCategory != null)) {
                    DataTableSetBool(false, (lv_missionCategory), true);
                }

            }

        }
        auto071DCEC4_ai = auto071DCEC4_ai + 1;
    }
    auto39314A95_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto39314A95_ai = 1;
    while (auto39314A95_ai <= auto39314A95_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto39314A95_ai);
        if ((DataTableGetBool(false, (lv_indexCategory)) == true)) {
            lib1926661B_gf_KC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
        }
        else {
            lib1926661B_gf_KC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
        }
        auto39314A95_ai = auto39314A95_ai + 1;
    }
}

string lib1926661B_gf_KC_TechUnitOfArmyCategory (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "UserReference", 1));
}

string lib1926661B_gf_KC_ArmyCategoryOfTechUnit (string lp_techUnit) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoED4A312F_ae;
    int autoED4A312F_ai;

    // Variable Initialization

    // Implementation
    autoED4A312F_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoED4A312F_ai = 1;
    while (autoED4A312F_ai <= autoED4A312F_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoED4A312F_ai);
        if ((lib1926661B_gf_KC_TechUnitOfArmyCategory(lv_indexCategory) == lp_techUnit)) {
            return lv_indexCategory;
        }

        autoED4A312F_ai = autoED4A312F_ai + 1;
    }
    return null;
}

string lib1926661B_gf_KC_StoryArmyCategoryUnitType (string lp_armyCategory) {
    // Variable Declarations
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    if ((lp_armyCategory == null)) {
        return null;
    }

    lv_value = CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Unit", 1);
    return (lv_value);
}

int lib1926661B_gf_KC_StoryArmyCategoryState (string lp_armyCategory) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (lib1926661B_gv_kCC_ArmyCategoryStateKey + (lp_armyCategory)));
    return lv_value;
}

void lib1926661B_gf_KC_SaveArmyCategoryToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto1C5E5765_ae;
    int auto1C5E5765_ai;

    // Variable Initialization

    // Implementation
    auto1C5E5765_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto1C5E5765_ai = 1;
    while (auto1C5E5765_ai <= auto1C5E5765_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto1C5E5765_ai);
        lib1926661B_gf_KC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), (lib1926661B_gf_KC_StoryArmyCategoryState(lv_indexCategory)), 0);
        auto1C5E5765_ai = auto1C5E5765_ai + 1;
    }
}

void lib1926661B_gf_KC_LoadArmyCategoryFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int auto96BBAA99_ae;
    int auto96BBAA99_ai;

    // Variable Initialization

    // Implementation
    auto96BBAA99_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto96BBAA99_ai = 1;
    while (auto96BBAA99_ai <= auto96BBAA99_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto96BBAA99_ai);
        lv_stateInt = lib1926661B_gf_KC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), 0);
        lv_state = lv_stateInt;
        lib1926661B_gf_KC_SetArmyCategoryState(lv_indexCategory, lv_state);
        auto96BBAA99_ai = auto96BBAA99_ai + 1;
    }
}

void lib1926661B_gf_KC_ApplyArmyTech (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_indexUpgrade;
    bool lv_categoryEnableDisable;
    bool lv_unitEnableDisable;
    bool lv_anyUnitEnabled;
    bool lv_upgradeEnableDisable;

    // Automatic Variable Declarations
    int auto9D38F76C_ae;
    int auto9D38F76C_ai;
    int autoDD5E44DC_ae;
    int autoDD5E44DC_ai;

    // Variable Initialization
    lv_categoryEnableDisable = true;
    lv_unitEnableDisable = true;
    lv_upgradeEnableDisable = true;

    // Implementation
    auto9D38F76C_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto9D38F76C_ai = 1;
    while (auto9D38F76C_ai <= auto9D38F76C_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto9D38F76C_ai);
        lib1926661B_gf_EnableCampaignTechUnit(false, lib1926661B_gf_KC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        auto9D38F76C_ai = auto9D38F76C_ai + 1;
    }
    autoDD5E44DC_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoDD5E44DC_ai = 1;
    while (autoDD5E44DC_ai <= autoDD5E44DC_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoDD5E44DC_ai);
        if ((lib1926661B_gf_StoryArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
            lv_categoryEnableDisable = true;
        }
        else {
            lv_categoryEnableDisable = false;
        }
        if ((lv_categoryEnableDisable == true)) {
            lib1926661B_gf_EnableCampaignTechUnit(true, lib1926661B_gf_KC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        }

        autoDD5E44DC_ai = autoDD5E44DC_ai + 1;
    }
}

void lib1926661B_gf_KC_ResetArmyTech () {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto7F27B5D3_ae;
    int auto7F27B5D3_ai;

    // Variable Initialization

    // Implementation
    auto7F27B5D3_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto7F27B5D3_ai = 1;
    while (auto7F27B5D3_ai <= auto7F27B5D3_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto7F27B5D3_ai);
        lib1926661B_gf_KC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
        auto7F27B5D3_ai = auto7F27B5D3_ai + 1;
    }
}

bool lib1926661B_gf_LastMap2 () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_kCX_IsSimulation;
}

void lib1926661B_gf_ULoadCampaignData (string lp_map) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto520078D4_g;
    playergroup auto6FEC778D_g;

    // Variable Initialization

    // Implementation
    lib1926661B_gf_KC_HookAchiRedirect(lp_map);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeTextTag);
    TriggerDebugSetTypeFile(1, "StoryModeDebug.txt");
    lib1926661B_gv_kC_CurrentMap = lp_map;
    UserDataSetInt("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_map), "IsCurrent", 1, 1);
    lib1926661B_gv_kC_InStoryMode = lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindStory);
    lib1926661B_gf_UEDFL_InitMaps();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_ED876F0C"), false);
    lib1926661B_gf_KC_LoadAllTransitionData(lp_map);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_2AD3369D"), false);
    if ((lib1926661B_gv_kC_InCompletedCampaign == true) && ((lib1926661B_gv_kCX_IsSimulation == true) || (lib1926661B_gv_kCX_IsVictoryPlayAgain == true))) {
        lib1926661B_gf_KC_UpdateSimulationMissionAges(lp_map);
    }

    if ((lib1926661B_gv_kC_InCompletedCampaign == true) && (lib1926661B_gf_StoryMapTypeCheck(lp_map, c_mapKindStory) == true)) {
    }

    lib1926661B_gf_KC_CampaignPreload();
    lib1926661B_gf_KC_MissionInit();
    PlayerApplySkin(1, "UPLAnnouncer", true);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_D8912FAC"), false);
    lib1926661B_gf_KC_ApplyTech(1);
    lib1926661B_gf_KC_UpdateGlossary(lp_map, 1);
    lib1926661B_gf_KC_StoreTechBonusAtMissionBeginning();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_1A7C23AB"), false);
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    auto520078D4_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto520078D4_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_13D3AE1E"), false);
    auto6FEC778D_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6FEC778D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    if ((lib1926661B_gv_kC_InStoryMode == false)) {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, true);
    }
    else {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    }
    if ((lib1926661B_gv_kC_InStoryMode == false)) {
        PlayerOptionOverride(1, "simplecommandcard", "0");
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, true);
        UISetGameMenuItemShortcut(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/lib_1926661B_2DFD4F42"));
        if ((lib1926661B_gv_kCX_IsSimulation == true)) {
            UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/lib_1926661B_9930C5C5"));
        }
        else {
            UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/lib_1926661B_530F6889"));
        }
    }
    else {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, false);
    }
    lib1926661B_gf_KC_PrepareLoadingScreen(lp_map, true);
    if ((lib1926661B_gv_kCX_IsSimulation == true)) {
        GameCheatAllow(c_gameCheatProgress, false);
    }

    GameCheatAllow(c_gameCheatTechTree, false);
    GameCheatAllow(c_gameCheatTV, false);
}

void lib1926661B_gf_KC_AutoHeatMapTestMode () {
    // Variable Declarations
    trigger lv_disableTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameTestConfigType() != 1)) {
        return ;
    }

    UnitPauseAll(true);
    while (true) {
        Wait(10.0, c_timeGame);
    }
}

void lib1926661B_gf_PC_CompletedSavesEnable () {
    // Automatic Variable Declarations
    // Implementation
    if ((AchievementsDisabled(1) == true)) {
        return ;
    }

    CampaignProgressEnableCampaignCompletedSaves(PlayerGroupAll(), true);
}

void lib1926661B_gf_PrepareForMission (string lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryAgain, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    SetNextMissionDifficulty(PlayerGroupAll(), lp_difficulty);
    if ((lp_nextIsSimulation == false)) {
        lib1926661B_gf_KC_SetCampaignDifficulty(lp_difficulty);
    }

    if ((lib1926661B_gv_kCX_IsSimulation == false) && (lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindMission) == true)) {
        lib1926661B_gv_kCX_LastSuccessfulMission = lib1926661B_gf_CurrentMap();
    }

    lib1926661B_gf_KC_SaveAllTransitionData(lp_nextIsSimulation, lp_nextIsVictoryAgain, false);
    if ((lp_nextMission == "")) {
        GameSetNextMap("");
        return ;
    }

    lib1926661B_gf_KC_PrepareLoadingScreen(lp_nextMission, false);
    GameSetNextMap(("UEDFL/" + lib1926661B_gf_StoryMapFile(lp_nextMission)));
}

void lib1926661B_gf_PrepareForStoryMode (int lp_victoryDefeat, int lp_difficulty) {
    // Variable Declarations
    bool lv_isActuallyVictory;
    string lv_nextMap;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_isActuallyVictory = ((lp_victoryDefeat == c_gameOverVictory) || lib1926661B_gv_kCX_IsVictoryPlayAgain);
    if ((lib1926661B_gv_kCX_IsSimulation == false) && (lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindMission) == true) && (lv_isActuallyVictory == true)) {
        lib1926661B_gv_kCX_LastSuccessfulMission = lib1926661B_gf_CurrentMap();
        lib1926661B_gf_KC_CompleteMission(lib1926661B_gf_CurrentMap());
        lv_nextMap = lib1926661B_gf_PP_NextMission(lib1926661B_gf_CurrentMap(), lib1926661B_gv_kCX_IsSimulation, c_gameOverVictory);
    }
    else {
        lv_nextMap = lib1926661B_gf_PP_NextMission(lib1926661B_gf_CurrentMap(), lib1926661B_gv_kCX_IsSimulation, lp_victoryDefeat);
    }
    if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindUpgrade) == true) && (lv_isActuallyVictory == true)) {
        lib1926661B_gf_KC_CompleteMission(lib1926661B_gf_CurrentMap());
    }

    SetNextMissionDifficulty(PlayerGroupSingle(1), lp_difficulty);
    lib1926661B_gf_KC_SaveAllTransitionData(false, false, (c_gameOverDefeat == c_gameOverDefeat));
    lib1926661B_gf_KC_PrepareLoadingScreen(lv_nextMap, false);
    GameSetNextMap(("UEDFL/" + lib1926661B_gf_StoryMapFile("UEDStory")));
    TextExpressionSetToken("Param/Expression/lib_1926661B_CEE1F9DE", "A", StringToText(("Campaign/Swarm/" + lib1926661B_gf_StoryMapFile(lv_nextMap))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1926661B_CEE1F9DE"), false);
}

void lib1926661B_gf_PrepareForStoryMapSwitch (string lp_nextMap) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1926661B_gf_KC_SaveAllTransitionData(false, false, false);
    lib1926661B_gf_KC_PrepareLoadingScreen(lp_nextMap, false);
    GameSetNextMap(("UEDFL/" + lib1926661B_gf_StoryMapFile(lp_nextMap)));
}

void lib1926661B_gf_PrepareForStoryModeTransitionalSave () {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gf_KC_OpenCampaignBank();
    lib1926661B_gf_KC_SaveTransitionVars(lib1926661B_gv_kC_CampaignBank, null, false, false, false, false, false);
}

void lib1926661B_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition) {
    // Variable Declarations
    string lv_transitionMap;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_transitionMap = "";

    // Implementation
    if ((lib1926661B_gf_CurrentMap() == null)) {
        return ;
    }

    lv_transitionMap = ("" + lib1926661B_gf_StoryMapFile("UEDStory"));
    GameSetTransitionMap(lv_transitionMap);
    if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindStory) == true)) {
        lv_image = lib1926661B_gf_StoryMapLoadingScreenImage(lib1926661B_gf_CurrentMap());
    }
    else {
        lv_image = lib1926661B_gf_StoryMapLoadingScreenVictoryImage(lib1926661B_gf_CurrentMap());
    }
    GameSaveCreate(lp_name, lp_transition, lv_image, true);
}

string lib1926661B_gf_PP_NextMission (string lp_mission, bool lp_simulation, int lp_victoryDefeat) {
    // Variable Declarations
    string lv_nextMap;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nextMap = "UEDFL_EP01M01";

    // Implementation
    if ((lp_mission == null)) {
        lv_nextMap = null;
    }
    else if ((lp_simulation == true)) {
        lv_nextMap = "UEDStory";
    }
    else if ((lp_victoryDefeat == c_gameOverDefeat)) {
        lv_nextMap = null;
    }
    else if ((lp_mission == "UEDFL_EP01M00")) {
        lv_nextMap = "UEDStory";
    }
    else if ((lp_mission == "UEDFL_EP01M01")) {
        lv_nextMap = "UEDFL_EP01M02_1";
    }
    else if ((lp_mission == "UEDFL_EP01M02_1")) {
        lv_nextMap = "UEDFL_EP01M02_2";
    }
    else if ((lp_mission == "UEDFL_EP01M02_2")) {
        lv_nextMap = "UEDFL_EP01M03";
    }
    else if ((lp_mission == "UEDFL_EP01M03")) {
        lv_nextMap = "UEDFL_EP01M04";
    }
    else if ((lp_mission == "UEDFL_EP01M04")) {
        lv_nextMap = "UEDFL_EP01M05";
    }
    else if ((lp_mission == "UEDFL_EP01M05")) {
        lv_nextMap = "UEDFL_EP01M06";
    }
    else if ((lp_mission == "UEDFL_EP01M06")) {
        lv_nextMap = "UEDFL_EP01M07";
    }
    else if ((lp_mission == "UEDFL_EP01M07")) {
        lv_nextMap = "UEDFL_EP01M08";
    }
    else if ((lp_mission == "UEDFL_EP01M08")) {
        lv_nextMap = "UEDFL_EP01M09";
    }
    else if ((lp_mission == "UEDFL_EP01M09")) {
        lv_nextMap = "UEDFL_EP01M10";
    }
    else if ((lp_mission == "UEDFL_EP01M10")) {
        lv_nextMap = "UEDStory";
    }
    else if ((lp_mission == "UEDFL_EP01M11")) {
        lv_nextMap = "UEDStory";
    }
    else if (true) {
        lv_nextMap = null;
    }
    return lv_nextMap;
}

string lib1926661B_gf_LastMap3 (string lp_mission, bool lp_simulation, int lp_victoryDefeat) {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gf_PP_NextMission(lp_mission, lp_simulation, lp_victoryDefeat);
}

bool lib1926661B_gf_CurrentMissionIsSimulation () {
    // Automatic Variable Declarations
    // Implementation
    return (lib1926661B_gv_kCX_IsSimulation || lib1926661B_gv_kCX_IsVictoryPlayAgain);
}

string lib1926661B_gf_LastMap () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_kCX_LastMap;
}

bool lib1926661B_gf_LastMapConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto67B28176_val;

    // Implementation
    if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_LastMap(), c_mapKindStory) == false)) {
        return lib1926661B_gf_LastMissionConditionCheck(lp_condition);
    }

    auto67B28176_val = lp_condition;
    if (auto67B28176_val == lib1926661B_ge_MissionCondition_Sucessful) {
        return lib1926661B_gv_kCX_LastMapSuccess;
    }
    else {
    }
    return false;
}

string lib1926661B_gf_LastMission () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_kCX_LastMission;
}

bool lib1926661B_gf_LastMissionConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto00A314D6_val;

    // Implementation
    auto00A314D6_val = lp_condition;
    if (auto00A314D6_val == lib1926661B_ge_MissionCondition_Sucessful) {
        return lib1926661B_gv_kCX_LastMissionSuccess;
    }
    else if (auto00A314D6_val == lib1926661B_ge_MissionCondition_Simulation) {
        return lib1926661B_gv_kCX_LastMissionSimulation;
    }
    else {
    }
    return false;
}

string lib1926661B_gf_LastSuccessfulMission () {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gv_kCX_LastSuccessfulMission;
}

void lib1926661B_gf_KC_ClearSaveData () {
    // Variable Declarations
    string lv_indexMission;
    string lv_section;

    // Automatic Variable Declarations
    int autoF515360E_ae;
    int autoF515360E_ai;

    // Variable Initialization
    lv_section = "";

    // Implementation
    autoF515360E_ae = CatalogEntryCount(c_gameCatalogMap);
    autoF515360E_ai = 1;
    while (autoF515360E_ai <= autoF515360E_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF515360E_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_section = lib1926661B_gf_KC_BankSectionName(lv_indexMission, "CampaignLastInfo");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = lib1926661B_gf_KC_BankSectionName(lv_indexMission, "MissionAvailableAge");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = lib1926661B_gf_KC_BankSectionName(null, "MissionBestTime");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = lib1926661B_gf_KC_BankSectionName(lv_indexMission, "MissionCompletedAge");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = lib1926661B_gf_KC_BankSectionName(lv_indexMission, "MissionCompleteted");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = lib1926661B_gf_KC_BankSectionName(lv_indexMission, "MissionObjectives");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = lib1926661B_gf_KC_BankSectionName(lv_indexMission, "MissionSectionExist");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = lib1926661B_gf_KC_BankSectionName(lv_indexMission, "StoryStates");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = lib1926661B_gf_KC_BankSectionName(lv_indexMission, "Tips");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = lib1926661B_gf_KC_BankSectionName(lv_indexMission, "WriterStates");
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
            lv_section = "AchievementsDisabled";
            BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
        }
        autoF515360E_ai = autoF515360E_ai + 1;
    }
    lib1926661B_gf_KC_SaveCampaignBank();
}

void lib1926661B_gf_KC_ClearSavedTimes () {
    // Variable Declarations
    string lv_indexMission;
    string lv_section;

    // Automatic Variable Declarations
    int autoA56B2A42_ae;
    int autoA56B2A42_ai;

    // Variable Initialization
    lv_section = "";

    // Implementation
    lv_section = lib1926661B_gf_KC_BankSectionName(null, "MissionBestTime");
    BankSectionRemove(lib1926661B_gv_kC_CampaignBank, lv_section);
    autoA56B2A42_ae = CatalogEntryCount(c_gameCatalogMap);
    autoA56B2A42_ai = 1;
    while (autoA56B2A42_ai <= autoA56B2A42_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoA56B2A42_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lib1926661B_gf_MissionIsUEDFL(lv_indexMission) == true)) {
                lv_section = lib1926661B_gf_KC_BankSectionName(null, "MissionBestTime");
                lib1926661B_gf_KC_SaveTransitionVarInteger(lib1926661B_gv_kC_CampaignBank, lv_section, lib1926661B_gf_KC_BankMIssionDifficultyKey(lv_indexMission, 2), 0, -1);
                lib1926661B_gf_KC_SaveTransitionVarInteger(lib1926661B_gv_kC_CampaignBank, lv_section, lib1926661B_gf_KC_BankMIssionDifficultyKey(lv_indexMission, 3), 0, -1);
            }
        }
        autoA56B2A42_ai = autoA56B2A42_ai + 1;
    }
    lib1926661B_gf_KC_SaveCampaignBank();
}

void lib1926661B_gf_KC_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat) {
    // Variable Declarations
    int lv_saveType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1926661B_gf_KC_OpenCampaignBank();
    if ((lib1926661B_gv_kCX_LastMap != "UEDFL_EP01M00")) {
        lib1926661B_gv_kCX_LastMap = lib1926661B_gf_CurrentMap();
        if ((lib1926661B_gv_kCX_IsVictoryPlayAgain == true)) {
            lib1926661B_gv_kCX_LastMapSuccess = true;
        }
        else {
            lib1926661B_gv_kCX_LastMapSuccess = (lp_resultFromDefeat == false);
        }
        if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gv_kCX_LastMap, c_mapKindMission) == true) && (lib1926661B_gv_kCX_LastMap != "UEDFL_EP01M00")) {
            lib1926661B_gv_kCX_LastMission = lib1926661B_gv_kCX_LastMap;
            lib1926661B_gv_kCX_LastMissionSuccess = lib1926661B_gv_kCX_LastMapSuccess;
            lib1926661B_gv_kCX_LastMissionSimulation = lib1926661B_gv_kCX_IsSimulation;
        }
        else if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gv_kCX_LastMap, c_mapKindUpgrade) == true)) {
            lib1926661B_gv_kCX_LastMissionSimulation = lib1926661B_gv_kCX_IsSimulation;
        }
        lib1926661B_gf_KC_SaveTransitionVars(lib1926661B_gv_kC_CampaignBank, null, lp_nextIsSimulation, lp_nextIsVictoryPlayAgain, lp_resultFromDefeat, lib1926661B_gv_kCX_IsSimulation, lib1926661B_gv_kCX_IsVictoryPlayAgain);
        lib1926661B_gf_KC_SaveCampaignBank();
    }
}

void lib1926661B_gf_KC_LoadAllTransitionData (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_KC_CampaignBankExists() == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_7A06BBD5"), false);
        lib1926661B_gf_ResetCampaignData();
        lib1926661B_gf_KC_SetCampaignDifficulty(PlayerDifficulty(1));
        if ((lp_map == "UEDFL_EP01M01")) {
            lib1926661B_gf_KC_OpenCampaignBank();
            lib1926661B_gf_KC_SaveTransitionVars(lib1926661B_gv_kC_CampaignBank, lp_map, false, false, false, false, false);
        }

        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_026E3CA7"), false);
    lib1926661B_gf_KC_OpenCampaignBank();
    lib1926661B_gf_KC_LoadTransitionVars(lib1926661B_gv_kC_CampaignBank, null);
    if ((lib1926661B_gf_StoryMapTypeCheck(lp_map, c_mapKindMission) == true)) {
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_F74FC874"), false);
    lib1926661B_gf_KC_LoadMissionSections();
}

void lib1926661B_gf_KC_SaveTransitionVars (bank lp_targetBank, string lp_map, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, bool lp_resultFromSimulation, bool lp_resultFromVictoryAgain) {
    // Variable Declarations
    int lv_indexScene;
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficulty;
    int lv_index;

    // Automatic Variable Declarations
    int autoA085AC8C_ae;
    const int autoA085AC8C_ai = 1;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 2;

    // Implementation
    if ((lp_map == null)) {
        lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "CampaignLastInfo");
        lib1926661B_gf_KC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("Simulation"), lp_nextIsSimulation, false);
        lib1926661B_gf_KC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("VictoryPlayAgain"), lp_nextIsVictoryPlayAgain, false);
        if (true) {
            lib1926661B_gf_KC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMap"), lib1926661B_gf_KC_StoryMapBankID(lib1926661B_gv_kCX_LastMap), "");
        }
        lib1926661B_gf_KC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMapSuccess"), lib1926661B_gv_kCX_LastMapSuccess, false);
        if (true) {
            lib1926661B_gf_KC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMission"), lib1926661B_gf_KC_StoryMapBankID(lib1926661B_gv_kCX_LastMission), "");
        }
        lib1926661B_gf_KC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSuccess"), lib1926661B_gv_kCX_LastMissionSuccess, false);
        lib1926661B_gf_KC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSimulation"), lib1926661B_gv_kCX_LastMissionSimulation, false);
        if ((lib1926661B_gf_CurrentMap() != "UEDFL_EP01M00")) {
            lib1926661B_gf_KC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastSuccessfulMission"), lib1926661B_gf_KC_StoryMapBankID(lib1926661B_gv_kCX_LastSuccessfulMission), "");
        }
        lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "CampaignSetting");
        if ((lp_resultFromSimulation == false) && (lp_resultFromVictoryAgain == false)) {
            lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "CampaignSetting");
            lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("Difficulty"), lib1926661B_gf_KC_DifficultyIndex(lib1926661B_gv_kCX_CampaignDifficulty), 1);
            lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "WriterStates");
            UserDataSaveType("WriterStates", lp_targetBank, lv__SectionName);
            lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "CampaignStats");
            lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCount"), lib1926661B_gf_NumberOfMissions(lib1926661B_ge_MissionCountOptions_Completed), 0);
            lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "CampaignStats");
            lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCountNext"), (lib1926661B_gf_NumberOfMissions(lib1926661B_ge_MissionCountOptions_Completed)+1), 0);
        }

    }

    if ((lp_resultFromDefeat == true)) {
        return ;
    }

    if ((lp_map != null) && (lib1926661B_gf_StoryMapTypeCheck(lp_map, c_mapKindMission) == true)) {
        lib1926661B_gf_KC_SetMissionSectionExists(lp_map, true);
    }

    lib1926661B_gf_KC_SaveMapToBank(lp_map, lp_targetBank, (lp_resultFromSimulation || lp_resultFromVictoryAgain));
    if (((lp_resultFromSimulation == true) || (lp_resultFromVictoryAgain == true))) {
        return ;
    }

    lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "HelpUnitsPanel");
    lib1926661B_gf_KC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypeCount, 0);
    autoA085AC8C_ae = lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypeCount;
    lv_index = 1;
    for ( ; ( (autoA085AC8C_ai >= 0 && lv_index <= autoA085AC8C_ae) || (autoA085AC8C_ai < 0 && lv_index >= autoA085AC8C_ae) ) ; lv_index += autoA085AC8C_ai ) {
        lib1926661B_gf_KC_SaveTransitionVarString(lp_targetBank, lv__SectionName, IntToString(lv_index), lib1926661B_gf_KC_HelpUnitPanel_EnabledUnitTypeStringID(lib1926661B_gv_kCX_HelpUnitPanel_EnabledUnitTypes[lv_index]), "");
    }
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "Tips");
    UserDataSaveType("CampaignTips", lp_targetBank, lv__SectionName);
}

void lib1926661B_gf_KC_LoadTransitionVars (bank lp_sourceBank, string lp_map) {
    // Variable Declarations
    int lv_tipvalue;
    string lv_indexScene;
    string lv_indexObjective;
    int lv_kerriganExperience;
    string lv__SectionName;
    int lv_count;
    int lv_index;
    fixed lv_blizzconTiming;

    // Automatic Variable Declarations
    int auto3D41700D_ae;
    const int auto3D41700D_ai = 1;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lib1926661B_gf_KC_LoadMapFromBank(lp_map, lp_sourceBank);
    if ((lp_map == null)) {
        lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "CampaignLastInfo");
        lib1926661B_gv_kCX_IsSimulation = lib1926661B_gf_KC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("Simulation"), false);
        lib1926661B_gv_kCX_IsVictoryPlayAgain = lib1926661B_gf_KC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("VictoryPlayAgain"), false);
        lib1926661B_gv_kCX_LastMap = (lib1926661B_gf_KC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMap"), ""));
        lib1926661B_gv_kCX_LastMapSuccess = lib1926661B_gf_KC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMapSuccess"), false);
        lib1926661B_gv_kCX_LastMission = (lib1926661B_gf_KC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMission"), ""));
        lib1926661B_gv_kCX_LastMissionSuccess = lib1926661B_gf_KC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSuccess"), false);
        lib1926661B_gv_kCX_LastMissionSimulation = lib1926661B_gf_KC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSimulation"), false);
        lib1926661B_gv_kCX_LastSuccessfulMission = (lib1926661B_gf_KC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastSuccessfulMission"), ""));
        lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "CampaignSetting");
        lib1926661B_gf_KC_SetCampaignDifficulty(lib1926661B_gf_KC_DifficultyFromIndex(lib1926661B_gf_KC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("Difficulty"), 0)));
        lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "WriterStates");
        UserDataLoadType("WriterStates", lp_sourceBank, lv__SectionName);
        lib1926661B_gf_KC_UpdateCampaignScreen(lib1926661B_gf_LastSuccessfulMission());
    }

    lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "HelpUnitsPanel");
    lv_count = lib1926661B_gf_KC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    auto3D41700D_ae = lv_count;
    lv_index = 1;
    for ( ; ( (auto3D41700D_ai >= 0 && lv_index <= auto3D41700D_ae) || (auto3D41700D_ai < 0 && lv_index >= auto3D41700D_ae) ) ; lv_index += auto3D41700D_ai ) {
        lib1926661B_gf_KC_HelpUnitPanel_AddEnabledUnitType(UnitTypeFromString(lib1926661B_gf_KC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, IntToString(lv_index), "")));
    }
    lv__SectionName = lib1926661B_gf_KC_BankSectionName(lp_map, "Tips");
    UserDataLoadType("CampaignTips", lp_sourceBank, lv__SectionName);
}

void lib1926661B_gf_KC_PrepareLoadingScreen (string lp_nextMap, bool lp_restart) {
    // Variable Declarations
    string lv_offsetString;
    int lv_offsetX;
    int lv_offsetY;
    text lv_title;
    text lv_subtitle;
    text lv_body;
    string lv_image;
    bool lv_waitForKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offsetString = "";

    // Implementation
    if ((lp_restart == true)) {
        UISetRestartLoadingScreen(StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_nextMap, "LoadingHelpRestart", c_playerAny)));
        return ;
    }

    lv_offsetString = CatalogFieldValueGet(c_gameCatalogMap, (lp_nextMap), "LoadingTextOffset", c_playerAny);
    lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", 1, c_stringCase);
    lv_waitForKey = !(lib1926661B_gf_StoryMapTypeCheck(lp_nextMap, c_mapKindStory));
    UISetNextLoadingScreenImageScale(c_scaleAspect);
    if ((lib1926661B_gv_kC_InCompletedCampaign == false) && (lib1926661B_gf_LastMapConditionCheck(lib1926661B_ge_MissionCondition_Sucessful) == true) && (lib1926661B_gf_LastMapConditionCheck(lib1926661B_ge_MissionCondition_Simulation) == false) && (lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_LastMap(), c_mapKindMission) == true) && (lib1926661B_gf_LastMap() != lp_nextMap)) {
        lv_image = lib1926661B_gf_StoryMapLoadingScreenVictoryImage(lib1926661B_gf_CurrentMap());
    }

    lv_offsetX = StringToInt(StringWord(lv_offsetString, 1));
    lv_offsetY = StringToInt(StringWord(lv_offsetString, 2));
    lv_offsetY += 240;
    lv_offsetX += 130;
    if ((lv_image == null)) {
        lv_image = lib1926661B_gf_StoryMapLoadingScreenImage(lp_nextMap);
    }

    if ((lib1926661B_gv_kC_InCompletedCampaign == false) && (lp_nextMap != "UEDFL_EP01M00") && (lp_nextMap != "UEDStory")) {
        lv_title = lib1926661B_gf_StoryMapHelp3(lp_nextMap);
        lv_body = lib1926661B_gf_StoryMapHelp4(lp_nextMap);
    }

    UISetNextLoadingScreen(lv_image, lv_title, lv_subtitle, lv_body, lib1926661B_gf_StoryMapHelp(lp_nextMap), lv_waitForKey);
}

void lib1926661B_gf_KC_UpdateCampaignScreen (string lp_mission) {
    // Variable Declarations
    const string lv_campaignID = "LegacyOfTheConfederation";
    string lv_origin;
    string lv_destination;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
}

void lib1926661B_gf_KC_CampaignPreload () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindMission) == true)) {
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_Start", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_BreathLoop", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_HeartBeatLoop", false);
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_BreathLoop", -1));
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1));
    }

}

void lib1926661B_gf_ResetCampaignData () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexScene;

    // Automatic Variable Declarations
    int autoFE0A4850_ae;
    int autoFE0A4850_ai;
    int autoE6D62441_ai;
    int autoE6D62441_ae;

    // Variable Initialization

    // Implementation
    UserDataResetAll();
    lib1926661B_gv_kCX_IsSimulation = false;
    lib1926661B_gv_kCX_IsVictoryPlayAgain = false;
    lib1926661B_gv_kCX_LastMap = null;
    lib1926661B_gv_kCX_LastMapSuccess = false;
    lib1926661B_gv_kCX_LastMission = null;
    lib1926661B_gv_kCX_LastMissionSimulation = false;
    lib1926661B_gv_kCX_LastMissionSuccess = false;
    lib1926661B_gv_kCX_LastSuccessfulMission = null;
    lib1926661B_gf_KC_SetCampaignDifficulty(3);
    autoFE0A4850_ae = CatalogEntryCount(c_gameCatalogMap);
    autoFE0A4850_ai = 1;
    while (autoFE0A4850_ai <= autoFE0A4850_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFE0A4850_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lib1926661B_gf_KC_MarkMissionAsStatus(lv_indexMission, lib1926661B_ge_MissionStatus_Locked);
        }
        autoFE0A4850_ai = autoFE0A4850_ai + 1;
    }
    lib1926661B_gf_KC_MarkMissionAsStatus("UEDFL_EP01M01", lib1926661B_ge_MissionStatus_Available);
    lib1926661B_gf_KC_ResetTech();
    autoE6D62441_ai = 1;
    autoE6D62441_ae = UserDataInstanceCount("Scenes")+1;
    while (autoE6D62441_ai < autoE6D62441_ae) {
        lv_indexScene = UserDataInstance("Scenes", autoE6D62441_ai);
        lib1926661B_gf_SetStoryScenePlayed(lv_indexScene, false);
        autoE6D62441_ai = autoE6D62441_ai+1;
    }
    lib1926661B_gf_KC_HelpUnitPanel_Reset();
}

void lib1926661B_gf_KC_OpenCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kC_CampaignBank != null)) {
        return ;
    }

    BankLoad(lib1926661B_gv_kC_CampaignBankName, 1);
    lib1926661B_gv_kC_CampaignBank = BankLastCreated();
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
}

bool lib1926661B_gf_KC_CampaignBankExists () {
    // Automatic Variable Declarations
    // Implementation
    return BankExists(lib1926661B_gv_kC_CampaignBankName, 1);
}

void lib1926661B_gf_KC_SaveCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kC_CampaignBank == null)) {
        return ;
    }

    BankSave(lib1926661B_gv_kC_CampaignBank);
}

bool lib1926661B_gf_KC_MissionSectionExists (string lp_mission) {
    // Variable Declarations
    string lv_missionSectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionSectionName = "";

    // Implementation
    if ((lib1926661B_gv_kC_CampaignBank == null)) {
        lib1926661B_gf_KC_OpenCampaignBank();
    }

    return lib1926661B_gf_KC_LoadTransitionVarBoolean(lib1926661B_gv_kC_CampaignBank, lib1926661B_gf_KC_BankSectionName(lp_mission, "MissionSectionExist"), "Value", false);
}

void lib1926661B_gf_KC_SetMissionSectionExists (string lp_mission, bool lp_exist) {
    // Variable Declarations
    string lv_missionSectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionSectionName = "";

    // Implementation
    if ((lib1926661B_gv_kC_CampaignBank == null)) {
        lib1926661B_gf_KC_OpenCampaignBank();
    }

    lib1926661B_gf_KC_SaveTransitionVarBoolean(lib1926661B_gv_kC_CampaignBank, lib1926661B_gf_KC_BankSectionName(lp_mission, "MissionSectionExist"), "Value", lp_exist, false);
}

void lib1926661B_gf_KC_LoadMissionSections () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto78BD1642_ae;
    int auto78BD1642_ai;

    // Variable Initialization

    // Implementation
    auto78BD1642_ae = CatalogEntryCount(c_gameCatalogMap);
    auto78BD1642_ai = 1;
    while (auto78BD1642_ai <= auto78BD1642_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto78BD1642_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lv_indexMission == lib1926661B_gf_CurrentMap())) {
                if (((GameIsTransitionMap() == false) || (lib1926661B_gv_kCX_IsSimulation == true) || (lib1926661B_gv_kCX_IsVictoryPlayAgain == true)) && (lib1926661B_gf_KC_MissionSectionExists(lv_indexMission) == true)) {
                    TextExpressionSetToken("Param/Expression/lib_1926661B_0386BD51", "A", StringToText(lib1926661B_gf_StoryMapFile(lv_indexMission)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1926661B_0386BD51"), false);
                    lib1926661B_gf_KC_LoadTransitionVars(lib1926661B_gv_kC_CampaignBank, lv_indexMission);
                    if ((lib1926661B_gv_kC_InCompletedCampaign == false)) {
                        lib1926661B_gf_KC_ClampProgressToMission(lv_indexMission);
                    }

                }
                else {
                    if ((lib1926661B_gf_KC_MissionSectionExists(lv_indexMission) == false) && (lib1926661B_gv_kCX_IsSimulation == true) && (lib1926661B_gv_kC_InCompletedCampaign == false)) {
                        lib1926661B_gf_KC_ClampProgressToMission(lv_indexMission);
                    }

                    lib1926661B_gf_KC_SaveTransitionVars(lib1926661B_gv_kC_CampaignBank, lv_indexMission, false, false, false, false, false);
                }
            }

        }
        auto78BD1642_ai = auto78BD1642_ai + 1;
    }
}

void lib1926661B_gf_KC_ClampProgressToMission (string lp_mission) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int autoEF3B902E_ae;
    int autoEF3B902E_ai;

    // Variable Initialization

    // Implementation
    autoEF3B902E_ae = CatalogEntryCount(c_gameCatalogMap);
    autoEF3B902E_ai = 1;
    while (autoEF3B902E_ai <= autoEF3B902E_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoEF3B902E_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lib1926661B_gf_MissionStatusCheck(lv_indexMission, lib1926661B_ge_MissionStatus_Available) == true)) {
                lib1926661B_gf_KC_MarkMissionAsStatus(lv_indexMission, lib1926661B_ge_MissionStatus_Locked);
            }
            else if ((lib1926661B_gf_MissionStatusAge(lv_indexMission, lib1926661B_ge_MissionStatus_Completed) < lib1926661B_gf_MissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed))) {
                lib1926661B_gf_KC_MarkMissionAsStatus(lv_indexMission, lib1926661B_ge_MissionStatus_Locked);
            }
            else if ((lv_indexMission != lp_mission)) {
                lib1926661B_gf_KC_SetMissionStatusAge(lv_indexMission, lib1926661B_ge_MissionStatus_Completed, (lib1926661B_gf_MissionStatusAge(lv_indexMission, lib1926661B_ge_MissionStatus_Completed)-lib1926661B_gf_MissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed)));
            }
        }
        autoEF3B902E_ai = autoEF3B902E_ai + 1;
    }
    lib1926661B_gf_KC_MarkMissionAsStatus(lp_mission, lib1926661B_ge_MissionStatus_Available);
    lib1926661B_gf_KC_UpdateTechStates(1);
    lib1926661B_gf_KC_ApplyTech(1);
}

string lib1926661B_gf_KC_BankSectionName (string lp_map, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return ("FirstLight" + "|" + (lp_section));
    }

    return (lib1926661B_gf_KC_StoryMapBankID(lp_map) + "|" + (lp_section));
}

int lib1926661B_gf_KC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool lib1926661B_gf_KC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string lib1926661B_gf_KC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void lib1926661B_gf_KC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void lib1926661B_gf_KC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void lib1926661B_gf_KC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
    }
}

string lib1926661B_gf_KC_BankMIssionDifficultyKey (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1926661B_gf_KC_StoryMapBankID(lp_mission) + "-" + IntToString(lib1926661B_gf_KC_DifficultyIndex(lp_difficulty)));
}

void lib1926661B_gf_KC_MissionLaunchClose () {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStop();
    TransmissionClearAll();
    DialogClearSubtitlePositionOverrideControl();
    DialogDestroy(lib1926661B_gv_kC_MLDialog);
    lib1926661B_gv_kC_MLDialog = c_invalidDialogId;
    TriggerEnable(lib1926661B_gt_KC_MissionLaunchClicked, false);
    TriggerEnable(lib1926661B_gt_KC_MissionPitchPlayClicked, false);
    TriggerEnable(lib1926661B_gt_KC_MissionPitchStopClicked, false);
    TriggerEnable(lib1926661B_gt_KC_MissionLaunchQuitClicked, false);
    TriggerEnable(lib1926661B_gt_KC_MissionLaunchBackClicked, false);
}

void lib1926661B_gf_KC_MissionLaunchPlayPitch () {
    // Automatic Variable Declarations
    // Implementation
    if ((ConversationDataCanRun(lib1926661B_gf_MissionPitch(lib1926661B_gv_kC_NextMission), false) == true)) {
        DialogControlSendAnimationEvent(lib1926661B_gv_kC_MLPanel, PlayerGroupAll(), "BriefStart");
        lib1926661B_gv_kC_MissionLaunchPitchPlaying = true;
        ConversationDataRun(lib1926661B_gf_MissionPitch(lib1926661B_gv_kC_NextMission), PlayerGroupAll(), c_conversationSkipNone, true);
        lib1926661B_gv_kC_MissionLaunchPitchPlaying = false;
        if ((lib1926661B_gv_kC_MLDialog != c_invalidDialogId)) {
            DialogControlSendAnimationEvent(lib1926661B_gv_kC_MLPanel, PlayerGroupAll(), "BriefEnd");
        }

    }

}

int lib1926661B_gf_KC_MissionLaunchSelectedDifficulty () {
    // Automatic Variable Declarations
    int auto5ED18F13_val;

    // Implementation
    auto5ED18F13_val = DialogControlGetSelectedItem(lib1926661B_gv_kC_MLDifficultyPulldown, 1);
    if (auto5ED18F13_val == 1) {
        return 2;
    }
    else if (auto5ED18F13_val == 2) {
        return 3;
    }
    else {
    }
    return 1;
}

string lib1926661B_gf_KC_MissionLaunchBackground (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gf_StoryMapLoadingScreenImage(lp_map);
}

string lib1926661B_gf_KC_MissionProperty (string lp_field) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogMap, (lib1926661B_gv_kC_NextMission), lp_field, c_playerAny);
}

void lib1926661B_gf_AddVictoryPanelStatistic (string lp_statistic) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kC_StatsIndex < 10)) {
        lib1926661B_gv_kC_StatsIndex += 1;
        lib1926661B_gv_kC_StatatisticsTitle[lib1926661B_gv_kC_StatsIndex] = StringExternal(CatalogFieldValueGet(c_gameCatalogScoreValue, lp_statistic, "Name", c_playerAny));
        lib1926661B_gv_kC_StatatisticsValue[lib1926661B_gv_kC_StatsIndex] = IntToText(PlayerScoreValueGetAsInt(1, lp_statistic));
    }

}

void lib1926661B_gf_AddVictoryPanelCustomStatistic (string lp_name, string lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1926661B_gv_kC_StatsIndex < 10)) {
        lib1926661B_gv_kC_StatsIndex += 1;
        lib1926661B_gv_kC_StatatisticsTitle[lib1926661B_gv_kC_StatsIndex] = StringToText(lp_name);
        lib1926661B_gv_kC_StatatisticsValue[lib1926661B_gv_kC_StatsIndex] = StringToText(lp_progress);
    }

}

void lib1926661B_gf_KC_CampaignVictory () {
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundStopAllTriggerSounds(true);
    TransmissionClearAll();
    lib1926661B_gf_SetAllSoundChannelVolumesCampaign(lib1926661B_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    lib1926661B_gf_ShowHideCreditsPanel(true);
}

void lib1926661B_gf_DisplayCampaignVictoryScoreScreen (string lp_mission) {
    // Variable Declarations
    string lv_sectionName;
    int lv_indexAchievement;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto5E562806_g;
    int auto5E562806_u;

    // Variable Initialization
    lv_sectionName = "";

    // Implementation
    GameCheatAllow(c_gameCheatProgress, false);
    AITimePause(true);
    UnitPauseAll(true);
    auto5E562806_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
    auto5E562806_u = UnitGroupCount(auto5E562806_g, c_unitCountAll);
    for (;; auto5E562806_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto5E562806_g, auto5E562806_u);
        if (lv_indexUnit == null) { break; }
        UnitRemove(lv_indexUnit);
    }
    if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    lib1926661B_gf_CinematicFade(true, 0.7, Color(0.00, 0.00, 0.00), true);
    CameraLockInput(1, true);
    lib1926661B_gf_KC_ShowHideAllHeroPanels(false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Destroy");
    if (((lp_mission == "UEDFL_EP01M02_1") || (lp_mission == "UEDFL_EP01M02_2") || (lp_mission == "UEDFL_EP01M03") || (lp_mission == "UEDFL_EP01M04") || (lp_mission == "UEDFL_EP01M06") || (lp_mission == "UEDFL_EP01M08") || (lp_mission == "UEDFL_EP01M09"))) {
    }
    else {
        TransmissionClearAll();
        ConversationDataStop();
        libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Mission_Score_Screen", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        lib1926661B_gf_SetAllSoundChannelVolumesCampaign(lib1926661B_ge_VolumeChannelModeCampaign_Victory);
    }
    if ((lp_mission == "UEDFL_EP01M03")) {
        SoundStopAllTriggerSounds(false);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        lib1926661B_gf_SetAllSoundChannelVolumesCampaign(lib1926661B_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("EP01M03_NewsCast_085", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    if (((lp_mission == "UEDFL_EP01M00") || (lp_mission == "UEDFL_EP01M01") || (lp_mission == "UEDFL_EP01M02_1") || (lp_mission == "UEDFL_EP01M02_2") || (lp_mission == "UEDFL_EP01M04") || (lp_mission == "UEDFL_EP01M06") || (lp_mission == "UEDFL_EP01M09"))) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "EP01M01_MusicEnd", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    lib1926661B_gf_KC_CompleteMission(lib1926661B_gf_CurrentMap());
    if ((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindMission) == true) && (lib1926661B_gf_CurrentMissionIsSimulation() == false)) {
        lv_sectionName = lib1926661B_gf_KC_BankSectionName(lib1926661B_gf_CurrentMap(), "MissionCompleteted");
        lib1926661B_gf_KC_SaveTransitionVarBoolean(lib1926661B_gv_kC_CampaignBank, lv_sectionName, lib1926661B_gf_KC_StoryMapBankID(lib1926661B_gf_CurrentMap()), true, false);
        BankSave(lib1926661B_gv_kC_CampaignBank);
    }

    lib1926661B_gf_PrepareForMission(lib1926661B_gf_PP_NextMission(lib1926661B_gf_CurrentMap(), lib1926661B_gv_kCX_IsSimulation, c_gameOverVictory), false, false, lib1926661B_gv_kCX_CampaignDifficulty);
    if (true) {
    }

    if ((AchievementsDisabled(1) == false) && (lp_mission == "UEDFL_EP01M10") && (lib1926661B_gv_kC_InCompletedCampaign == false)) {
        CampaignProgressDeleteCampaignSave(PlayerGroupAll());
    }

    if ((lib1926661B_gv_kCX_IsSimulation == false)) {
    }

    if (((lib1926661B_gv_kCX_IsSimulation == true) || (lib1926661B_gv_kC_InCompletedCampaign == true))) {
        lib1926661B_gf_PC_CompletedSavesEnable();
    }

    lib1926661B_gf_PU_CreateVictoryScreen();
    lib1926661B_gf_PU_UpdateVictoryScreen(lp_mission);
    TriggerEnable(lib1926661B_gt_KC_VSScreenContinue, true);
    TriggerEnable(lib1926661B_gt_KC_VSScreenPlayAgain, true);
    TriggerEnable(lib1926661B_gt_KC_VSScreenQuit, true);
    TriggerEnable(lib1926661B_gt_KC_VSAchievements, true);
    DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSPanel, PlayerGroupAll(), true);
    DialogControlSendAnimationEvent(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, PlayerGroupAll(), "Birth");
    if ((lp_mission == "UEDFL_EP01M00")) {
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue, StringExternal("UI/VictoryPanel/VictoryButton"), PlayerGroupAll());
        DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2, PlayerGroupAll(), false);
    }
    if ((lp_mission == "UEDFL_EP01M10")) {
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue, StringExternal("UI/VictoryPanel/VictoryButton"), PlayerGroupAll());
        DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2, PlayerGroupAll(), false);
    }
    if ((lib1926661B_gv_kCX_IsSimulation == true)) {
        DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2, PlayerGroupAll(), false);
        lib1926661B_gf_KC_OpenCampaignBank();
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue, StringExternal("UI/VictoryPanel/ArchivesButton"), PlayerGroupAll());
        lib1926661B_gf_KC_LoadTransitionVars(BankLastCreated(), lp_mission);
    }

    lib1926661B_gf_KC_CheckProgressionAchievements();
}

void lib1926661B_gf_PU_CreateVictoryScreen () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto678DC7E8_ae = 10;
    const int auto678DC7E8_ai = 1;
    const int auto8B2ED975_ae = 3;
    const int auto8B2ED975_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("VictoryScoreScreen"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSPanel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("MainPanel"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("VictoryFrame/VictoryTitle"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelVictoryTitle = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("VictoryFrame/MissionTitle"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelMissionTitle = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("VictoryFrame/MissionTime"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelTime = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("VictoryFrame/SummaryPanel/VictoryOutro"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle7 = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto678DC7E8_ai >= 0 && lv_index <= auto678DC7E8_ae) || (auto678DC7E8_ai < 0 && lv_index >= auto678DC7E8_ae) ) ; lv_index += auto678DC7E8_ai ) {
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("VictoryFrame/SummaryPanel/Item" + IntToString(lv_index))));
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle5[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle5[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("ItemName"));
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle6[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle5[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("ItemValue"));
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle8[lv_index] = DialogControlLastCreated();
    }
    lv_index = 1;
    for ( ; ( (auto8B2ED975_ai >= 0 && lv_index <= auto8B2ED975_ae) || (auto8B2ED975_ai < 0 && lv_index >= auto8B2ED975_ae) ) ; lv_index += auto8B2ED975_ai ) {
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("VictoryFrame/AchievementPanel/AchievementItem" + IntToString(lv_index))));
        lib1926661B_gv_kC_VictoryScreen.lv_zS_VSAchievementTitle2[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_zS_VSAchievementTitle2[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Icon)));
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle3[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_zS_VSAchievementTitle2[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Title)));
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_zS_VSAchievementTitle2[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Description)));
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle2[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_zS_VSAchievementTitle2[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Points)));
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle4[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ReplayButton"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnPlayAgain = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ContinueButton"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementButton"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnPlayAgain2 = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("QuitButton"));
    lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2 = DialogControlLastCreated();
}

void lib1926661B_gf_PU_UpdateVictoryScreen (string lp_mission) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoE312EE2B_ae;
    const int autoE312EE2B_ai = 1;
    const int autoCDC346B5_ae = 3;
    const int autoCDC346B5_ai = 1;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1926661B_F1566AC5", "MISSIONTITLE", lib1926661B_gf_StoryMapName(lp_mission));
    TextExpressionSetToken("Param/Expression/lib_1926661B_F1566AC5", "DIFFICULTYTITLE", DifficultyNameCampaign(PlayerDifficulty(1)));
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelMissionTitle, TextExpressionAssemble("Param/Expression/lib_1926661B_F1566AC5"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_1926661B_D11A9772", "A", lib1926661B_gf_FormatTimeCampaign(FixedToInt(GameGetMissionTime())));
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelTime, TextExpressionAssemble("Param/Expression/lib_1926661B_D11A9772"), PlayerGroupAll());
    if (((lp_mission == "UEDFL_EP01M00") || (lp_mission == "UEDFL_EP01M09") || (lp_mission == "UEDFL_EP01M10"))) {
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelVictoryTitle, StringExternal("Param/Value/lib_1926661B_DD209DEC"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSLabelVictoryTitle, StringExternal("Param/Value/lib_1926661B_C20A69CF"), PlayerGroupAll());
    }
    if (((lp_mission == "UEDFL_EP01M01") || (lp_mission == "UEDFL_EP01M07") || (lp_mission == "UEDFL_EP01M10"))) {
        DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle7, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle7, lib1926661B_gf_StoryMapHelp2(lp_mission), PlayerGroupAll());
        if ((lp_mission == "UEDFL_EP01M07")) {
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle7, StringExternal("Param/Value/lib_1926661B_CD8929E0"), PlayerGroupAll());
        }
    }

    autoE312EE2B_ae = lib1926661B_gv_kC_StatsIndex;
    lv_index = 1;
    for ( ; ( (autoE312EE2B_ai >= 0 && lv_index <= autoE312EE2B_ae) || (autoE312EE2B_ai < 0 && lv_index >= autoE312EE2B_ae) ) ; lv_index += autoE312EE2B_ai ) {
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle6[lv_index], lib1926661B_gv_kC_StatatisticsTitle[lv_index], PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle8[lv_index], lib1926661B_gv_kC_StatatisticsValue[lv_index], PlayerGroupAll());
        DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle5[lv_index], PlayerGroupAll(), true);
    }
    lv_index = 1;
    for ( ; ( (autoCDC346B5_ai >= 0 && lv_index <= autoCDC346B5_ae) || (autoCDC346B5_ai < 0 && lv_index >= autoCDC346B5_ae) ) ; lv_index += autoCDC346B5_ai ) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle3[lv_index], UserDataGetImagePath("Achievements", UserDataGetUserInstance("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "Achievements", lv_index), "Icon", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle[lv_index], UserDataGetText("Achievements", UserDataGetUserInstance("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "Achievements", lv_index), "Title", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle2[lv_index], UserDataGetText("Achievements", UserDataGetUserInstance("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "Achievements", lv_index), "Description", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSAchievementTitle4[lv_index], IntToText(UserDataGetInt("Achievements", UserDataGetUserInstance("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "Achievements", lv_index), "Points", 1)), PlayerGroupAll());
        if ((libAE8FC9D3_gf_PlayerHasAchievement(1, UserDataGetUserInstance("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lp_mission), "Achievements", lv_index)) == true)) {
            DialogControlSetAnimationState(lib1926661B_gv_kC_VictoryScreen.lv_zS_VSAchievementTitle2[lv_index], PlayerGroupAll(), "AwardState", "Earned");
        }

    }
    if ((lib1926661B_gf_CurrentMissionIsSimulation() == true)) {
        DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2, PlayerGroupAll(), false);
    }
}

void lib1926661B_gf_KC_VSDisplayRestartDialog () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoA329818A_ae = lib1926661B_gv_kCC_DifficultyCount;
    const int autoA329818A_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartPanel == c_invalidDialogControlId)) {
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSPanel, c_triggerControlTypePanel, "RestartPanel");
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartPanel = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartPanel, c_triggerControlTypePulldown, "DifficultyPulldown");
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartDifficultyPulldown = DialogControlLastCreated();
        lv_index = 1;
        for ( ; ( (autoA329818A_ai >= 0 && lv_index <= autoA329818A_ae) || (autoA329818A_ai < 0 && lv_index >= autoA329818A_ae) ) ; lv_index += autoA329818A_ai ) {
            DialogControlAddItem(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartDifficultyPulldown, PlayerGroupAll(), DifficultyNameCampaign(lib1926661B_gf_KC_DifficultyFromIndex(lv_index)));
        }
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartPanel, c_triggerControlTypeButton, "RestartButton");
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartRestartButton = DialogControlLastCreated();
        DialogControlHookup(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartPanel, c_triggerControlTypeButton, "CancelButton");
        lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartCancelButton = DialogControlLastCreated();
    }

    TriggerEnable(lib1926661B_gt_KC_VSRestartCancel, true);
    TriggerEnable(lib1926661B_gt_KC_VSRestartRestart, true);
    DialogControlSelectItem(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartDifficultyPulldown, PlayerGroupAll(), lib1926661B_gf_KC_DifficultyIndex(PlayerDifficulty(1)));
    DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartPanel, PlayerGroupAll(), true);
}

string lib1926661B_gf_KC_VictoryScreenBackground (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return lib1926661B_gf_StoryMapLoadingScreenImage(lp_map);
}

string lib1926661B_gf_MissionCatalogPropertyVictoryScreen (string lp_field, string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogMap, lp_mission, lp_field, c_playerAny);
}

string lib1926661B_gf_KC_ArchivesDataString (int lp_archive) {
    // Automatic Variable Declarations
    // Implementation
    return ("ZSS_Archive_" + IntToString((lp_archive)));
}

string lib1926661B_gf_KC_ArchivesDataTypeString (int lp_archive) {
    // Automatic Variable Declarations
    // Implementation
    return ("ZSS_ArchiveType_" + IntToString((lp_archive)));
}

void lib1926661B_gf_KC_ArchivesOverlayCreate () {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_kC_MissionArchiveOverlayCreated = true;
    lib1926661B_gv_kC_ArchivesPanel = BattleReportGetDialogControl();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    lib1926661B_gv_kC_ArchivesTitle = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesPanel, c_triggerControlTypeButton, "CloseButton");
    lib1926661B_gv_kC_ArchivesBackButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesPanel, c_triggerControlTypeButton, "QuitButton");
    lib1926661B_gv_kC_ArchivesQuitButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesPanel, c_triggerControlTypePanel, "MissionSummaryContainer");
    lib1926661B_gv_kC_ArchivesMissionPanel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesMissionPanel, c_triggerControlTypeLabel, "MissionTitleLabel");
    lib1926661B_gv_kC_ArchivesMissionTitle = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesMissionPanel, c_triggerControlTypeLabel, "MissionBonusObjectivesLabel");
    lib1926661B_gv_kC_ArchivesMissionBonusLabel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesMissionPanel, c_triggerControlTypeImage, "MissionImage");
    lib1926661B_gv_kC_ArchivesMissionImage = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesMissionPanel, c_triggerControlTypePanel, "AchievementSummaryContainer");
    lib1926661B_gv_kC_ArchivesAchievementPanel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame0");
    lib1926661B_gv_kC_ArchivesAchievements[1] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame1");
    lib1926661B_gv_kC_ArchivesAchievements[2] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame2");
    lib1926661B_gv_kC_ArchivesAchievements[3] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesMissionPanel, c_triggerControlTypePanel, "DifficultySummaryContainer");
    lib1926661B_gv_kC_ArchivesDifficultyPanel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyCasualLabel");
    lib1926661B_gv_kC_ArchivesDifficultyLabels[1] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyCasualTimeLabel");
    lib1926661B_gv_kC_ArchivesDifficultyTimes[1] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyNormalLabel");
    lib1926661B_gv_kC_ArchivesDifficultyLabels[2] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyNormalTimeLabel");
    lib1926661B_gv_kC_ArchivesDifficultyTimes[2] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyHardLabel");
    lib1926661B_gv_kC_ArchivesDifficultyLabels[3] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyHardTimeLabel");
    lib1926661B_gv_kC_ArchivesDifficultyTimes[3] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyBrutalLabel");
    lib1926661B_gv_kC_ArchivesDifficultyLabels[4] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyBrutalTimeLabel");
    lib1926661B_gv_kC_ArchivesDifficultyTimes[4] = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesMissionPanel, c_triggerControlTypeButton, "ReplayMissionButton");
    lib1926661B_gv_kC_ArchivesMissionPlayButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesPanel, c_triggerControlTypePanel, "CinematicSummaryContainer");
    lib1926661B_gv_kC_ArchivesScenePanel = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesScenePanel, c_triggerControlTypeLabel, "CinematicTitleLabel");
    lib1926661B_gv_kC_ArchivesSceneTitle = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesScenePanel, c_triggerControlTypeImage, "CinematicImage");
    lib1926661B_gv_kC_ArchivesSceneImage = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_ArchivesScenePanel, c_triggerControlTypeButton, "PlayCinematicButton");
    lib1926661B_gv_kC_ArchivesScenePlayButton = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lib1926661B_gv_kC_ArchivesLoadingDialog = DialogLastCreated();
    DialogSetFullscreen(lib1926661B_gv_kC_ArchivesLoadingDialog, true);
    DialogSetImageVisible(lib1926661B_gv_kC_ArchivesLoadingDialog, false);
    libNtve_gf_CreateDialogItemLabel(lib1926661B_gv_kC_ArchivesLoadingDialog, 200, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_1926661B_3C05C26E"), Color(254*100/255,138*100/255,14*100/255), false, 2.0);
    lib1926661B_gv_kC_ArchivesLoadingLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib1926661B_gv_kC_ArchivesLoadingLabel, PlayerGroupAll(), c_anchorTopRight, lib1926661B_gv_kC_ArchivesMissionPanel, c_anchorBottomRight, 0, 0);
    DialogControlSendAnimationEvent(lib1926661B_gv_kC_ArchivesPanel, PlayerGroupAll(), "Birth");
    SoundPlayForPlayer(SoundLink("UI_Archive_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

void lib1926661B_gf_KC_ArchivesClosed () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(lib1926661B_gt_KC_ArchivesSelectionChanged, false);
    TriggerEnable(lib1926661B_gt_KC_ArchivesScenePlayClicked, false);
    TriggerEnable(lib1926661B_gt_KC_ArchivesMissionPlayClicked, false);
    TriggerEnable(lib1926661B_gt_KC_ArchivesCloseClicked, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
}

void lib1926661B_gf_DisplayMissionArchives () {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(lib1926661B_gt_KC_ArchivesCreate, true, false);
    TriggerEnable(lib1926661B_gt_KC_ArchivesSelectionChanged, true);
    TriggerEnable(lib1926661B_gt_KC_ArchivesScenePlayClicked, true);
    TriggerEnable(lib1926661B_gt_KC_ArchivesMissionPlayClicked, true);
    TriggerEnable(lib1926661B_gt_KC_ArchivesCloseClicked, true);
    lib1926661B_gf_KC_ArchivesUpdate();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
    lib1926661B_gv_pU_ArchivesFirstOpen = false;
    lib1926661B_gf_CinematicFade(true, 0.5, Color(0.00, 0.00, 0.00), false);
}

string lib1926661B_gf_KC_ArchivesLastMissionSelected () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(true, lib1926661B_gf_KC_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
}

void lib1926661B_gf_KC_ArchivesUpdate () {
    // Variable Declarations
    int lv_index;
    int lv_difficultyIndex;
    string lv_selectedMission;
    string lv_selectedScene;

    // Automatic Variable Declarations
    const int autoF8129716_ae = 4;
    const int autoF8129716_ai = 1;
    const int autoA93C12E8_ae = 3;
    const int autoA93C12E8_ai = 1;

    // Variable Initialization
    lv_difficultyIndex = 1;

    // Implementation
    if ((lib1926661B_gv_kC_ArchivesSynced == true)) {
        DialogSetVisible(lib1926661B_gv_kC_ArchivesLoadingDialog, PlayerGroupAll(), false);
    }
    else {
        DialogSetVisible(lib1926661B_gv_kC_ArchivesLoadingDialog, PlayerGroupAll(), true);
    }
    DialogControlSetVisible(lib1926661B_gv_kC_ArchivesQuitButton, PlayerGroupAll(), true);
    DialogControlSetVisible(lib1926661B_gv_kC_ArchivesBackButton, PlayerGroupAll(), false);
    if ((BattleReportPanelGetSelectedBattleReport(1) == c_invalidBattleReportId)) {
        DialogControlSetVisible(lib1926661B_gv_kC_ArchivesScenePanel, PlayerGroupAll(), false);
        DialogControlSetVisible(lib1926661B_gv_kC_ArchivesMissionPanel, PlayerGroupAll(), false);
    }
    else if ((DataTableGetInt(true, lib1926661B_gf_KC_ArchivesDataTypeString(BattleReportPanelGetSelectedBattleReport(1))) == lib1926661B_ge_KC_ArchivesType_Mission)) {
        lv_selectedMission = (DataTableGetString(true, lib1926661B_gf_KC_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
        DialogControlSetVisible(lib1926661B_gv_kC_ArchivesScenePanel, PlayerGroupAll(), false);
        DialogControlSetVisible(lib1926661B_gv_kC_ArchivesMissionPanel, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesMissionTitle, lib1926661B_gf_StoryMapName(lv_selectedMission), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_kC_ArchivesMissionImage, lib1926661B_gf_StoryMapLoadingScreenImage(lv_selectedMission), PlayerGroupAll());
        DialogControlSetVisible(lib1926661B_gv_kC_ArchivesMissionBonusLabel, PlayerGroupAll(), false);
        if ((lib1926661B_gv_kC_ArchivesSynced == true)) {
            DialogControlSetVisible(lib1926661B_gv_kC_ArchivesDifficultyPanel, PlayerGroupAll(), true);
            lv_difficultyIndex = 1;
            for ( ; ( (autoF8129716_ai >= 0 && lv_difficultyIndex <= autoF8129716_ae) || (autoF8129716_ai < 0 && lv_difficultyIndex >= autoF8129716_ae) ) ; lv_difficultyIndex += autoF8129716_ai ) {
                if ((lib1926661B_gf_MissionCompleteBestTime(lv_selectedMission, lib1926661B_gf_KC_DifficultyFromIndex(lv_difficultyIndex)) <= 0)) {
                    libNtve_gf_SetDialogItemStyle(lib1926661B_gv_kC_ArchivesDifficultyLabels[lv_difficultyIndex], "VoidMissionArchiveDifficultyLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib1926661B_gv_kC_ArchivesDifficultyTimes[lv_difficultyIndex], "VoidMissionArchiveDifficultyTimeLabel", PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemStyle(lib1926661B_gv_kC_ArchivesDifficultyLabels[lv_difficultyIndex], "VoidMissionArchiveDifficultyCompletedLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib1926661B_gv_kC_ArchivesDifficultyTimes[lv_difficultyIndex], "VoidMissionArchiveDifficultyTimeCompletedLabel", PlayerGroupAll());
                }
            }
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesDifficultyLabels[1], DifficultyNameCampaign(1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesDifficultyTimes[1], lib1926661B_gf_FormatTimeCampaign(MaxI(lib1926661B_gf_MissionCompleteBestTime(lv_selectedMission, 1), 0)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesDifficultyLabels[2], DifficultyNameCampaign(2), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesDifficultyTimes[2], lib1926661B_gf_FormatTimeCampaign(MaxI(lib1926661B_gf_MissionCompleteBestTime(lv_selectedMission, 2), 0)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesDifficultyLabels[3], DifficultyNameCampaign(3), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesDifficultyTimes[3], lib1926661B_gf_FormatTimeCampaign(MaxI(lib1926661B_gf_MissionCompleteBestTime(lv_selectedMission, 3), 0)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesDifficultyLabels[4], DifficultyNameCampaign(4), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesDifficultyTimes[4], lib1926661B_gf_FormatTimeCampaign(MaxI(lib1926661B_gf_MissionCompleteBestTime(lv_selectedMission, 4), 0)), PlayerGroupAll());
        }
        else {
            DialogControlSetVisible(lib1926661B_gv_kC_ArchivesDifficultyPanel, PlayerGroupAll(), false);
        }
        DialogControlSetVisible(lib1926661B_gv_kC_ArchivesAchievementPanel, PlayerGroupAll(), true);
        lv_index = 1;
        for ( ; ( (autoA93C12E8_ai >= 0 && lv_index <= autoA93C12E8_ae) || (autoA93C12E8_ai < 0 && lv_index >= autoA93C12E8_ae) ) ; lv_index += autoA93C12E8_ai ) {
            libNtve_gf_SetDialogItemAchievement(lib1926661B_gv_kC_ArchivesAchievements[lv_index], UserDataGetGameLink("Episode1Maps", lib1926661B_gf_KC_MapUserDataInstance(lv_selectedMission), "Achievements", lv_index), PlayerGroupAll());
        }
    }
    else if ((DataTableGetInt(true, lib1926661B_gf_KC_ArchivesDataTypeString(BattleReportPanelGetSelectedBattleReport(1))) == lib1926661B_ge_KC_ArchivesType_Scene)) {
        lv_selectedScene = UserDataInstanceFromReference(DataTableGetString(true, lib1926661B_gf_KC_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
        DialogControlSetVisible(lib1926661B_gv_kC_ArchivesScenePanel, PlayerGroupAll(), true);
        DialogControlSetVisible(lib1926661B_gv_kC_ArchivesMissionPanel, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_kC_ArchivesSceneImage, UserDataGetImagePath("Scenes", lv_selectedScene, "Archives Image", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ArchivesSceneTitle, lib1926661B_gf_StorySceneName(lv_selectedScene), PlayerGroupAll());
    }
}

int lib1926661B_gf_KC_ArchivesScenePriority (string lp_scene) {
    // Automatic Variable Declarations
    string auto59F1384B_val;

    // Implementation
    auto59F1384B_val = lp_scene;
    if (auto59F1384B_val == "PrologueIntro") {
        return (lib1926661B_gf_KC_ArchivesMissionPriority("UEDFL_EP01M01")+1);
    }
    else if (auto59F1384B_val == "PrologueEnd") {
        return (lib1926661B_gf_KC_ArchivesMissionPriority("UEDFL_EP01M08")-1);
    }
    else {
    }
    return 1000;
}

int lib1926661B_gf_KC_ArchivesMissionPriority (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return (500+((lib1926661B_gf_MissionStatusAge(lp_mission, lib1926661B_ge_MissionStatus_Completed)+1)*5));
}

string lib1926661B_gf_PU_ArchivesSelectedScene () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(DataTableGetString(true, lib1926661B_gf_KC_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
}

void lib1926661B_gf_PU_ArchivesSetUV (string lp_side, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(lib1926661B_gv_kC_ArchivesMissionImage, PlayerGroupAll(), ("Scroll" + lp_side + "Play"));
    DialogControlSetAnimationTime(lib1926661B_gv_kC_ArchivesMissionImage, PlayerGroupAll(), ("Scroll" + lp_side), lp_value);
    DialogControlSendAnimationEvent(lib1926661B_gv_kC_ArchivesMissionImage, PlayerGroupAll(), ("Scroll" + lp_side + "Pause"));
}

void lib1926661B_gf_PU_ArchivesSetUVs (fixed lp_centerX, fixed lp_centerY, fixed lp_scale) {
    // Variable Declarations
    fixed lv_ratioX;
    fixed lv_ratioY;
    fixed lv_top;
    fixed lv_bottom;
    fixed lv_left;
    fixed lv_right;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_ratioX = (IntToFixed(lib1926661B_gv_pUC_ArchivesMissionTargetWidth) / IntToFixed(lib1926661B_gv_pUC_ArchivesMissionLoadingWidth));
    lv_ratioY = (IntToFixed(lib1926661B_gv_pUC_ArchivesMissionTargetHeight) / IntToFixed(lib1926661B_gv_pUC_ArchivesMissionLoadingHeight));
    lv_top = (lp_centerY-(lv_ratioY*lp_scale/2.0));
    lv_bottom = (lp_centerY+(lv_ratioY*lp_scale/2.0));
    lv_left = (lp_centerX-(lv_ratioX*lp_scale/2.0));
    lv_right = (lp_centerX+(lv_ratioX*lp_scale/2.0));
    if (((lv_left <= 0.0) || (lv_right >= 1.0) || (lv_top <= 0.0) || (lv_bottom >= 1.0))) {
        return ;
    }

    lib1926661B_gf_PU_ArchivesSetUV("Top", lv_top);
    lib1926661B_gf_PU_ArchivesSetUV("Bottom", lv_bottom);
    lib1926661B_gf_PU_ArchivesSetUV("Left", lv_left);
    lib1926661B_gf_PU_ArchivesSetUV("Right", lv_right);
}

bool lib1926661B_gf_CampaignDebugModeIsOn (string lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    return GameIsDebugOptionSet((lp_mode), 1);
}

void lib1926661B_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gv_kC_TechLimitsCallback = lp_callbackTrigger;
}

void lib1926661B_gf_PurchaseStorymodeTech () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameIsTransitionMap() == true)) {
        return ;
    }

    if ((lib1926661B_gf_MissionStatusCheck(lib1926661B_gf_CurrentMap(), lib1926661B_ge_MissionStatus_Available) == false)) {
        lib1926661B_gf_KC_DefaultTechProgress(lib1926661B_gf_CurrentMap());
    }

    TriggerExecute(lib1926661B_gv_kC_TechLimitsCallback, true, false);
}

void lib1926661B_gf_KC_DefaultTechProgress (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    lib1926661B_gf_KC_SaveAllTransitionData(false, false, false);
    lib1926661B_gf_KC_ApplyTech(1);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: KL_StartGameTimer
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KL_StartGameTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto3F592F28_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kL_GameTimer = TimerCreate();
    TimerStart(lib1926661B_gv_kL_GameTimer, c_timerDurationInfinite, false, c_timeGame);
    auto3F592F28_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto3F592F28_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_player) == true)) {
            TimerPause(lib1926661B_gv_kL_GameTimer, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KL_StartGameTimer_Init () {
    lib1926661B_gt_KL_StartGameTimer = TriggerCreate("lib1926661B_gt_KL_StartGameTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_GamePaused
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KL_GamePaused_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(lib1926661B_gv_kL_GameTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KL_GamePaused_Init () {
    lib1926661B_gt_KL_GamePaused = TriggerCreate("lib1926661B_gt_KL_GamePaused_Func");
    lib1926661B_gf_CinematicModeStarted(lib1926661B_gt_KL_GamePaused);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_GameResumed
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KL_GameResumed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(lib1926661B_gv_kL_GameTimer, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KL_GameResumed_Init () {
    lib1926661B_gt_KL_GameResumed = TriggerCreate("lib1926661B_gt_KL_GameResumed_Func");
    lib1926661B_gf_CinematicModeEnded(lib1926661B_gt_KL_GameResumed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CheckPorgressionAchievements
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CheckPorgressionAchievements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_KC_CheckProgressionAchievements();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CheckPorgressionAchievements_Init () {
    lib1926661B_gt_KC_CheckPorgressionAchievements = TriggerCreate("lib1926661B_gt_KC_CheckPorgressionAchievements_Func");
    libAE8FC9D3_gf_AchievementAwarded(lib1926661B_gt_KC_CheckPorgressionAchievements);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ObjectiveRePingController
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ObjectiveRePingController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2E653B32_ae;
    int auto2E653B32_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        auto2E653B32_ae = (lib1926661B_gv_kC_RePing_MAX - 1);
        auto2E653B32_var = 0;
        for ( ; auto2E653B32_var <= auto2E653B32_ae; auto2E653B32_var += 1 ) {
            if ((lib1926661B_gv_kC_RePingArray[auto2E653B32_var] != c_invalidPingId) && (PingIsVisible(lib1926661B_gv_kC_RePingArray[auto2E653B32_var]) == true)) {
                lib1926661B_gf_ObjectiveRePing(lib1926661B_gv_kC_RePingArray[auto2E653B32_var]);
            }

        }
        Wait(lib1926661B_gv_kC_RePingInterval, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ObjectiveRePingController_Init () {
    lib1926661B_gt_KC_ObjectiveRePingController = TriggerCreate("lib1926661B_gt_KC_ObjectiveRePingController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    lib1926661B_gv_kC_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    lib1926661B_gv_kC_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueue_Init () {
    lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueue = TriggerCreate("lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_Abort Mission
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_AbortMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto8C8FA7B1_g;
    int auto8C8FA7B1_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetNextMap(("UEDFL/" + lib1926661B_gf_StoryMapFile("UEDStory")));
    if ((lib1926661B_gf_CurrentMap() == "UEDFL_EP01M10") && (lib1926661B_gv_kCX_IsVictoryPlayAgain == true) && (lib1926661B_gv_kCX_IsSimulation == false)) {
        UnitPauseAll(true);
        auto8C8FA7B1_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
        auto8C8FA7B1_u = UnitGroupCount(auto8C8FA7B1_g, c_unitCountAll);
        for (;; auto8C8FA7B1_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto8C8FA7B1_g, auto8C8FA7B1_u);
            if (lv_indexUnit == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(lv_indexUnit, true);
            libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        }
        UISetWorldVisible(PlayerGroupAll(), false);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        TransmissionClearAll();
        ConversationDataStop();
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "SetVisibility");
        libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
        TriggerQueueClear(c_triggerQueueRemove);
        TriggerQueuePause(true);
        SoundStopAllTriggerSounds(false);
        lib1926661B_gf_KC_CampaignVictory();
    }
    else {
        lib1926661B_gf_KC_SaveAllTransitionData(false, false, (c_gameOverDefeat == c_gameOverDefeat));
        GameSetNextMap(("UEDFL/" + lib1926661B_gf_StoryMapFile("UEDStory")));
        lib1926661B_gf_PrepareForStoryMode(c_gameOverDefeat, PlayerDifficulty(1));
        GameOver(1, c_gameOverDefeat, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_AbortMission_Init () {
    lib1926661B_gt_KC_AbortMission = TriggerCreate("lib1926661B_gt_KC_AbortMission_Func");
    TriggerAddEventGameMenuItemSelected(lib1926661B_gt_KC_AbortMission, c_playerAny, c_gameMenuDialogGenericButton1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CampaignUnit
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CampaignUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoCAA0C176_g;
    int autoCAA0C176_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindMission) == true) || (lib1926661B_gf_StoryMapTypeCheck(lib1926661B_gf_CurrentMap(), c_mapKindUpgrade) == true)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoCAA0C176_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCAA0C176_u = UnitGroupCount(autoCAA0C176_g, c_unitCountAll);
    for (;; autoCAA0C176_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoCAA0C176_g, autoCAA0C176_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGetOwner(lv_indexUnit) == 1)) {
            lib1926661B_gf_KC_UseUnitNameAsUnitTip(lv_indexUnit);
        }

        if ((UnitGetOwner(lv_indexUnit) == 0) && (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true)) {
            TextExpressionSetToken("Param/Expression/lib_1926661B_15AB0274", "NAME", UnitTypeGetName(UnitGetType(lv_indexUnit)));
            UnitSetInfoTip(lv_indexUnit, TextExpressionAssemble("Param/Expression/lib_1926661B_15AB0274"));
            lib1926661B_gf_KC_UseUnitNameAsUnitTip(lv_indexUnit);
        }

        if ((UnitGetOwner(lv_indexUnit) == 0) && (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true)) {
            TextExpressionSetToken("Param/Expression/lib_1926661B_F0AEE206", "NAME", UnitTypeGetName(UnitGetType(lv_indexUnit)));
            UnitSetInfoTip(lv_indexUnit, TextExpressionAssemble("Param/Expression/lib_1926661B_F0AEE206"));
            lib1926661B_gf_KC_UseUnitNameAsUnitTip(lv_indexUnit);
        }

        if ((lib1926661B_gf_KC_DisplayResourcePickupInfo() == true) && (lib1926661B_gf_KC_ResourcePickupUnit(lv_indexUnit) == true)) {
            lib1926661B_gf_SetUnitInfoTextCampaignDetailed(lv_indexUnit, StringExternal(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_indexUnit), "InfoText", c_playerAny)), StringExternal(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_indexUnit), "HighlightTooltip", c_playerAny)), StringExternal("Param/Value/lib_1926661B_606ECC4E"));
        }

    }
    TriggerEnable(lib1926661B_gt_KC_CampaignUnitCreated, true);
    TriggerEnable(lib1926661B_gt_KC_CampaignUnitChangeOwner, true);
    TriggerEnable(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CampaignUnit_Init () {
    lib1926661B_gt_KC_CampaignUnit = TriggerCreate("lib1926661B_gt_KC_CampaignUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CampaignUnitCreated
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CampaignUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_KC_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CampaignUnitCreated_Init () {
    lib1926661B_gt_KC_CampaignUnitCreated = TriggerCreate("lib1926661B_gt_KC_CampaignUnitCreated_Func");
    TriggerEnable(lib1926661B_gt_KC_CampaignUnitCreated, false);
    TriggerAddEventUnitCreated(lib1926661B_gt_KC_CampaignUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CampaignUnitChangeOwner
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CampaignUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_KC_UseUnitNameAsUnitTip(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CampaignUnitChangeOwner_Init () {
    lib1926661B_gt_KC_CampaignUnitChangeOwner = TriggerCreate("lib1926661B_gt_KC_CampaignUnitChangeOwner_Func");
    TriggerEnable(lib1926661B_gt_KC_CampaignUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(lib1926661B_gt_KC_CampaignUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CampaignUnitInfoUnitMorphes
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_KC_UseUnitNameAsUnitTip(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes_Init () {
    lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes = TriggerCreate("lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes_Func");
    TriggerEnable(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SpineCrawlerUproot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SpineCrawlerRoot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SporeCrawlerUproot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SporeCrawlerRoot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("CreepTumorUsed", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToLair", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToHive", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToImpalerDen", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToLurkerDen", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToGreaterSpireBroodlord", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToGreaterSpireViper", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes, null, AbilityCommand("ExtractorToAutomatedExtractor", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ResourcePickupTip
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ResourcePickupTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1926661B_gf_KC_DisplayResourcePickupInfo() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib1926661B_gt_KC_ResourcePickup, true);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("CampaignTips", "Zealot", "Name", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("CampaignTips", "Zealot", "Description", 1), UserDataGetText("CampaignTips", "Zealot", "Name", 1), UserDataGetImagePath("CampaignTips", "Zealot", "Icon", 1));
    HelpPanelSetHelpItemDarkenedWhenViewed(HelpPanelLastCreatedHelpItem(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ResourcePickupTip_Init () {
    lib1926661B_gt_KC_ResourcePickupTip = TriggerCreate("lib1926661B_gt_KC_ResourcePickupTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ResourcePickup
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ResourcePickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoCB633224_g;
    int autoCB633224_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gv_kC_GameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UserDataSetInt("StoryStates", "(Mission)ResourcePickedTipPlayed", "value", 1, 1);
    autoCB633224_g = UnitGroup(null, 0, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCB633224_u = UnitGroupCount(autoCB633224_g, c_unitCountAll);
    for (;; autoCB633224_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoCB633224_g, autoCB633224_u);
        if (lv_indexUnit == null) { break; }
        if ((lib1926661B_gf_KC_ResourcePickupUnit(lv_indexUnit) == true)) {
            lib1926661B_gf_SetUnitInfoTextCampaignDetailed(lv_indexUnit, StringExternal(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_indexUnit), "InfoText", c_playerAny)), StringExternal(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_indexUnit), "HighlightTooltip", c_playerAny)), null);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ResourcePickup_Init () {
    lib1926661B_gt_KC_ResourcePickup = TriggerCreate("lib1926661B_gt_KC_ResourcePickup_Func");
    TriggerEnable(lib1926661B_gt_KC_ResourcePickup, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_ResourcePickup, null, AbilityCommand("PickupMinerals100", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_ResourcePickup, null, AbilityCommand("PickupGas100", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionTipClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionTipClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_kC_MissionHelpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1926661B_gv_kC_MissionHelpButtonTipPanel != c_invalidDialogControlId)) {
        DialogControlInvokeAsString(lib1926661B_gv_kC_MissionHelpButtonTipPanel, PlayerGroupAll(), "CloseTip_Terr", null, null, null, null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionTipClicked_Init () {
    lib1926661B_gt_KC_MissionTipClicked = TriggerCreate("lib1926661B_gt_KC_MissionTipClicked_Func");
    TriggerEnable(lib1926661B_gt_KC_MissionTipClicked, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_MissionTipClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CineModeStart
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CineModeStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(lib1926661B_gt_KC_CineModeEnd, true);
    TriggerSendEvent("CineModeStarted");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CineModeStart_Init () {
    lib1926661B_gt_KC_CineModeStart = TriggerCreate("lib1926661B_gt_KC_CineModeStart_Func");
    TriggerAddEventTimePeriodic(lib1926661B_gt_KC_CineModeStart, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CineModeEnd
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CineModeEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(lib1926661B_gt_KC_CineModeStart, true);
    TriggerSendEvent("CineModeEnded");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CineModeEnd_Init () {
    lib1926661B_gt_KC_CineModeEnd = TriggerCreate("lib1926661B_gt_KC_CineModeEnd_Func");
    TriggerEnable(lib1926661B_gt_KC_CineModeEnd, false);
    TriggerAddEventTimePeriodic(lib1926661B_gt_KC_CineModeEnd, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicModeOn
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_CinematicModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "CinematicMode", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_CinematicModeOn_Init () {
    lib1926661B_gt_CinematicModeOn = TriggerCreate("lib1926661B_gt_CinematicModeOn_Func");
    TriggerAddEventGeneric(lib1926661B_gt_CinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicModeOff
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_CinematicModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "CinematicMode", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_CinematicModeOff_Init () {
    lib1926661B_gt_CinematicModeOff = TriggerCreate("lib1926661B_gt_CinematicModeOff_Func");
    TriggerAddEventGeneric(lib1926661B_gt_CinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED_CycleCreditSplash
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_UED_CycleCreditSplash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB67457FA_val;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(lib1926661B_gv_uED_CreditsPanel, PlayerGroupAll(), "FadeOut");
    Wait(1.0, c_timeReal);
    lib1926661B_gv_uED_CreditsCycle += 1;
    autoB67457FA_val = lib1926661B_gv_uED_CreditsCycle;
    if (autoB67457FA_val == 1) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, ("Assets/Textures/loading_ued_prologue_nologo.dds"), PlayerGroupAll());
    }
    else if (autoB67457FA_val == 2) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M01_Loading.tga", PlayerGroupAll());
    }
    else if (autoB67457FA_val == 3) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M02_Loading.tga", PlayerGroupAll());
    }
    else if (autoB67457FA_val == 4) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M03_Loading.tga", PlayerGroupAll());
    }
    else if (autoB67457FA_val == 5) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M04_Loading.tga", PlayerGroupAll());
    }
    else if (autoB67457FA_val == 6) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M05_Loading.tga", PlayerGroupAll());
    }
    else if (autoB67457FA_val == 7) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M06_Loading.tga", PlayerGroupAll());
    }
    else if (autoB67457FA_val == 8) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M07_Loading.tga", PlayerGroupAll());
    }
    else if (autoB67457FA_val == 9) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M08_Loading.tga", PlayerGroupAll());
    }
    else if (autoB67457FA_val == 10) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M09_Loading.tga", PlayerGroupAll());
    }
    else if (autoB67457FA_val == 11) {
        libNtve_gf_SetDialogItemImage(lib1926661B_gv_uED_CreditsBackground, "Assets\\Splashes\\EP01M10_Loading.tga", PlayerGroupAll());
    }
    else {
    }
    DialogControlSendAnimationEvent(lib1926661B_gv_uED_CreditsPanel, PlayerGroupAll(), "FadeIn");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_UED_CycleCreditSplash_Init () {
    lib1926661B_gt_UED_CycleCreditSplash = TriggerCreate("lib1926661B_gt_UED_CycleCreditSplash_Func");
    TriggerEnable(lib1926661B_gt_UED_CycleCreditSplash, false);
    TriggerAddEventTimePeriodic(lib1926661B_gt_UED_CycleCreditSplash, 15.6, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED_CreditsButtonPushed
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_UED_CreditsButtonPushed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_uED_CreditsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent("CreditsExitButtonPressed");
    TriggerEnable(lib1926661B_gt_UED_HideCredits, false);
    if ((lib1926661B_gf_CurrentMap() == "UEDFL_EP01M10")) {
        Wait(0.1, c_timeGame);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_6C9FA21E"), false);
        if ((lib1926661B_gv_kCX_IsSimulation == false)) {
            lib1926661B_gf_LaunchMission("UEDStory", (lib1926661B_gv_kC_InCompletedCampaign == true), 3);
        }

        GameOver(1, c_gameOverVictory, false, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_UED_CreditsButtonPushed_Init () {
    lib1926661B_gt_UED_CreditsButtonPushed = TriggerCreate("lib1926661B_gt_UED_CreditsButtonPushed_Func");
    TriggerAddEventDialogControl(lib1926661B_gt_UED_CreditsButtonPushed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED_HideCredits
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_UED_HideCredits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(174.0, c_timeReal);
    if ((TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        lib1926661B_gf_ShowHideCreditsPanel(false);
        TriggerSendEvent("CreditsExitButtonPressed");
        TriggerEnable(lib1926661B_gt_UED_HideCredits, false);
        Wait(0.1, c_timeGame);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_1926661B_916A06D0"), false);
        if ((lib1926661B_gf_CurrentMap() != "UEDStory") && (lib1926661B_gv_kCX_IsSimulation == false)) {
            lib1926661B_gf_LaunchMission("UEDStory", (lib1926661B_gv_kC_InCompletedCampaign == true), 3);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_UED_HideCredits_Init () {
    lib1926661B_gt_UED_HideCredits = TriggerCreate("lib1926661B_gt_UED_HideCredits_Func");
    TriggerEnable(lib1926661B_gt_UED_HideCredits, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_LoreWindowClosed
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KL_LoreWindowClosed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_kL_LoreWindow.lv_closeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kL_LoreWindowVisible = false;
    Wait(2.0, c_timeGame);
    DialogControlSetVisible(lib1926661B_gv_kL_LoreWindow.lv_window, PlayerGroupAll(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("Lore", lib1926661B_gv_kL_LastLoreShown, "Title", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("Lore", lib1926661B_gv_kL_LastLoreShown, "Description", 1), UserDataGetText("Lore", lib1926661B_gv_kL_LastLoreShown, "Title", 1), "Assets\\Textures\\ui_tip_questionmark.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KL_LoreWindowClosed_Init () {
    lib1926661B_gt_KL_LoreWindowClosed = TriggerCreate("lib1926661B_gt_KL_LoreWindowClosed_Func");
    TriggerAddEventDialogControl(lib1926661B_gt_KL_LoreWindowClosed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_LoreWindowCineHide
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_LoreWindowCineHide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1926661B_gv_kL_LoreWindowVisible == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kL_LoreWindowVisible = false;
    Wait(2.0, c_timeGame);
    DialogControlSetVisible(lib1926661B_gv_kL_LoreWindow.lv_window, PlayerGroupAll(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("Lore", lib1926661B_gv_kL_LastLoreShown, "Title", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("Lore", lib1926661B_gv_kL_LastLoreShown, "Description", 1), UserDataGetText("Lore", lib1926661B_gv_kL_LastLoreShown, "Title", 1), "Assets\\Textures\\ui_tip_questionmark.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_LoreWindowCineHide_Init () {
    lib1926661B_gt_KC_LoreWindowCineHide = TriggerCreate("lib1926661B_gt_KC_LoreWindowCineHide_Func");
    lib1926661B_gf_CinematicModeStarted(lib1926661B_gt_KC_LoreWindowCineHide);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_UpdateTimerWindow
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KL_UpdateTimerWindow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoCB222391_ae = 3;
    const int autoCB222391_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1926661B_gv_timerPanel[1].lv_timerActive == false) && (lib1926661B_gv_timerPanel[2].lv_timerActive == false) && (lib1926661B_gv_timerPanel[3].lv_timerActive == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    lv_index = 1;
    for ( ; ( (autoCB222391_ai >= 0 && lv_index <= autoCB222391_ae) || (autoCB222391_ai < 0 && lv_index >= autoCB222391_ae) ) ; lv_index += autoCB222391_ai ) {
        if ((lib1926661B_gv_timerPanel[lv_index].lv_timerActive == true)) {
            lib1926661B_gf_KL_UpdateTimerWindow(lv_index);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KL_UpdateTimerWindow_Init () {
    lib1926661B_gt_KL_UpdateTimerWindow = TriggerCreate("lib1926661B_gt_KL_UpdateTimerWindow_Func");
    TriggerAddEventTimePeriodic(lib1926661B_gt_KL_UpdateTimerWindow, 0.4, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_TimerExpires1
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KL_TimerExpires1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_activeIndex = 1;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventTimer() == lib1926661B_gv_kL_WindowTimer[1]))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib1926661B_gf_ShowHideTimerWindowLotC(false, lv_activeIndex);
    lib1926661B_gv_kL_WindowTimer[1] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KL_TimerExpires1_Init () {
    lib1926661B_gt_KL_TimerExpires1 = TriggerCreate("lib1926661B_gt_KL_TimerExpires1_Func");
    TriggerEnable(lib1926661B_gt_KL_TimerExpires1, false);
    TriggerAddEventTimer(lib1926661B_gt_KL_TimerExpires1, lib1926661B_gv_kL_WindowTimer[1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_TimerExpires2
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KL_TimerExpires2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_activeIndex = 2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventTimer() == lib1926661B_gv_kL_WindowTimer[2]))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib1926661B_gf_ShowHideTimerWindowLotC(false, lv_activeIndex);
    lib1926661B_gv_kL_WindowTimer[2] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KL_TimerExpires2_Init () {
    lib1926661B_gt_KL_TimerExpires2 = TriggerCreate("lib1926661B_gt_KL_TimerExpires2_Func");
    TriggerEnable(lib1926661B_gt_KL_TimerExpires2, false);
    TriggerAddEventTimer(lib1926661B_gt_KL_TimerExpires2, lib1926661B_gv_kL_WindowTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_TimerExpires3
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KL_TimerExpires3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_activeIndex = 3;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventTimer() == lib1926661B_gv_kL_WindowTimer[3]))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib1926661B_gf_ShowHideTimerWindowLotC(false, lv_activeIndex);
    lib1926661B_gv_kL_WindowTimer[3] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KL_TimerExpires3_Init () {
    lib1926661B_gt_KL_TimerExpires3 = TriggerCreate("lib1926661B_gt_KL_TimerExpires3_Func");
    TriggerEnable(lib1926661B_gt_KL_TimerExpires3, false);
    TriggerAddEventTimer(lib1926661B_gt_KL_TimerExpires3, lib1926661B_gv_kL_WindowTimer[3]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TimerWindowFlash
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_PU_TimerWindowFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(lib1926661B_gv_kC_TimerWindowHighlightFrame, PlayerGroupAll(), "HighlightKL");
    Wait(lib1926661B_gv_kC_TimerWindowHighlightDuration, c_timeReal);
    DialogControlSendAnimationEvent(lib1926661B_gv_kC_TimerWindowHighlightFrame, PlayerGroupAll(), "HighlightStopKL");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_PU_TimerWindowFlash_Init () {
    lib1926661B_gt_PU_TimerWindowFlash = TriggerCreate("lib1926661B_gt_PU_TimerWindowFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TimerWindowThresholdCrossed
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_PU_TimerWindowThresholdCrossed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(lib1926661B_gv_kCTimerWindowTimer) <= lib1926661B_gv_kC_TimerWindowDangerThreshold) && (lib1926661B_gv_kC_TimerWindowInDanger == false)) {
        lib1926661B_gv_kC_TimerWindowInDanger = true;
        DialogControlSendAnimationEvent(lib1926661B_gv_kC_TimerWindowHighlightFrame, PlayerGroupAll(), "DangerKL");
    }
    else if ((TimerGetRemaining(lib1926661B_gv_kCTimerWindowTimer) > lib1926661B_gv_kC_TimerWindowDangerThreshold) && (lib1926661B_gv_kC_TimerWindowInDanger == true)) {
        lib1926661B_gv_kC_TimerWindowInDanger = false;
        DialogControlSendAnimationEvent(lib1926661B_gv_kC_TimerWindowHighlightFrame, PlayerGroupAll(), "DangerStopKL");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_PU_TimerWindowThresholdCrossed_Init () {
    lib1926661B_gt_PU_TimerWindowThresholdCrossed = TriggerCreate("lib1926661B_gt_PU_TimerWindowThresholdCrossed_Func");
    TriggerEnable(lib1926661B_gt_PU_TimerWindowThresholdCrossed, false);
    TriggerAddEventTimePeriodic(lib1926661B_gt_PU_TimerWindowThresholdCrossed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TimerWindowLoadUpdate
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_PU_TimerWindowLoadUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kC_TimerWindowInDanger = false;
    TriggerExecute(lib1926661B_gt_PU_TimerWindowThresholdCrossed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_PU_TimerWindowLoadUpdate_Init () {
    lib1926661B_gt_PU_TimerWindowLoadUpdate = TriggerCreate("lib1926661B_gt_PU_TimerWindowLoadUpdate_Func");
    TriggerEnable(lib1926661B_gt_PU_TimerWindowLoadUpdate, false);
    TriggerAddEventLoadGameDone(lib1926661B_gt_PU_TimerWindowLoadUpdate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_FlashArmyButtonHelpTip
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_FlashArmyButtonHelpTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(lib1926661B_gv_kC_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Prot", StringExternal("Param/Value/lib_1926661B_2E4E132D"), null, null, null);
    TriggerEnable(lib1926661B_gt_KC_ArmyButtonUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_FlashArmyButtonHelpTip_Init () {
    lib1926661B_gt_KC_FlashArmyButtonHelpTip = TriggerCreate("lib1926661B_gt_KC_FlashArmyButtonHelpTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ArmyButtonUsed
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ArmyButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_ArmyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(lib1926661B_gv_kC_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Zerg", StringExternal("Param/Value/lib_1926661B_3D4F09CA"), null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ArmyButtonUsed_Init () {
    lib1926661B_gt_KC_ArmyButtonUsed = TriggerCreate("lib1926661B_gt_KC_ArmyButtonUsed_Func");
    TriggerEnable(lib1926661B_gt_KC_ArmyButtonUsed, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_ArmyButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_ArmyButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
    TriggerAddEventKeyPressed(lib1926661B_gt_KC_ArmyButtonUsed, c_playerAny, c_keyO, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ArmyButtonMissionInit
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ArmyButtonMissionInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    if ((lib1926661B_gf_DifficultyValueInteger(1, 0) == 1)) {
        Wait(1.0, c_timeGame);
        while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            Wait(0.5, c_timeGame);
        }
        Wait(0.5, c_timeGame);
        lib1926661B_gv_kC_ArmyButtonTipReady = true;
    }
    else {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ArmyButtonMissionInit_Init () {
    lib1926661B_gt_KC_ArmyButtonMissionInit = TriggerCreate("lib1926661B_gt_KC_ArmyButtonMissionInit_Func");
    TriggerEnable(lib1926661B_gt_KC_ArmyButtonMissionInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_BB_BossHPChanged
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_BB_BossHPChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_bossSet;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(lib1926661B_gv_pP_BB_Boss) == false) || (lib1926661B_gv_pP_BB_Boss == null))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        lib1926661B_gf_RefreshSingularBossBarSwarmCampaign();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_BB_BossHPChanged_Init () {
    lib1926661B_gt_KC_BB_BossHPChanged = TriggerCreate("lib1926661B_gt_KC_BB_BossHPChanged_Func");
    TriggerEnable(lib1926661B_gt_KC_BB_BossHPChanged, false);
    TriggerAddEventUnitProperty(lib1926661B_gt_KC_BB_BossHPChanged, UnitRefFromVariable("lib1926661B_gv_pP_BB_Boss"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib1926661B_gt_KC_BB_BossHPChanged, UnitRefFromVariable("lib1926661B_gv_pP_BB_Boss"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_BB_MouseHoverText
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_PP_BB_MouseHoverText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC32D9971_val;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_pP_BB_BorderImage))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC32D9971_val = EventDialogControlEventType();
    if (autoC32D9971_val == c_triggerControlEventTypeMouseEnter) {
        DialogControlSetVisible(lib1926661B_gv_pP_BB_HpLabel, PlayerGroupAll(), true);
    }
    else if (autoC32D9971_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(lib1926661B_gv_pP_BB_HpLabel, PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_PP_BB_MouseHoverText_Init () {
    lib1926661B_gt_PP_BB_MouseHoverText = TriggerCreate("lib1926661B_gt_PP_BB_MouseHoverText_Func");
    TriggerEnable(lib1926661B_gt_PP_BB_MouseHoverText, false);
    TriggerAddEventDialogControl(lib1926661B_gt_PP_BB_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(lib1926661B_gt_PP_BB_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(1) == false)) {
        lib1926661B_gf_KC_UpdateHeroPanel(1);
        lib1926661B_gf_KC_UpdateHeroPanel(2);
        lib1926661B_gf_KC_UpdateHeroPanel(3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_HeroPanelUpdate_Init () {
    lib1926661B_gt_KC_HeroPanelUpdate = TriggerCreate("lib1926661B_gt_KC_HeroPanelUpdate_Func");
    TriggerEnable(lib1926661B_gt_KC_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(lib1926661B_gt_KC_HeroPanelUpdate, lib1926661B_gv_kC_HeroUIUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_HeroUIUnitDamaged
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_HeroUIUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == lib1926661B_gv_kC_HeroPanel[1].lv_unit)) {
        lv_index = 1;
    }
    else if ((EventUnit() == lib1926661B_gv_kC_HeroPanel[2].lv_unit)) {
        lv_index = 2;
    }
    else if ((EventUnit() == lib1926661B_gv_kC_HeroPanel[3].lv_unit)) {
        lv_index = 3;
    }
    else if (true) {
        return true;
    }
    lib1926661B_gv_kC_HeroUIDamage += EventUnitDamageAmount();
    lv_damage = FixedToInt(lib1926661B_gv_kC_HeroUIDamage);
    if ((lv_damage < 1)) {
        return true;
    }

    lib1926661B_gv_kC_HeroUIDamage = 0.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_HeroUIUnitDamaged_Init () {
    lib1926661B_gt_KC_HeroUIUnitDamaged = TriggerCreate("lib1926661B_gt_KC_HeroUIUnitDamaged_Func");
    TriggerEnable(lib1926661B_gt_KC_HeroUIUnitDamaged, false);
    TriggerAddEventUnitDamaged(lib1926661B_gt_KC_HeroUIUnitDamaged, UnitRefFromVariable("lib1926661B_gv_kC_HeroPanel[1].lv_unit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib1926661B_gt_KC_HeroUIUnitDamaged, UnitRefFromVariable("lib1926661B_gv_kC_HeroPanel[2].lv_unit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib1926661B_gt_KC_HeroUIUnitDamaged, UnitRefFromVariable("lib1926661B_gv_kC_HeroPanel[3].lv_unit"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_HeroUnitDead
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_HeroUnitDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnit;

    // Automatic Variable Declarations
    unit auto6711A496_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == lib1926661B_gv_kC_HeroPanel[1].lv_unit) || (EventUnit() == lib1926661B_gv_kC_HeroPanel[2].lv_unit) || (EventUnit() == lib1926661B_gv_kC_HeroPanel[3].lv_unit)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6711A496_val = EventUnit();
    if (auto6711A496_val == lib1926661B_gv_kC_HeroPanel[1].lv_unit) {
        lv_dyingUnit = 1;
    }
    else if (auto6711A496_val == lib1926661B_gv_kC_HeroPanel[2].lv_unit) {
        lv_dyingUnit = 2;
    }
    else if (auto6711A496_val == lib1926661B_gv_kC_HeroPanel[3].lv_unit) {
        lv_dyingUnit = 3;
    }
    else {
    }
    Wait(2.5, c_timeGame);
    if ((lib1926661B_gv_kC_HeroPanel[1].lv_unit == null) && (lib1926661B_gv_kC_HeroPanel[2].lv_unit == null) && (lib1926661B_gv_kC_HeroPanel[3].lv_unit == null)) {
        TriggerEnable(lib1926661B_gt_KC_HeroPanelUpdate, false);
        TriggerEnable(lib1926661B_gt_KC_HeroUIUnitDamaged, false);
        TriggerEnable(lib1926661B_gt_KC_HeroUnitDead, false);
    }

    DialogControlSetVisible(lib1926661B_gv_kC_HeroPanel[lv_dyingUnit].lv_panel, PlayerGroupAll(), false);
    lib1926661B_gv_kC_HeroPanel[lv_dyingUnit].lv_unit = null;
    lib1926661B_gv_kC_HeroPanel[lv_dyingUnit].lv_panel = c_invalidDialogControlId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_HeroUnitDead_Init () {
    lib1926661B_gt_KC_HeroUnitDead = TriggerCreate("lib1926661B_gt_KC_HeroUnitDead_Func");
    TriggerEnable(lib1926661B_gt_KC_HeroUnitDead, false);
    TriggerAddEventUnitDied(lib1926661B_gt_KC_HeroUnitDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_HeroPanelCineShow
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_HeroPanelCineShow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto0CFA2E36_ae = 3;
    const int auto0CFA2E36_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto0CFA2E36_ai >= 0 && lv_index <= auto0CFA2E36_ae) || (auto0CFA2E36_ai < 0 && lv_index >= auto0CFA2E36_ae) ) ; lv_index += auto0CFA2E36_ai ) {
        if ((lib1926661B_gv_kC_HeroPanelHidden[lv_index] == false)) {
            lib1926661B_gf_ShowHideHeroPanel(lv_index, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_HeroPanelCineShow_Init () {
    lib1926661B_gt_KC_HeroPanelCineShow = TriggerCreate("lib1926661B_gt_KC_HeroPanelCineShow_Func");
    lib1926661B_gf_CinematicModeEnded(lib1926661B_gt_KC_HeroPanelCineShow);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_HeroPanelCineHide
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_HeroPanelCineHide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto1255E0C2_ae = 3;
    const int auto1255E0C2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto1255E0C2_ai >= 0 && lv_index <= auto1255E0C2_ae) || (auto1255E0C2_ai < 0 && lv_index >= auto1255E0C2_ae) ) ; lv_index += auto1255E0C2_ai ) {
        if ((lib1926661B_gv_kC_HeroPanelHidden[lv_index] == false)) {
            lib1926661B_gf_ShowHideHeroPanel(lv_index, false);
            lib1926661B_gv_kC_HeroPanelHidden[lv_index] = true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_HeroPanelCineHide_Init () {
    lib1926661B_gt_KC_HeroPanelCineHide = TriggerCreate("lib1926661B_gt_KC_HeroPanelCineHide_Func");
    lib1926661B_gf_CinematicModeStarted(lib1926661B_gt_KC_HeroPanelCineHide);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Koprulu Campaign Ping Sound
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KopruluCampaignPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("UI_TerranPing", -1)), c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KopruluCampaignPingSound_Init () {
    lib1926661B_gt_KopruluCampaignPingSound = TriggerCreate("lib1926661B_gt_KopruluCampaignPingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_HideNukePanelAfterCast
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_HideNukePanelAfterCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_ShowHideNukeCastingPanel(false);
    lib1926661B_gv_kC_NukePanel.lv_panelActive = false;
    TriggerEnable(lib1926661B_gt_KC_NukeHideCinematic, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_HideNukePanelAfterCast_Init () {
    lib1926661B_gt_KC_HideNukePanelAfterCast = TriggerCreate("lib1926661B_gt_KC_HideNukePanelAfterCast_Func");
    TriggerAddEventUnitAbility(lib1926661B_gt_KC_HideNukePanelAfterCast, UnitRefFromVariable("lib1926661B_gv_kC_NukePanel.lv_casterUnit"), AbilityCommand("UPLNuclearStrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_NukeHideCinematic
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_NukeHideCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((lib1926661B_gv_kC_NukePanel.lv_panelActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == true)) {
        lib1926661B_gf_ShowHideNukeCastingPanel(false);
    }
    else {
        lib1926661B_gf_ShowHideNukeCastingPanel(true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_NukeHideCinematic_Init () {
    lib1926661B_gt_KC_NukeHideCinematic = TriggerCreate("lib1926661B_gt_KC_NukeHideCinematic_Func");
    TriggerEnable(lib1926661B_gt_KC_NukeHideCinematic, false);
    TriggerAddEventTimePeriodic(lib1926661B_gt_KC_NukeHideCinematic, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ForceButtonPressed
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ForceButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto0C076860_val;

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false))) {
            return false;
        }

        if (!(((EventDialogControl() == lib1926661B_gv_kC_ForcePanel.lv_button[1]) || (EventDialogControl() == lib1926661B_gv_kC_ForcePanel.lv_button[2]) || (EventDialogControl() == lib1926661B_gv_kC_ForcePanel.lv_button[3]) || (EventDialogControl() == lib1926661B_gv_kC_ForcePanel.lv_button[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kC_ForcePanelUsed = true;
    TriggerExecute(lib1926661B_gt_KC_ForceTimersUpdate, true, false);
    auto0C076860_val = EventDialogControl();
    if (auto0C076860_val == lib1926661B_gv_kC_ForcePanel.lv_button[1]) {
        lib1926661B_gf_KC_CreateForceCondor(lib1926661B_ge_ForceType_Infantry);
    }
    else if (auto0C076860_val == lib1926661B_gv_kC_ForcePanel.lv_button[2]) {
        lib1926661B_gf_KC_CreateForceCondor(lib1926661B_ge_ForceType_Tank);
    }
    else if (auto0C076860_val == lib1926661B_gv_kC_ForcePanel.lv_button[3]) {
        lib1926661B_gf_KC_CreateForceCondor(lib1926661B_ge_ForceType_Air);
    }
    else if (auto0C076860_val == lib1926661B_gv_kC_ForcePanel.lv_button[4]) {
        lib1926661B_gf_KC_CreateForceCondor(lib1926661B_ge_ForceType_AA);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ForceButtonPressed_Init () {
    lib1926661B_gt_KC_ForceButtonPressed = TriggerCreate("lib1926661B_gt_KC_ForceButtonPressed_Func");
    TriggerAddEventDialogControl(lib1926661B_gt_KC_ForceButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ForceTimersUpdate
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ForceTimersUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[5] lv_forceCost;
    int lv_index;
    int lv_activeInfantryOfficers;
    bool[5] lv_forceAvailable;

    // Automatic Variable Declarations
    const int auto392B2427_ae = 4;
    const int auto392B2427_ai = 1;
    int auto337972D5_val;
    unitgroup autoEE1C3AB9_g;
    int autoEE1C3AB9_u;
    unit autoEE1C3AB9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto392B2427_ai >= 0 && lv_index <= auto392B2427_ae) || (auto392B2427_ai < 0 && lv_index >= auto392B2427_ae) ) ; lv_index += auto392B2427_ai ) {
        auto337972D5_val = lv_index;
        if (auto337972D5_val == 1) {
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(3, "InfantryRocket");
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(4, "InfantryMortar");
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(3, "InfantryHeavy");
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(3, "InfantryRifle");
            autoEE1C3AB9_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEE1C3AB9_u = UnitGroupCount(autoEE1C3AB9_g, c_unitCountAll);
            for (;; autoEE1C3AB9_u -= 1) {
                autoEE1C3AB9_var = UnitGroupUnitFromEnd(autoEE1C3AB9_g, autoEE1C3AB9_u);
                if (autoEE1C3AB9_var == null) { break; }
                if ((UnitGetType(autoEE1C3AB9_var) == "InfantryOfficer")) {
                    lv_activeInfantryOfficers += 1;
                }
            }
            if ((lv_activeInfantryOfficers < 3)) {
                lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(1, "InfantryOfficer");
            }
            if ((lib1926661B_gf_DifficultyValueBoolean(false, true) == true)) {
                if ((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false) && (lib1926661B_gf_KC_SuppliesAvailable(1) <= lv_forceCost[lv_index])) {
                    lv_forceAvailable[lv_index] = true;
                    TextExpressionSetToken("Param/Expression/lib_1926661B_F41F305D", "A", IntToText(lv_forceCost[lv_index]));
                    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], TextExpressionAssemble("Param/Expression/lib_1926661B_F41F305D"), PlayerGroupAll());
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), true);
                }
                else {
                    lv_forceAvailable[lv_index] = false;
                    TextExpressionSetToken("Param/Expression/lib_1926661B_049FCC30", "A", IntToText(lv_forceCost[lv_index]));
                    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], TextExpressionAssemble("Param/Expression/lib_1926661B_049FCC30"), PlayerGroupAll());
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), false);
                }
            }
            else {
                if ((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false)) {
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), true);
                }
                else {
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), false);
                }
            }
        }
        else if (auto337972D5_val == 2) {
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(2, "A6");
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(2, "InfantryRifle");
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(2, "Z1");
            if ((lib1926661B_gf_DifficultyValueBoolean(false, true) == true)) {
                if ((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false) && (lib1926661B_gf_KC_SuppliesAvailable(1) <= lv_forceCost[lv_index])) {
                    lv_forceAvailable[lv_index] = true;
                    TextExpressionSetToken("Param/Expression/lib_1926661B_93FB494D", "A", IntToText(lv_forceCost[lv_index]));
                    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], TextExpressionAssemble("Param/Expression/lib_1926661B_93FB494D"), PlayerGroupAll());
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), true);
                }
                else {
                    lv_forceAvailable[lv_index] = false;
                    TextExpressionSetToken("Param/Expression/lib_1926661B_28C39DDA", "A", IntToText(lv_forceCost[lv_index]));
                    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], TextExpressionAssemble("Param/Expression/lib_1926661B_28C39DDA"), PlayerGroupAll());
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), false);
                }
            }
            else {
                if ((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false)) {
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), true);
                }
                else {
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), false);
                }
            }
        }
        else if (auto337972D5_val == 3) {
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(2, "TR17");
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(1, "RoutheTank");
            if ((lib1926661B_gf_DifficultyValueBoolean(false, true) == true)) {
                if ((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false) && (lib1926661B_gf_KC_SuppliesAvailable(1) <= lv_forceCost[lv_index])) {
                    lv_forceAvailable[lv_index] = true;
                    TextExpressionSetToken("Param/Expression/lib_1926661B_09C0CF0B", "A", IntToText(lv_forceCost[lv_index]));
                    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], TextExpressionAssemble("Param/Expression/lib_1926661B_09C0CF0B"), PlayerGroupAll());
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), true);
                }
                else {
                    lv_forceAvailable[lv_index] = false;
                    TextExpressionSetToken("Param/Expression/lib_1926661B_036430C7", "A", IntToText(lv_forceCost[lv_index]));
                    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], TextExpressionAssemble("Param/Expression/lib_1926661B_036430C7"), PlayerGroupAll());
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), false);
                }
            }
            else {
                if ((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false)) {
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), true);
                }
                else {
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), false);
                }
            }
        }
        else if (auto337972D5_val == 4) {
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(1, "Osprey");
            lv_forceCost[lv_index] += lib1926661B_gf_KC_ReturnUnitSupplyCost(1, "RaptorJet");
            if ((lib1926661B_gf_DifficultyValueBoolean(false, true) == true)) {
                if ((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false) && (lib1926661B_gf_KC_SuppliesAvailable(1) <= lv_forceCost[lv_index])) {
                    lv_forceAvailable[lv_index] = true;
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), true);
                    TextExpressionSetToken("Param/Expression/lib_1926661B_7B4B7FB6", "A", IntToText(lv_forceCost[lv_index]));
                    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], TextExpressionAssemble("Param/Expression/lib_1926661B_7B4B7FB6"), PlayerGroupAll());
                }
                else {
                    lv_forceAvailable[lv_index] = false;
                    TextExpressionSetToken("Param/Expression/lib_1926661B_01C7390F", "A", IntToText(lv_forceCost[lv_index]));
                    libNtve_gf_SetDialogItemTooltip(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], TextExpressionAssemble("Param/Expression/lib_1926661B_01C7390F"), PlayerGroupAll());
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), false);
                }
            }
            else {
                if ((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false)) {
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), true);
                }
                else {
                    DialogControlSetEnabled(lib1926661B_gv_kC_ForcePanel.lv_button[lv_index], PlayerGroupAll(), false);
                }
            }
        }
        else {
        }
        libNtve_gf_SetDialogItemAnimationTime(lib1926661B_gv_kC_ForcePanel.lv_buttonCooldown[lv_index], (60.0 * (1 - TimerGetRemaining(lib1926661B_gv_kC_ForcePanel.lv_forceTimer)/lib1926661B_gv_kC_ForceTimerTime)), PlayerGroupAll());
        if ((lib1926661B_gf_DifficultyValueBoolean(false, true) == true) && (lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false) && ((lv_forceAvailable[1] == false) || (lv_forceAvailable[2] == false) || (lv_forceAvailable[3] == false) || (lv_forceAvailable[4] == false))) {
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ForcePanel.lv_titleLabel, lib1926661B_gv_kC_ForceNameSupplies, PlayerGroupAll());
        }

        if ((lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown == false) && ((lv_forceAvailable[1] == true) || (lv_forceAvailable[2] == true) || (lv_forceAvailable[3] == true) || (lv_forceAvailable[4] == true))) {
            libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ForcePanel.lv_titleLabel, lib1926661B_gv_kC_ForceNameReady, PlayerGroupAll());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ForceTimersUpdate_Init () {
    lib1926661B_gt_KC_ForceTimersUpdate = TriggerCreate("lib1926661B_gt_KC_ForceTimersUpdate_Func");
    TriggerEnable(lib1926661B_gt_KC_ForceTimersUpdate, false);
    TriggerAddEventTimePeriodic(lib1926661B_gt_KC_ForceTimersUpdate, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ForceTimerEnd
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ForceTimerEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto399F2FDF_ae = 4;
    const int auto399F2FDF_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto399F2FDF_ai >= 0 && lv_index <= auto399F2FDF_ae) || (auto399F2FDF_ai < 0 && lv_index >= auto399F2FDF_ae) ) ; lv_index += auto399F2FDF_ai ) {
        DialogControlSetVisible(lib1926661B_gv_kC_ForcePanel.lv_buttonCooldown[lv_index], PlayerGroupAll(), false);
    }
    lib1926661B_gv_kC_ForcePanel.lv_forceOnCooldown = false;
    lib1926661B_gv_kC_ForcePanel.lv_forceCondor = null;
    libNtve_gf_SetDialogItemText(lib1926661B_gv_kC_ForcePanel.lv_titleLabel, lib1926661B_gv_kC_ForceNameReady, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ForceTimerEnd_Init () {
    lib1926661B_gt_KC_ForceTimerEnd = TriggerCreate("lib1926661B_gt_KC_ForceTimerEnd_Func");
    TriggerAddEventTimer(lib1926661B_gt_KC_ForceTimerEnd, lib1926661B_gv_kC_ForcePanel.lv_forceTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ConfirmPanel_Btn
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ConfirmPanel_Btn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_PConfirm.lv_cofirmButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerSendEvent("PhaseConfirmed");
    lib1926661B_gf_ShowHidePhaseConfirmationPanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ConfirmPanel_Btn_Init () {
    lib1926661B_gt_KC_ConfirmPanel_Btn = TriggerCreate("lib1926661B_gt_KC_ConfirmPanel_Btn_Func");
    TriggerEnable(lib1926661B_gt_KC_ConfirmPanel_Btn, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_ConfirmPanel_Btn, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_UnitChoice_Ultralisk
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_UnitChoice_Ultralisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_UnitChoicePanel.lv_choiceButtons[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(lib1926661B_gt_KC_UnitChoice_Mutalisk, false);
    TriggerSendEvent("UltraliskChosen");
    lib1926661B_gf_ShowHideUnitChoicePanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_UnitChoice_Ultralisk_Init () {
    lib1926661B_gt_KC_UnitChoice_Ultralisk = TriggerCreate("lib1926661B_gt_KC_UnitChoice_Ultralisk_Func");
    TriggerEnable(lib1926661B_gt_KC_UnitChoice_Ultralisk, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_UnitChoice_Ultralisk, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_UnitChoice_Mutalisk
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_UnitChoice_Mutalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_UnitChoicePanel.lv_choiceButtons[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(lib1926661B_gt_KC_UnitChoice_Ultralisk, false);
    TriggerSendEvent("MutaliskChosen");
    lib1926661B_gf_ShowHideUnitChoicePanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_UnitChoice_Mutalisk_Init () {
    lib1926661B_gt_KC_UnitChoice_Mutalisk = TriggerCreate("lib1926661B_gt_KC_UnitChoice_Mutalisk_Func");
    TriggerEnable(lib1926661B_gt_KC_UnitChoice_Mutalisk, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_UnitChoice_Mutalisk, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_SetCasualRallyPoints
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_SetCasualRallyPoints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waitCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waitCount = 10;

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gf_DifficultyValueInteger(1, 0) == 1))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Hatchery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_waitCount > 0) && (UnitRallyPointTargetCount(EventUnitProgressUnit(), 1) == 0) && (UnitRallyPointTargetCount(EventUnitProgressUnit(), 2) == 0)) {
        lv_waitCount -= 1;
        Wait(0.0625, c_timeReal);
    }
    if ((UnitRallyPointTargetCount(EventUnitProgressUnit(), 1) == 0) && (UnitRallyPointTargetCount(EventUnitProgressUnit(), 2) == 0)) {
        lib1926661B_gf_SetHatcheryRallyPoint(EventUnitProgressUnit(), null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_SetCasualRallyPoints_Init () {
    lib1926661B_gt_KC_SetCasualRallyPoints = TriggerCreate("lib1926661B_gt_KC_SetCasualRallyPoints_Func");
    TriggerAddEventUnitConstructProgress(lib1926661B_gt_KC_SetCasualRallyPoints, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Timestamp
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_DisplayTimestamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "Title", 1);
    Wait(UserDataGetFixed("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    Wait(UserDataGetFixed("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_DisplayTimestamp_Init () {
    lib1926661B_gt_DisplayTimestamp = TriggerCreate("lib1926661B_gt_DisplayTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Timestamp Skippable
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_DisplayTimestampSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "Title", 1);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(UserDataGetFixed("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    Wait(UserDataGetFixed("ConversationTimestamps", lib1926661B_gv_kC_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_DisplayTimestampSkippable_Init () {
    lib1926661B_gt_DisplayTimestampSkippable = TriggerCreate("lib1926661B_gt_DisplayTimestampSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CampaignCutsceneSkipped
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CampaignCutsceneSkipped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib1926661B_gt_KC_CampaignCutsceneSkipped, false);
    lib1926661B_gv_kC_CampaignCutsceneSkipped = true;
    CutsceneStop(lib1926661B_gv_kC_CurrentCampaignCutscene);
    TriggerStop(lib1926661B_gt_KC_WaitForCutscene);
    TriggerStop(lib1926661B_gt_KC_WaitForDialogCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CampaignCutsceneSkipped_Init () {
    lib1926661B_gt_KC_CampaignCutsceneSkipped = TriggerCreate("lib1926661B_gt_KC_CampaignCutsceneSkipped_Func");
    TriggerEnable(lib1926661B_gt_KC_CampaignCutsceneSkipped, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_PlayCinematicSkippable
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_PlayCinematicSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1926661B_gf_KC_SceneMovie(lib1926661B_gv_kC_PlaySceneCurrentScene) != null)) {
        lv_movieSource = TransmissionSourceFromMovie(lib1926661B_gf_KC_SceneMovie(lib1926661B_gv_kC_PlaySceneCurrentScene), true);
        TriggerExecute(lib1926661B_gt_KC_CinematicDetectSkipping, true, false);
        TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
        TransmissionSourceSetPauseAllowed(lv_movieSource, true);
        TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, true);
        TriggerStop(lib1926661B_gt_KC_CinematicDetectSkipping);
        TriggerStop(lib1926661B_gt_KC_CinematicHandleSkipping);
    }
    else {
        TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
        while (true) {
            Wait(5.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_PlayCinematicSkippable_Init () {
    lib1926661B_gt_KC_PlayCinematicSkippable = TriggerCreate("lib1926661B_gt_KC_PlayCinematicSkippable_Func");
    TriggerEnable(lib1926661B_gt_KC_PlayCinematicSkippable, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CinematicDetectSkipping
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CinematicDetectSkipping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, lib1926661B_gt_KC_CinematicHandleSkipping, true, false);
    while (true) {
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CinematicDetectSkipping_Init () {
    lib1926661B_gt_KC_CinematicDetectSkipping = TriggerCreate("lib1926661B_gt_KC_CinematicDetectSkipping_Func");
    TriggerEnable(lib1926661B_gt_KC_CinematicDetectSkipping, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CinematicHandleSkipping
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CinematicHandleSkipping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_KC_FadeAllSoundsExceptMusic(0.8, false);
    lib1926661B_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    TriggerStop(lib1926661B_gt_KC_PlayCinematicSkippable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CinematicHandleSkipping_Init () {
    lib1926661B_gt_KC_CinematicHandleSkipping = TriggerCreate("lib1926661B_gt_KC_CinematicHandleSkipping_Func");
    TriggerEnable(lib1926661B_gt_KC_CinematicHandleSkipping, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_WaitForDialogCutscene
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_WaitForDialogCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1926661B_gv_kC_CampaignCutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, lib1926661B_gt_KC_CampaignCutsceneSkipped, false, false);
    }

    WaitForCutsceneToEnd(lib1926661B_gv_kC_CurrentCampaignCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_WaitForDialogCutscene_Init () {
    lib1926661B_gt_KC_WaitForDialogCutscene = TriggerCreate("lib1926661B_gt_KC_WaitForDialogCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_WaitForCutscene
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_WaitForCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1926661B_gv_kC_CampaignCutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, lib1926661B_gt_KC_CampaignCutsceneSkipped, false, false);
    }

    WaitForCutsceneToEnd(lib1926661B_gv_kC_CurrentCampaignCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_WaitForCutscene_Init () {
    lib1926661B_gt_KC_WaitForCutscene = TriggerCreate("lib1926661B_gt_KC_WaitForCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_UntitledTrigger001_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_UntitledTrigger001_Init () {
    lib1926661B_gt_UntitledTrigger001 = TriggerCreate("lib1926661B_gt_UntitledTrigger001_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CommandCenter Primary Search
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CommandCenterPrimarySearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    unitgroup lv_hatcheryGroup;
    unit lv_closestHatchery;
    unit lv_indexHatchery;

    // Automatic Variable Declarations
    unitgroup autoB6CDA861_g;
    int autoB6CDA861_u;

    // Variable Initialization
    lv_distance = 500.0;
    lv_hatcheryGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hatcheryGroup = UnitGroup("CommandCenter", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB6CDA861_g = lv_hatcheryGroup;
    autoB6CDA861_u = UnitGroupCount(autoB6CDA861_g, c_unitCountAll);
    for (;; autoB6CDA861_u -= 1) {
        lv_indexHatchery = UnitGroupUnitFromEnd(autoB6CDA861_g, autoB6CDA861_u);
        if (lv_indexHatchery == null) { break; }
        if ((DistanceBetweenPoints(PlayerStartLocation(1), UnitGetPosition(lv_indexHatchery)) < lv_distance)) {
            lv_distance = DistanceBetweenPoints(PlayerStartLocation(1), UnitGetPosition(lv_indexHatchery));
            lv_closestHatchery = lv_indexHatchery;
            TriggerEnable(TriggerGetCurrent(), false);
        }

    }
    if ((lv_closestHatchery != null)) {
        lib1926661B_gf_ZerglingRespawnSetPrimaryHatchery(lv_closestHatchery);
        lib1926661B_gv_zS_PrimaryHatchery = lv_closestHatchery;
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CommandCenterPrimarySearch_Init () {
    lib1926661B_gt_KC_CommandCenterPrimarySearch = TriggerCreate("lib1926661B_gt_KC_CommandCenterPrimarySearch_Func");
    TriggerAddEventTimePeriodic(lib1926661B_gt_KC_CommandCenterPrimarySearch, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_CreateLaunchScreen
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_CreateLaunchScreen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lastFrame;

    // Automatic Variable Declarations
    int auto82247E17_val;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gv_kC_MLDialog == c_invalidDialogId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1620, 1220, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1926661B_gv_kC_MLDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "KLClassic_ReadyRoomTerran/TerranReadyRoomTemplate");
    lib1926661B_gv_kC_MLPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Title"));
    lib1926661B_gv_kC_MLTitle = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Objective"));
    lib1926661B_gv_kC_MLObjective = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypePortrait, libNtve_gf_ConvertStringToUILayoutFrameName("PortraitCalloutLeft\\PortraitFrame\\Portrait"));
    lib1926661B_gv_kC_MLContactPortrait = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("SubtitleFrame"));
    lib1926661B_gv_kC_MLSubtitleFrame = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CenterPanel\\PlanetViewClean"));
    lib1926661B_gv_kC_MLPlanetView = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CenterPanel\\PlanetViewChoice"));
    lib1926661B_gv_kC_MLPlanetViewChoice = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("CenterPanel\\SelectionButton1"));
    lib1926661B_gv_kC_MLChoiceAButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("CenterPanel\\SelectionButton2"));
    lib1926661B_gv_kC_MLChoiceBButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("CenterPanel\\SelectionButton3"));
    lib1926661B_gv_kC_MLChoiceCButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("CalloutLaunch\\LaunchButton"));
    lib1926661B_gv_kC_MLLaunchButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("CalloutBack\\BackButton"));
    lib1926661B_gv_kC_MLBackButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("CalloutBack\\QuitButton"));
    lib1926661B_gv_kC_MLQuitButton = DialogControlLastCreated();
    if ((lib1926661B_gv_kC_InCompletedCampaign == true)) {
        DialogControlSetVisible(lib1926661B_gv_kC_MLQuitButton, PlayerGroupAll(), false);
        DialogControlSetVisible(lib1926661B_gv_kC_MLBackButton, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lib1926661B_gv_kC_MLQuitButton, PlayerGroupAll(), true);
        DialogControlSetVisible(lib1926661B_gv_kC_MLBackButton, PlayerGroupAll(), false);
    }
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("PortraitCalloutLeft\\PlayButton"));
    lib1926661B_gv_kC_MLPitchPlayButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("PortraitCalloutLeft\\PauseButton"));
    lib1926661B_gv_kC_MLPitchStopButton = DialogControlLastCreated();
    DialogControlHookup(lib1926661B_gv_kC_MLPanel, c_triggerControlTypePulldown, libNtve_gf_ConvertStringToUILayoutFrameName("CalloutDifficulty\\DifficultyPulldown"));
    lib1926661B_gv_kC_MLDifficultyPulldown = DialogControlLastCreated();
    DialogControlAddItem(lib1926661B_gv_kC_MLDifficultyPulldown, PlayerGroupAll(), StringExternal("UI/Difficulty02Campaign"));
    DialogControlAddItem(lib1926661B_gv_kC_MLDifficultyPulldown, PlayerGroupAll(), StringExternal("UI/Difficulty03Campaign"));
    auto82247E17_val = PlayerDifficulty(1);
    if (auto82247E17_val == 2) {
        DialogControlSelectItem(lib1926661B_gv_kC_MLDifficultyPulldown, PlayerGroupAll(), 1);
    }
    else if (auto82247E17_val == 3) {
        DialogControlSelectItem(lib1926661B_gv_kC_MLDifficultyPulldown, PlayerGroupAll(), 2);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_CreateLaunchScreen_Init () {
    lib1926661B_gt_KC_CreateLaunchScreen = TriggerCreate("lib1926661B_gt_KC_CreateLaunchScreen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionLaunchQuitOKClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionLaunchQuitOKClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib1926661B_gt_KC_MissionLaunchQuitOKClicked, false);
    DialogControlSetEnabled(lib1926661B_gv_kC_MLLaunchButton, PlayerGroupAll(), false);
    lib1926661B_gf_CinematicFade(false, 0.5, Color(0.00, 0.00, 0.00), true);
    GameSetNextMap("");
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionLaunchQuitOKClicked_Init () {
    lib1926661B_gt_KC_MissionLaunchQuitOKClicked = TriggerCreate("lib1926661B_gt_KC_MissionLaunchQuitOKClicked_Func");
    TriggerEnable(lib1926661B_gt_KC_MissionLaunchQuitOKClicked, false);
    TriggerAddEventCustomDialogDismissed(lib1926661B_gt_KC_MissionLaunchQuitOKClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultYes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionLaunchQuitCanceledClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionLaunchQuitCanceledClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kC_MissionLaunchQuitToggled = false;
    TriggerEnable(lib1926661B_gt_KC_MissionLaunchQuitOKClicked, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionLaunchQuitCanceledClicked_Init () {
    lib1926661B_gt_KC_MissionLaunchQuitCanceledClicked = TriggerCreate("lib1926661B_gt_KC_MissionLaunchQuitCanceledClicked_Func");
    TriggerAddEventCustomDialogDismissed(lib1926661B_gt_KC_MissionLaunchQuitCanceledClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultNo);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionLaunchQuitClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionLaunchQuitClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_kC_MLQuitButton))) {
            return false;
        }

        if (!((lib1926661B_gv_kC_MissionLaunchedToggled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kC_MissionLaunchQuitToggled = true;
    TriggerEnable(lib1926661B_gt_KC_MissionLaunchQuitOKClicked, true);
    UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringExternal("Param/Value/lib_1926661B_D40C0A8A"), StringToText(""), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionLaunchQuitClicked_Init () {
    lib1926661B_gt_KC_MissionLaunchQuitClicked = TriggerCreate("lib1926661B_gt_KC_MissionLaunchQuitClicked_Func");
    TriggerAddEventDialogControl(lib1926661B_gt_KC_MissionLaunchQuitClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionLaunchBackClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionLaunchBackClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_kC_MLBackButton))) {
            return false;
        }

        if (!((lib1926661B_gv_kC_MissionLaunchedToggled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_KC_MissionLaunchClose();
    lib1926661B_gf_DisplayMissionArchives();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionLaunchBackClicked_Init () {
    lib1926661B_gt_KC_MissionLaunchBackClicked = TriggerCreate("lib1926661B_gt_KC_MissionLaunchBackClicked_Func");
    TriggerAddEventDialogControl(lib1926661B_gt_KC_MissionLaunchBackClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionPitchPlayClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionPitchPlayClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1926661B_gv_kC_MLPitchPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_MLPitchPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1926661B_gf_CurrentMissionIsSimulation() == false)) {
        lib1926661B_gv_kC_MissionLaunchPitchPlaying = true;
    }

    if ((lib1926661B_gf_MissionPitch(lib1926661B_gv_kC_NextMission) == null)) {
        return true;
    }

    lib1926661B_gf_KC_MissionLaunchPlayPitch();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionPitchPlayClicked_Init () {
    lib1926661B_gt_KC_MissionPitchPlayClicked = TriggerCreate("lib1926661B_gt_KC_MissionPitchPlayClicked_Func");
    TriggerAddEventDialogControl(lib1926661B_gt_KC_MissionPitchPlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionPitchStopClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionPitchStopClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1926661B_gv_kC_MLPitchStopButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_MLPitchStopButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConversationDataStop();
    lib1926661B_gv_kC_MissionLaunchPitchPlaying = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionPitchStopClicked_Init () {
    lib1926661B_gt_KC_MissionPitchStopClicked = TriggerCreate("lib1926661B_gt_KC_MissionPitchStopClicked_Func");
    TriggerAddEventDialogControl(lib1926661B_gt_KC_MissionPitchStopClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_MissionLaunchClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_MissionLaunchClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nextDifficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nextDifficulty = 3;

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gv_kC_MLLaunchButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_MLLaunchButton))) {
            return false;
        }

        if (!((lib1926661B_gv_kC_MissionLaunchQuitToggled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kC_MissionLaunchedToggled = true;
    DialogControlSetEnabled(lib1926661B_gv_kC_MLDifficultyPulldown, PlayerGroupAll(), false);
    lib1926661B_gf_CinematicFade(false, 0.7, Color(0.00, 0.00, 0.00), true);
    lv_nextDifficulty = lib1926661B_gf_KC_MissionLaunchSelectedDifficulty();
    lib1926661B_gf_KC_MissionLaunchClose();
    lib1926661B_gf_LaunchMission(lib1926661B_gv_kC_NextMission, (lib1926661B_gv_kC_InCompletedCampaign == true), lv_nextDifficulty);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_MissionLaunchClicked_Init () {
    lib1926661B_gt_KC_MissionLaunchClicked = TriggerCreate("lib1926661B_gt_KC_MissionLaunchClicked_Func");
    TriggerAddEventDialogControl(lib1926661B_gt_KC_MissionLaunchClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_EndCinematic
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_EndCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lib1926661B_gv_kC_EndCinematicFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_EndCinematic_Init () {
    lib1926661B_gt_KC_EndCinematic = TriggerCreate("lib1926661B_gt_KC_EndCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_EndCredits
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_EndCredits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lib1926661B_gv_kC_EndCreditFinished = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSwarm_Credits_Static", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, true);
    TriggerEnable(lib1926661B_gt_KC_EndCreditsEnds, true);
    while (!((lib1926661B_gv_kC_EndCreditFinished == true))) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_EndCredits_Init () {
    lib1926661B_gt_KC_EndCredits = TriggerCreate("lib1926661B_gt_KC_EndCredits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_EndCreditsEnds
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_EndCreditsEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kC_EndCreditFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_EndCreditsEnds_Init () {
    lib1926661B_gt_KC_EndCreditsEnds = TriggerCreate("lib1926661B_gt_KC_EndCreditsEnds_Func");
    TriggerEnable(lib1926661B_gt_KC_EndCreditsEnds, false);
    TriggerAddEventGameCreditsFinished(lib1926661B_gt_KC_EndCreditsEnds, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_VSAchievements
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_VSAchievements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnPlayAgain2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAE8FC9D3_gf_ShowUserProfile(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_VSAchievements_Init () {
    lib1926661B_gt_KC_VSAchievements = TriggerCreate("lib1926661B_gt_KC_VSAchievements_Func");
    TriggerEnable(lib1926661B_gt_KC_VSAchievements, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_VSAchievements, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_VSScreenQuit
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_VSScreenQuit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnPlayAgain, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2, PlayerGroupAll(), false);
    TriggerEnable(lib1926661B_gt_KC_VSScreenContinue, false);
    TriggerEnable(lib1926661B_gt_KC_VSScreenPlayAgain, false);
    TriggerEnable(lib1926661B_gt_KC_VSScreenQuit, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 1.0);
    lib1926661B_gf_KC_FadeAllSoundsExceptMusic(1.0, false);
    lib1926661B_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, PlayerGroupAll(), false);
    lib1926661B_gf_CinematicFade(false, 0.7, Color(0.00, 0.00, 0.00), true);
    lib1926661B_gf_KC_SaveAllTransitionData(false, false, (c_gameOverVictory == c_gameOverVictory));
    GameSetNextMap(("UEDFL/" + lib1926661B_gf_StoryMapFile("UEDStory")));
    lib1926661B_gf_PrepareForStoryMode(c_gameOverVictory, PlayerDifficulty(1));
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_VSScreenQuit_Init () {
    lib1926661B_gt_KC_VSScreenQuit = TriggerCreate("lib1926661B_gt_KC_VSScreenQuit_Func");
    TriggerEnable(lib1926661B_gt_KC_VSScreenQuit, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_VSScreenQuit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_VSScreenContinue
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_VSScreenContinue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnPlayAgain, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnContinue2, PlayerGroupAll(), false);
    TriggerEnable(lib1926661B_gt_KC_VSScreenContinue, false);
    TriggerEnable(lib1926661B_gt_KC_VSScreenPlayAgain, false);
    TriggerEnable(lib1926661B_gt_KC_VSScreenQuit, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 1.0);
    lib1926661B_gf_KC_FadeAllSoundsExceptMusic(1.0, false);
    lib1926661B_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSMainPanel, PlayerGroupAll(), false);
    if ((lib1926661B_gv_kCX_IsSimulation == true)) {
        lib1926661B_gf_PrepareForStoryMode(c_gameOverVictory, PlayerDifficulty(1));
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    if (true) {
    }
    if ((lib1926661B_gf_CurrentMap() == "UEDFL_EP01M10")) {
        lib1926661B_gf_CinematicFade(false, 0.7, Color(0.00, 0.00, 0.00), true);
        lib1926661B_gf_KC_CampaignVictory();
    }
    else {
        lib1926661B_gf_CinematicFade(false, 0.7, Color(0.00, 0.00, 0.00), true);
        lib1926661B_gf_LaunchMission(lib1926661B_gv_kC_NextMission, (lib1926661B_gv_kC_InCompletedCampaign == true), 3);
        lib1926661B_gf_LaunchMission(lib1926661B_gf_PP_NextMission(lib1926661B_gv_kCX_LastSuccessfulMission, (lib1926661B_gv_kC_InCompletedCampaign == true), c_gameOverVictory), (lib1926661B_gv_kC_InCompletedCampaign == true), 3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_VSScreenContinue_Init () {
    lib1926661B_gt_KC_VSScreenContinue = TriggerCreate("lib1926661B_gt_KC_VSScreenContinue_Func");
    TriggerEnable(lib1926661B_gt_KC_VSScreenContinue, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_VSScreenContinue, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_VSScreenPlayAgain
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_VSScreenPlayAgain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_simulation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_simulation = true;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_kC_VictoryScreen.lv_pU_VSBtnPlayAgain))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_KC_VSDisplayRestartDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_VSScreenPlayAgain_Init () {
    lib1926661B_gt_KC_VSScreenPlayAgain = TriggerCreate("lib1926661B_gt_KC_VSScreenPlayAgain_Func");
    TriggerEnable(lib1926661B_gt_KC_VSScreenPlayAgain, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_VSScreenPlayAgain, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_VSRestartCancel
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_VSRestartCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartCancelButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib1926661B_gt_KC_VSRestartCancel, false);
    TriggerEnable(lib1926661B_gt_KC_VSRestartRestart, false);
    DialogControlSetVisible(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartPanel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_VSRestartCancel_Init () {
    lib1926661B_gt_KC_VSRestartCancel = TriggerCreate("lib1926661B_gt_KC_VSRestartCancel_Func");
    TriggerEnable(lib1926661B_gt_KC_VSRestartCancel, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_VSRestartCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_VSRestartRestart
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_VSRestartRestart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = 3;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartRestartButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib1926661B_gt_KC_VSRestartCancel, false);
    TriggerEnable(lib1926661B_gt_KC_VSRestartRestart, false);
    lv_difficulty = lib1926661B_gf_KC_DifficultyFromIndex(DialogControlGetSelectedItem(lib1926661B_gv_kC_VictoryScreen.lv_pU_VSRestartDifficultyPulldown, 1));
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, 0.5);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.5);
    lib1926661B_gf_KC_FadeAllSoundsExceptMusic(0.5, true);
    lib1926661B_gf_PrepareForMission(lib1926661B_gf_CurrentMap(), lib1926661B_gv_kCX_IsSimulation, true, lv_difficulty);
    Wait(0.125, c_timeGame);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_VSRestartRestart_Init () {
    lib1926661B_gt_KC_VSRestartRestart = TriggerCreate("lib1926661B_gt_KC_VSRestartRestart_Func");
    TriggerEnable(lib1926661B_gt_KC_VSRestartRestart, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_VSRestartRestart, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ArchivesCreate
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ArchivesCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexScene;
    bool lv_defaultSelection;
    int lv_bestPriority;

    // Automatic Variable Declarations
    int autoAEABAC17_ae;
    int autoAEABAC17_ai;
    int auto205510F4_ai;
    int auto205510F4_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib1926661B_gv_kC_MissionArchiveOverlayCreated == false)) {
        lib1926661B_gf_KC_ArchivesOverlayCreate();
    }

    if ((BattleReportPanelGetSelectedBattleReport(1) == c_invalidBattleReportId) && (lib1926661B_gf_LastMissionConditionCheck(lib1926661B_ge_MissionCondition_Simulation) == false)) {
        lv_bestPriority = 0;
        lv_defaultSelection = true;
    }

    autoAEABAC17_ae = CatalogEntryCount(c_gameCatalogMap);
    autoAEABAC17_ai = 1;
    while (autoAEABAC17_ai <= autoAEABAC17_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoAEABAC17_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            BattleReportCreate(PlayerGroupAll(), lib1926661B_gf_StoryMapName(lv_indexMission), c_battleReportTypeMission, c_battleReportStateCompleted);
            BattleReportSetPriority(BattleReportLastCreated(), lib1926661B_gf_KC_ArchivesMissionPriority(lv_indexMission));
            BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 1, true);
            BattleReportSetMissionText(BattleReportLastCreated(), lib1926661B_gf_StoryMapName(lv_indexMission));
            DataTableSetString(true, lib1926661B_gf_KC_ArchivesDataString(BattleReportLastCreated()), (lv_indexMission));
            DataTableSetInt(true, lib1926661B_gf_KC_ArchivesDataTypeString(BattleReportLastCreated()), (lib1926661B_ge_KC_ArchivesType_Mission));
            if ((lib1926661B_gf_LastMap() == lv_indexMission) && (lib1926661B_gf_LastMissionConditionCheck(lib1926661B_ge_MissionCondition_Simulation) == true)) {
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }

        }
        autoAEABAC17_ai = autoAEABAC17_ai + 1;
    }
    auto205510F4_ai = 1;
    auto205510F4_ae = UserDataInstanceCount("Scenes")+1;
    while (auto205510F4_ai < auto205510F4_ae) {
        lv_indexScene = UserDataInstance("Scenes", auto205510F4_ai);
        if ((lib1926661B_gf_KC_ArchivesScenePriority(lv_indexScene) < 1000)) {
            BattleReportCreate(PlayerGroupAll(), lib1926661B_gf_StorySceneName(lv_indexScene), c_battleReportTypeScene, c_battleReportStateCompleted);
            BattleReportSetPriority(BattleReportLastCreated(), lib1926661B_gf_KC_ArchivesScenePriority(lv_indexScene));
            DataTableSetString(true, lib1926661B_gf_KC_ArchivesDataString(BattleReportLastCreated()), ("Scenes;" + (lv_indexScene)));
            DataTableSetInt(true, lib1926661B_gf_KC_ArchivesDataTypeString(BattleReportLastCreated()), (lib1926661B_ge_KC_ArchivesType_Scene));
            if ((lv_defaultSelection == true) && (lib1926661B_gf_KC_ArchivesScenePriority(lv_indexScene) >= lv_bestPriority)) {
                lv_bestPriority = lib1926661B_gf_KC_ArchivesMissionPriority(lv_indexMission);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
        }

        auto205510F4_ai = auto205510F4_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ArchivesCreate_Init () {
    lib1926661B_gt_KC_ArchivesCreate = TriggerCreate("lib1926661B_gt_KC_ArchivesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ArchivesSelectionChanged
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ArchivesSelectionChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_KC_ArchivesUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ArchivesSelectionChanged_Init () {
    lib1926661B_gt_KC_ArchivesSelectionChanged = TriggerCreate("lib1926661B_gt_KC_ArchivesSelectionChanged_Func");
    TriggerEnable(lib1926661B_gt_KC_ArchivesSelectionChanged, false);
    TriggerAddEventBattleReportPanelSelectionChanged(lib1926661B_gt_KC_ArchivesSelectionChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ArchivesMissionPlayClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ArchivesMissionPlayClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1926661B_gv_kC_ArchivesMissionPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_ArchivesMissionPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_KC_ArchivesClosed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ArchivesMissionPlayClicked_Init () {
    lib1926661B_gt_KC_ArchivesMissionPlayClicked = TriggerCreate("lib1926661B_gt_KC_ArchivesMissionPlayClicked_Func");
    TriggerEnable(lib1926661B_gt_KC_ArchivesMissionPlayClicked, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_ArchivesMissionPlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ArchivesScenePlayClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ArchivesScenePlayClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto317035C3_val;

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gv_kC_ArchivesScenePlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib1926661B_gv_kC_ArchivesScenePlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    lib1926661B_gf_SetAllSoundChannelVolumesCampaign(lib1926661B_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    auto317035C3_val = lib1926661B_gf_PU_ArchivesSelectedScene();
    if (auto317035C3_val == "PrologueIntro") {
        lib1926661B_gf_CampaignPlayCutscene2("Cutscenes\\PrologueIntro.SC2Cutscene", true, true);
    }
    else if (auto317035C3_val == "PrologueEnd") {
        lib1926661B_gf_CampaignPlayCutscene2("Cutscenes\\PrologueOutro.SC2Cutscene", true, true);
    }
    else {
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ArchivesScenePlayClicked_Init () {
    lib1926661B_gt_KC_ArchivesScenePlayClicked = TriggerCreate("lib1926661B_gt_KC_ArchivesScenePlayClicked_Func");
    TriggerEnable(lib1926661B_gt_KC_ArchivesScenePlayClicked, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_ArchivesScenePlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ArchivesCloseClicked
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ArchivesCloseClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib1926661B_gv_kC_ArchivesBackButton) || (EventDialogControl() == lib1926661B_gv_kC_ArchivesQuitButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_PC_CompletedSavesEnable();
    lib1926661B_gf_PrepareForStoryModeTransitionalSave();
    lib1926661B_gf_CreateStoryModeTransitionSave(StringExternal("Param/Value/lib_1926661B_0EC80158"), StringToText(""));
    lib1926661B_gf_CinematicFade(false, 0.5, Color(0.00, 0.00, 0.00), true);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ArchivesCloseClicked_Init () {
    lib1926661B_gt_KC_ArchivesCloseClicked = TriggerCreate("lib1926661B_gt_KC_ArchivesCloseClicked_Func");
    TriggerEnable(lib1926661B_gt_KC_ArchivesCloseClicked, false);
    TriggerAddEventDialogControl(lib1926661B_gt_KC_ArchivesCloseClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KC_ArchivesSynced
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_KC_ArchivesSynced_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gv_kC_ArchivesSynced = true;
    lib1926661B_gf_KC_ArchivesUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_KC_ArchivesSynced_Init () {
    lib1926661B_gt_KC_ArchivesSynced = TriggerCreate("lib1926661B_gt_KC_ArchivesSynced_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Rescue Stalkers} Create
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_ObjectiveRescueStalkersCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    lib1926661B_gf_CreateObjectiveCampaign("ZChar01Objective1");
    lib1926661B_gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_ObjectiveRescueStalkersCreate_Init () {
    lib1926661B_gt_ObjectiveRescueStalkersCreate = TriggerCreate("lib1926661B_gt_ObjectiveRescueStalkersCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Rescue Stalkers} Complete
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_ObjectiveRescueStalkersComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib1926661B_gt_ObjectiveRescueStalkersCreate, true, false);
    lib1926661B_gf_SetObjectiveStateCampaign("EP01M08Bonus01", lib1926661B_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_ObjectiveRescueStalkersComplete_Init () {
    lib1926661B_gt_ObjectiveRescueStalkersComplete = TriggerCreate("lib1926661B_gt_ObjectiveRescueStalkersComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Rescue Stalkers} Update
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_ObjectiveRescueStalkersUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(lib1926661B_gt_ObjectiveRescueStalkersCreate, true, false);
    lib1926661B_gf_SetMissionObjectiveProgress2("EP01M08Bonus01", 1, true, StringExternal("Param/Value/lib_1926661B_60BD6459"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_ObjectiveRescueStalkersUpdate_Init () {
    lib1926661B_gt_ObjectiveRescueStalkersUpdate = TriggerCreate("lib1926661B_gt_ObjectiveRescueStalkersUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Rescue Stalkers} Failed
//--------------------------------------------------------------------------------------------------
bool lib1926661B_gt_ObjectiveRescueStalkersFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(lib1926661B_gt_ObjectiveRescueStalkersCreate, true, false);
    lib1926661B_gf_SetObjectiveStateCampaign("EP01M08Bonus01", lib1926661B_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1926661B_gt_ObjectiveRescueStalkersFailed_Init () {
    lib1926661B_gt_ObjectiveRescueStalkersFailed = TriggerCreate("lib1926661B_gt_ObjectiveRescueStalkersFailed_Func");
}

void lib1926661B_InitTriggers () {
    lib1926661B_gt_KL_StartGameTimer_Init();
    lib1926661B_gt_KL_GamePaused_Init();
    lib1926661B_gt_KL_GameResumed_Init();
    lib1926661B_gt_KC_CheckPorgressionAchievements_Init();
    lib1926661B_gt_KC_ObjectiveRePingController_Init();
    lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    lib1926661B_gt_KC_MissionVictoryCallbackBlockActionQueue_Init();
    lib1926661B_gt_KC_AbortMission_Init();
    lib1926661B_gt_KC_CampaignUnit_Init();
    lib1926661B_gt_KC_CampaignUnitCreated_Init();
    lib1926661B_gt_KC_CampaignUnitChangeOwner_Init();
    lib1926661B_gt_KC_CampaignUnitInfoUnitMorphes_Init();
    lib1926661B_gt_KC_ResourcePickupTip_Init();
    lib1926661B_gt_KC_ResourcePickup_Init();
    lib1926661B_gt_KC_MissionTipClicked_Init();
    lib1926661B_gt_KC_CineModeStart_Init();
    lib1926661B_gt_KC_CineModeEnd_Init();
    lib1926661B_gt_CinematicModeOn_Init();
    lib1926661B_gt_CinematicModeOff_Init();
    lib1926661B_gt_UED_CycleCreditSplash_Init();
    lib1926661B_gt_UED_CreditsButtonPushed_Init();
    lib1926661B_gt_UED_HideCredits_Init();
    lib1926661B_gt_KL_LoreWindowClosed_Init();
    lib1926661B_gt_KC_LoreWindowCineHide_Init();
    lib1926661B_gt_KL_UpdateTimerWindow_Init();
    lib1926661B_gt_KL_TimerExpires1_Init();
    lib1926661B_gt_KL_TimerExpires2_Init();
    lib1926661B_gt_KL_TimerExpires3_Init();
    lib1926661B_gt_PU_TimerWindowFlash_Init();
    lib1926661B_gt_PU_TimerWindowThresholdCrossed_Init();
    lib1926661B_gt_PU_TimerWindowLoadUpdate_Init();
    lib1926661B_gt_KC_FlashArmyButtonHelpTip_Init();
    lib1926661B_gt_KC_ArmyButtonUsed_Init();
    lib1926661B_gt_KC_ArmyButtonMissionInit_Init();
    lib1926661B_gt_KC_BB_BossHPChanged_Init();
    lib1926661B_gt_PP_BB_MouseHoverText_Init();
    lib1926661B_gt_KC_HeroPanelUpdate_Init();
    lib1926661B_gt_KC_HeroUIUnitDamaged_Init();
    lib1926661B_gt_KC_HeroUnitDead_Init();
    lib1926661B_gt_KC_HeroPanelCineShow_Init();
    lib1926661B_gt_KC_HeroPanelCineHide_Init();
    lib1926661B_gt_KopruluCampaignPingSound_Init();
    lib1926661B_gt_KC_HideNukePanelAfterCast_Init();
    lib1926661B_gt_KC_NukeHideCinematic_Init();
    lib1926661B_gt_KC_ForceButtonPressed_Init();
    lib1926661B_gt_KC_ForceTimersUpdate_Init();
    lib1926661B_gt_KC_ForceTimerEnd_Init();
    lib1926661B_gt_KC_ConfirmPanel_Btn_Init();
    lib1926661B_gt_KC_UnitChoice_Ultralisk_Init();
    lib1926661B_gt_KC_UnitChoice_Mutalisk_Init();
    lib1926661B_gt_KC_SetCasualRallyPoints_Init();
    lib1926661B_gt_DisplayTimestamp_Init();
    lib1926661B_gt_DisplayTimestampSkippable_Init();
    lib1926661B_gt_KC_CampaignCutsceneSkipped_Init();
    lib1926661B_gt_KC_PlayCinematicSkippable_Init();
    lib1926661B_gt_KC_CinematicDetectSkipping_Init();
    lib1926661B_gt_KC_CinematicHandleSkipping_Init();
    lib1926661B_gt_KC_WaitForDialogCutscene_Init();
    lib1926661B_gt_KC_WaitForCutscene_Init();
    lib1926661B_gt_UntitledTrigger001_Init();
    lib1926661B_gt_KC_CommandCenterPrimarySearch_Init();
    lib1926661B_gt_KC_CreateLaunchScreen_Init();
    lib1926661B_gt_KC_MissionLaunchQuitOKClicked_Init();
    lib1926661B_gt_KC_MissionLaunchQuitCanceledClicked_Init();
    lib1926661B_gt_KC_MissionLaunchQuitClicked_Init();
    lib1926661B_gt_KC_MissionLaunchBackClicked_Init();
    lib1926661B_gt_KC_MissionPitchPlayClicked_Init();
    lib1926661B_gt_KC_MissionPitchStopClicked_Init();
    lib1926661B_gt_KC_MissionLaunchClicked_Init();
    lib1926661B_gt_KC_EndCinematic_Init();
    lib1926661B_gt_KC_EndCredits_Init();
    lib1926661B_gt_KC_EndCreditsEnds_Init();
    lib1926661B_gt_KC_VSAchievements_Init();
    lib1926661B_gt_KC_VSScreenQuit_Init();
    lib1926661B_gt_KC_VSScreenContinue_Init();
    lib1926661B_gt_KC_VSScreenPlayAgain_Init();
    lib1926661B_gt_KC_VSRestartCancel_Init();
    lib1926661B_gt_KC_VSRestartRestart_Init();
    lib1926661B_gt_KC_ArchivesCreate_Init();
    lib1926661B_gt_KC_ArchivesSelectionChanged_Init();
    lib1926661B_gt_KC_ArchivesMissionPlayClicked_Init();
    lib1926661B_gt_KC_ArchivesScenePlayClicked_Init();
    lib1926661B_gt_KC_ArchivesCloseClicked_Init();
    lib1926661B_gt_KC_ArchivesSynced_Init();
    lib1926661B_gt_ObjectiveRescueStalkersCreate_Init();
    lib1926661B_gt_ObjectiveRescueStalkersComplete_Init();
    lib1926661B_gt_ObjectiveRescueStalkersUpdate_Init();
    lib1926661B_gt_ObjectiveRescueStalkersFailed_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1926661B_InitLib_completed = false;

void lib1926661B_InitLib () {
    if (lib1926661B_InitLib_completed) {
        return;
    }

    lib1926661B_InitLib_completed = true;

    lib1926661B_InitLibraries();
    lib1926661B_InitVariables();
    lib1926661B_InitCustomScript();
    lib1926661B_InitTriggers();
}


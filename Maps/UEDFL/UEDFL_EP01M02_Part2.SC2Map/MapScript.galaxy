//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Outpost 497
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "LibAE8FC9D3"
include "Lib1926661B"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
    libAE8FC9D3_InitLib();
    lib1926661B_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_00_NEUTRAL = 0;
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_POLICE = 2;
const int gv_pLAYER_03_CIVILIANS = 3;
const int gv_pLAYER_04_UNKNOWNCREATURES = 4;
const int gv_pLAYER_05_POLICE_NEUTRAL = 5;
const int gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL = 6;
const int gv_pLAYER_09_UNKNOWNCREATURES = 9;
const int gv_pLAYER_15_ROACHES_HOSTILE = 15;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_dabisLivesObjective;
unit gv_mYRADAVIS;
unit gv_cARR;
unit gv_sGTPETERS;
bool gv_gameOver;
bool gv_inCinematic;
int gv_centerLeftmainspeaker;
bool gv_midTransmission;
unitgroup gv_cinematicEnemiesUnitGroup;
int gv_hazMatDeaths;
unit gv_randomActiveMcMahon;
unit gv_randomActiveTechnician;
unit gv_randomActiveBurns;
unit gv_randomActiveReynolds;
int gv_loreFound;
int gv_stat_CivsDead;
int gv_stat_MortarKills;
bool gv_stat_DavisHit;
bool gv_stat_SuppliesExceeded;
int gv_darrenIsDead;
unit gv_bossHKUnit;
int gv_bossHKSplitCount;
unit gv_bossEggs;
actor gv_sewerSectionActor;
bool gv_sewerSectionComplete;
int gv_sewerSectionTextTag;
int gv_sewerSectionDynamiteTextTag1;
int gv_sewerSectionDynamiteTextTag2;
int gv_sewerSectionAmmoniaCratesRetrieved;
bool gv_sewerSectionAmmoniaPartLive;
bool gv_sewerSectionCarryingAmmonia;
int gv_sewerSectionExitPing;
int gv_sewerSectionAmmonia1;
int gv_sewerSectionAmmonia2;
int gv_sewerSectionEscapeObjective;
int gv_uPLHoldoutDavisandPetersSurvive;
unit gv_peters;
int gv_uPLHoldoutInitialObjective;
int gv_uPLHoldoutPing;
timer gv_uPLHoldoutTimer;
int gv_uPLHoldoutTimerWindow;
int gv_uPLHoldoutSectionBuild75;
int gv_uPLHoldoutSectionRecurring;
unitgroup gv_uPLHoldoutSectionRoachGroup;
int gv_uPLHoldoutSectionBuildAMiningDrone;
int gv_uPLHoldoutSectionBuildAMortarUnit;
int gv_uPLHoldoutSectionHoldtheLine;
int gv_uPLHoldoutProtectHQ;
int gv_uPLHoldoutSectionActive;
unitgroup gv_towerDefenseZergGroupA;
int gv_towerDefenseTunnelTimerActive;
timer gv_towerDefenseTunnelTimer;
int gv_towerDefenseTunnelTimerWindow;
timer gv_towerDefenseTunnelTimer2;
int gv_towerDefenseTunnelTimerWindow2;
timer gv_towerDefenseTunnelTimer3;
int gv_towerDefenseTunnelTimerWindow3;
timer gv_towerDefenseTunnelTimer4;
int gv_towerDefenseTunnelTimerWindow4;
timer gv_towerDefenseTunnelTimer5;
int gv_towerDefenseTunnelTimerWindow5;
timer gv_towerDefenseTunnelTimer6;
int gv_towerDefenseTunnelTimerWindow6;
int gv_towerDefenseArrowPing1;
int gv_towerDefenseArrowPing2;
int gv_towerDefenseArrowPing3;
int gv_towerDefenseDeadCivilians;
actor gv_towerDefenseBlockedTunnelActor;
int gv_towerDefenseBlockedTunnelTextTag;
bool gv_towerDefenseLoadCivilians;
unitgroup gv_towerDefenseUPLDemoGroup;
unitgroup gv_towerDefenseZergDemoGroup;
int gv_towerDefensePing1;
int gv_towerDefensePing2;
int gv_towerDefensePing3;
int gv_towerDefensePing4;
int gv_towerDefenseTunnelNorthPing;
int gv_towerDefenseTunnelSouthPing;
int gv_towerDefenseTextTagArrow1;
int gv_towerDefenseTextTagArrow2;
int gv_towerDefenseTextTagPlacement1;
int gv_towerDefenseTextTagPlacement2;
int gv_towerDefenseTextTagPlacement3;
int gv_towerDefenseTextTagPlacement4;
actor gv_towerDefenseActor1;
actor gv_towerDefenseActor2;
actor gv_towerDefenseActor3;
actor gv_towerDefenseActor4;
int gv_towerDefenseDoodadsAppear;
int gv_towerDefenseCivilianPickupB;
int gv_towerDefenseCivilianPickupC;
int gv_towerDefenseCivilianADone;
int gv_towerDefenseCivilianBDone;
int gv_towerDefenseCivilianCDone;
unitgroup gv_towerDefenseGunnerGroup;
unitgroup gv_towerDefenseCivilianAGroup;
unitgroup gv_towerDefenseCivilianBGroup;
unitgroup gv_towerDefenseCivilianCGroup;
int gv_towerDefenseVanPing;
unit gv_towerDefenseVanUnit;
int gv_towerDefenseProtectCiviliansObjective;
int gv_towerDefenseEscortSwatVanObjective;
int gv_towerDefenseSectionActive;
int gv_towerDefenseSwatVan1TimerWindow;
timer gv_towerDefenseSwatVan1Timer;
timer gv_towerDefenseWeAreLeavingTimer;
int gv_towerDefenseWeAreLeavingTimerWindow;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
int gv_sewerCinematic;
int gv_sewerCinematic2;
int gv_holdoutCinematic;
unitgroup gv_holdout_PausedPlayerUnits;

void InitGlobals () {
    gv_dabisLivesObjective = c_invalidObjectiveId;
    gv_centerLeftmainspeaker = c_invalidPortraitId;
    gv_cinematicEnemiesUnitGroup = UnitGroupEmpty();
    gv_sewerSectionTextTag = c_textTagNone;
    gv_sewerSectionDynamiteTextTag1 = c_textTagNone;
    gv_sewerSectionDynamiteTextTag2 = c_textTagNone;
    gv_sewerSectionExitPing = c_invalidPingId;
    gv_sewerSectionAmmonia1 = c_invalidPingId;
    gv_sewerSectionAmmonia2 = c_invalidPingId;
    gv_sewerSectionEscapeObjective = c_invalidObjectiveId;
    gv_uPLHoldoutDavisandPetersSurvive = c_invalidObjectiveId;
    gv_uPLHoldoutInitialObjective = c_invalidObjectiveId;
    gv_uPLHoldoutPing = c_invalidPingId;
    gv_uPLHoldoutTimer = TimerCreate();
    gv_uPLHoldoutTimerWindow = c_timerWindowNone;
    gv_uPLHoldoutSectionBuild75 = c_invalidObjectiveId;
    gv_uPLHoldoutSectionRoachGroup = UnitGroupEmpty();
    gv_uPLHoldoutSectionBuildAMiningDrone = c_invalidObjectiveId;
    gv_uPLHoldoutSectionBuildAMortarUnit = c_invalidObjectiveId;
    gv_uPLHoldoutSectionHoldtheLine = c_invalidObjectiveId;
    gv_uPLHoldoutProtectHQ = c_invalidObjectiveId;
    gv_towerDefenseZergGroupA = UnitGroupEmpty();
    gv_towerDefenseTunnelTimer = TimerCreate();
    gv_towerDefenseTunnelTimerWindow = c_timerWindowNone;
    gv_towerDefenseTunnelTimer2 = TimerCreate();
    gv_towerDefenseTunnelTimerWindow2 = c_timerWindowNone;
    gv_towerDefenseTunnelTimer3 = TimerCreate();
    gv_towerDefenseTunnelTimerWindow3 = c_timerWindowNone;
    gv_towerDefenseTunnelTimer4 = TimerCreate();
    gv_towerDefenseTunnelTimerWindow4 = c_timerWindowNone;
    gv_towerDefenseTunnelTimer5 = TimerCreate();
    gv_towerDefenseTunnelTimerWindow5 = c_timerWindowNone;
    gv_towerDefenseTunnelTimer6 = TimerCreate();
    gv_towerDefenseTunnelTimerWindow6 = c_timerWindowNone;
    gv_towerDefenseArrowPing1 = c_invalidPingId;
    gv_towerDefenseArrowPing2 = c_invalidPingId;
    gv_towerDefenseArrowPing3 = c_invalidPingId;
    gv_towerDefenseBlockedTunnelTextTag = c_textTagNone;
    gv_towerDefenseUPLDemoGroup = UnitGroupEmpty();
    gv_towerDefenseZergDemoGroup = UnitGroupEmpty();
    gv_towerDefensePing1 = c_invalidPingId;
    gv_towerDefensePing2 = c_invalidPingId;
    gv_towerDefensePing3 = c_invalidPingId;
    gv_towerDefensePing4 = c_invalidPingId;
    gv_towerDefenseTunnelNorthPing = c_invalidPingId;
    gv_towerDefenseTunnelSouthPing = c_invalidPingId;
    gv_towerDefenseTextTagArrow1 = c_textTagNone;
    gv_towerDefenseTextTagArrow2 = c_textTagNone;
    gv_towerDefenseTextTagPlacement1 = c_textTagNone;
    gv_towerDefenseTextTagPlacement2 = c_textTagNone;
    gv_towerDefenseTextTagPlacement3 = c_textTagNone;
    gv_towerDefenseTextTagPlacement4 = c_textTagNone;
    gv_towerDefenseGunnerGroup = UnitGroupEmpty();
    gv_towerDefenseCivilianAGroup = UnitGroupEmpty();
    gv_towerDefenseCivilianBGroup = UnitGroupEmpty();
    gv_towerDefenseCivilianCGroup = UnitGroupEmpty();
    gv_towerDefenseVanPing = c_invalidPingId;
    gv_towerDefenseProtectCiviliansObjective = c_invalidObjectiveId;
    gv_towerDefenseEscortSwatVanObjective = c_invalidObjectiveId;
    gv_towerDefenseSwatVan1TimerWindow = c_timerWindowNone;
    gv_towerDefenseSwatVan1Timer = TimerCreate();
    gv_towerDefenseWeAreLeavingTimer = TimerCreate();
    gv_towerDefenseWeAreLeavingTimerWindow = c_timerWindowNone;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_holdout_PausedPlayerUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_NoPortraitTransmission (text lp_text, soundlink lp_speech);
void gf_SendTransmissionFromUnit (unit lp_unit, soundlink lp_sound, text lp_text, bool lp_playCue);
void gf_SendTransmissionFromUnitCombat (unit lp_unit, soundlink lp_sound, text lp_text, bool lp_playCue);
void gf_CinematicBurrowedZergAttack (string lp_unitType, int lp_numberofUnitsNormal, int lp_player, region lp_spawnRegion);
void gf_UPLMortarTrooperCompleteActions ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01PlayersUI;
trigger gt_Init02Technology;
trigger gt_Init04AbilitiesUnits;
trigger gt_Init05MusicEnvironment;
trigger gt_DavisDamageFreebie;
trigger gt_NoZergorCivilianSelectable;
trigger gt_PoliceCruiserExplosionSound;
trigger gt_CARRDies;
trigger gt_CARRBuilt;
trigger gt_MortarsBuilt;
trigger gt_InfoChip1;
trigger gt_InfoChip2;
trigger gt_InfoChip3;
trigger gt_TipRD;
trigger gt_TipManufacturingFacility;
trigger gt_TipHeadquarters;
trigger gt_TipExplosives;
trigger gt_TipFusionGenerators;
trigger gt_TipESD;
trigger gt_TipMiningDrone;
trigger gt_TipMortarTrooper;
trigger gt_TipRoutheTank;
trigger gt_TipTunnelSystem;
trigger gt_TipEvacuation;
trigger gt_StatCivsDie;
trigger gt_StatDavisHit;
trigger gt_StatMortarKills;
trigger gt_SupplyExceeded;
trigger gt_DefeatDavisDies;
trigger gt_DefeatPetersDies;
trigger gt_DefeatHQDestroyed;
trigger gt_DefeatGenDestroyed;
trigger gt_DefeatVanKilled;
trigger gt_DefeatCivsKilled;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_BossHKEggs;
trigger gt_BossHKConstantAggression;
trigger gt_BossHKDeath;
trigger gt_BossHKDeath2;
trigger gt_SewerSectionStart;
trigger gt_SewerSectionHideFallingDebris;
trigger gt_SewerSectionCharges;
trigger gt_SewerSectionAmmoniaPickup1;
trigger gt_SewerSectionAmmoniaPickup2;
trigger gt_SewerSectionAmmoniaDropoff1;
trigger gt_SewerSectionAmmoniaDropoff2;
trigger gt_SewerSectionVictory;
trigger gt_UPLHoldoutZergAttackAfterUnburrow;
trigger gt_UPLHoldoutFirstAttack1;
trigger gt_UPLHoldoutFirstAttack2;
trigger gt_UPLHoldoutFirstAttack3;
trigger gt_UPLHoldoutSecondAttack1;
trigger gt_UPLHoldoutSecondAttack2;
trigger gt_UPLHoldoutSecondAttack3;
trigger gt_UPLHoldoutSecondAttack4;
trigger gt_UPLHoldoutSecondAttack5;
trigger gt_UPLHoldoutSecondAttack6;
trigger gt_UPLHoldoutSecondAttackOngoing1;
trigger gt_UPLHoldoutSecondAttackOngoing2;
trigger gt_UPLHoldoutSectionRoachesAttack;
trigger gt_UPLHoldoutPetersWarning;
trigger gt_UPLHoldoutSectionStart;
trigger gt_UPLHoldoutArriveAtOutpost497;
trigger gt_UPLHoldoutSectionTechnology;
trigger gt_UPLHoldoutOwnershipTransition;
trigger gt_UPLHoldoutMiningTutorial;
trigger gt_UPLMiningDroneComplete;
trigger gt_UPLMortarTrooperComplete;
trigger gt_UPLMortarTrooperCompleteAlternate;
trigger gt_UPLHoldoutAerialUnits;
trigger gt_UPLHoldout75Supply;
trigger gt_UPLHoldoutTimerExpires;
trigger gt_TowerDefenseNydus1;
trigger gt_TowerDefenseNydus2;
trigger gt_TowerDefenseNydus3;
trigger gt_TowerDefenseNydus4;
trigger gt_TowerDefenseReticleDies1;
trigger gt_TowerDefenseReticleDies2;
trigger gt_TowerDefenseReticleDies3;
trigger gt_TowerDefenseReticleDies4;
trigger gt_TowerDefenseTimerA;
trigger gt_TowerDefenseTimerAExpires;
trigger gt_TowerDefenseTimerAAttack;
trigger gt_TowerDefenseTimerB;
trigger gt_TowerDefenseTimerBExpires;
trigger gt_TowerDefenseTimerBAttack;
trigger gt_TowerDefenseTimerC;
trigger gt_TowerDefenseTimerCExpires;
trigger gt_TowerDefenseTimerCAttack;
trigger gt_TowerDefenseTimerD;
trigger gt_TowerDefenseTimerDExpires;
trigger gt_TowerDefenseTimerDAttack;
trigger gt_TowerDefenseTimerE;
trigger gt_TowerDefenseTimerEExpires;
trigger gt_TowerDefenseTimerEAttack;
trigger gt_TowerDefenseTimerF;
trigger gt_TowerDefenseTimerFExpires;
trigger gt_TowerDefenseTimerFAttack;
trigger gt_TowerDefenseUPLReinforcements;
trigger gt_TowerDefenseBombs;
trigger gt_TowerDefenseBombs2;
trigger gt_TowerDefenseUnburrowCivilianA;
trigger gt_TowerDefenseUnburrowCivilianB;
trigger gt_TowerDefenseUnburrowCivilianC;
trigger gt_TowerDefenseUnburrowStall;
trigger gt_TowerDefenseCivilianDies;
trigger gt_TowerDefenseVanDamaged;
trigger gt_TowerDefenseVanDamaged2;
trigger gt_TowerDefenseSectionBegins;
trigger gt_TowerDefenseSectionBeginsPart2;
trigger gt_TowerDefenseDemoZergMove;
trigger gt_TowerDefenseRemoveCiviliansFromGroups;
trigger gt_TowerDefenseCivilianGroupA;
trigger gt_TowerDefenseCivilianGroupB;
trigger gt_TowerDefenseCivilianGroupC;
trigger gt_TowerDefenseVanAppears;
trigger gt_TowerDefenseInfantryFollows;
trigger gt_TowerDefenseCiviliansARun;
trigger gt_TowerDefenseCiviliansBRun;
trigger gt_TowerDefenseCiviliansCRun;
trigger gt_TowerDefenseCiviliansALoad;
trigger gt_TowerDefenseCiviliansBLoad;
trigger gt_TowerDefenseCiviliansCLoad;
trigger gt_TowerDefenseVanMoves;
trigger gt_TowerDefenseVanMovesBack;
trigger gt_TowerDefenseVanStalls;
trigger gt_TowerDefenseCivilianStand;
trigger gt_TowerDefenseCiviliansAUnload;
trigger gt_TowerDefenseCiviliansBUnload;
trigger gt_TowerDefenseCiviliansCUnload;
trigger gt_SewerCinematicSetup;
trigger gt_SewerCinematic;
trigger gt_SewerCinematicCleanup;
trigger gt_SewerEscapeCinematicSetup;
trigger gt_SewerEscapeCinematicUnits;
trigger gt_SewerEscapeCinematic;
trigger gt_SewerEscapeCinematicCleanup;
trigger gt_HoldoutCinematicSetup;
trigger gt_HoldoutCinematicUnits;
trigger gt_HoldoutAim;
trigger gt_HoldoutCinematic;
trigger gt_HoldoutCinematicCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_NoPortraitTransmission (text lp_text, soundlink lp_speech) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    while (!((gv_midTransmission == false))) {
        Wait(0.25, c_timeGame);
    }
    gv_midTransmission = true;
    SoundPlayForPlayer(lp_speech, c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", null, StringToText(""), lp_text, 60.0, c_transmissionDurationAdd, false);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), PlayerGroupAll(), false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    Wait(0.3, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TransmissionClearAll();
    gv_midTransmission = false;
}

void gf_SendTransmissionFromUnit (unit lp_unit, soundlink lp_sound, text lp_text, bool lp_playCue) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_AttachActorToUnit(lp_unit, "TalkIcon", "Ref_Origin");
        if ((gv_inCinematic == false)) {
            if ((lp_playCue == true)) {
                libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            }

            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 30.0, 0.0);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), "", "Talk", lp_sound, UnitGetName(lp_unit), lp_text, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
            SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), "", "Talk", lp_sound, UnitGetName(lp_unit), lp_text, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        ActorScopeKill(libNtve_gf_ActorScopeLastCreated());
    }

}

void gf_SendTransmissionFromUnitCombat (unit lp_unit, soundlink lp_sound, text lp_text, bool lp_playCue) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_AttachActorToUnit(lp_unit, "TalkIcon", "Ref_Origin");
        if ((gv_inCinematic == false)) {
            if ((lp_playCue == true)) {
                libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            }

            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 30.0, 0.0);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lp_sound, UnitGetName(lp_unit), lp_text, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
            SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lp_sound, UnitGetName(lp_unit), lp_text, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        ActorScopeKill(libNtve_gf_ActorScopeLastCreated());
    }

}

trigger auto_gf_CinematicBurrowedZergAttack_Trigger = null;
string auto_gf_CinematicBurrowedZergAttack_lp_unitType;
int auto_gf_CinematicBurrowedZergAttack_lp_numberofUnitsNormal;
int auto_gf_CinematicBurrowedZergAttack_lp_player;
region auto_gf_CinematicBurrowedZergAttack_lp_spawnRegion;

void gf_CinematicBurrowedZergAttack (string lp_unitType, int lp_numberofUnitsNormal, int lp_player, region lp_spawnRegion) {
    auto_gf_CinematicBurrowedZergAttack_lp_unitType = lp_unitType;
    auto_gf_CinematicBurrowedZergAttack_lp_numberofUnitsNormal = lp_numberofUnitsNormal;
    auto_gf_CinematicBurrowedZergAttack_lp_player = lp_player;
    auto_gf_CinematicBurrowedZergAttack_lp_spawnRegion = lp_spawnRegion;

    if (auto_gf_CinematicBurrowedZergAttack_Trigger == null) {
        auto_gf_CinematicBurrowedZergAttack_Trigger = TriggerCreate("auto_gf_CinematicBurrowedZergAttack_TriggerFunc");
    }

    TriggerExecute(auto_gf_CinematicBurrowedZergAttack_Trigger, false, false);
}

bool auto_gf_CinematicBurrowedZergAttack_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_gf_CinematicBurrowedZergAttack_lp_unitType;
    int lp_numberofUnitsNormal = auto_gf_CinematicBurrowedZergAttack_lp_numberofUnitsNormal;
    int lp_player = auto_gf_CinematicBurrowedZergAttack_lp_player;
    region lp_spawnRegion = auto_gf_CinematicBurrowedZergAttack_lp_spawnRegion;

    // Automatic Variable Declarations
    int auto841120C8_n;
    int auto841120C8_i;
    unitgroup auto38995088_g;
    int auto38995088_u;
    unit auto38995088_var;

    // Implementation
    auto841120C8_n = lp_numberofUnitsNormal;
    for (auto841120C8_i = 1; auto841120C8_i <= auto841120C8_n; auto841120C8_i += 1) {
        UnitCreate(1, lp_unitType, 0, lp_player, RegionRandomPoint(lp_spawnRegion), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicEnemiesUnitGroup, UnitLastCreated());
    }
    auto38995088_g = UnitGroup(null, lp_player, lp_spawnRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38995088_u = UnitGroupCount(auto38995088_g, c_unitCountAll);
    for (;; auto38995088_u -= 1) {
        auto38995088_var = UnitGroupUnitFromEnd(auto38995088_g, auto38995088_u);
        if (auto38995088_var == null) { break; }
        UnitIssueOrder(auto38995088_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    return true;
}

void gf_UPLMortarTrooperCompleteActions () {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLBillet", true);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLGenerator", true);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLElectrostaticDefenseTower", true);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLRnDFacility", true);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLManufacturingFacility", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "InfantryMortar", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "MiningDrone", false);
    TriggerExecute(gt_TipMortarTrooper, true, false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryMortar", true);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryRifle", true);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryHeavy", true);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryFlamethrower", true);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "InfantryMedkit", true);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "InfantryRifleRangeUpgrade", true);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "InfantryMortarRangeUpgrade", true);
    TechTreeUnitHelp(1, "UPLRnDFacility", true);
    TechTreeUnitHelp(1, "UPLElectrostaticDefenseTower", true);
    TechTreeUnitHelp(1, "UPLManufacturingFacility", true);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1671CFE4"));
    ObjectiveCreate(StringExternal("Param/Value/4BA04F20"), StringExternal("Param/Value/2F82E0D8"), c_objectiveStateActive, true);
    gv_uPLHoldoutSectionBuild75 = ObjectiveLastCreated();
    ObjectiveShow(gv_uPLHoldoutSectionBuild75, PlayerGroupAll(), true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "M2HoldoutMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerEnable(gt_UPLHoldout75Supply, true);
    TriggerExecute(gt_UPLHoldoutSecondAttack1, true, false);
    TriggerExecute(gt_TipESD, true, false);
    Wait(4.5, c_timeGame);
    TriggerExecute(gt_TipFusionGenerators, true, false);
    Wait(4.5, c_timeGame);
    TriggerExecute(gt_TipManufacturingFacility, true, false);
    Wait(4.5, c_timeGame);
    TriggerExecute(gt_TipRD, true, false);
    Wait(4.5, c_timeGame);
    TriggerExecute(gt_TipRoutheTank, true, false);
    Wait(2.0, c_timeGame);
    lib1926661B_gf_FlashCheckpointReminder();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_ULoadCampaignData("UEDFL_EP01M02_2");
    TriggerExecute(gt_Init01PlayersUI, false, true);
    TriggerExecute(gt_Init02Technology, false, true);
    TriggerExecute(gt_Init04AbilitiesUnits, false, true);
    TriggerExecute(gt_Init05MusicEnvironment, false, true);
    TriggerExecute(gt_SewerCinematicSetup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Players/UI
//--------------------------------------------------------------------------------------------------
bool gt_Init01PlayersUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerApplySkinReplacingExistingUnit(gv_pLAYER_01_USER, "UPLInfantryEarlyMissionsVO", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(gv_pLAYER_02_POLICE, "UPLInfantryEarlyMissionsVO", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(gv_pLAYER_05_POLICE_NEUTRAL, "UPLInfantryEarlyMissionsVO", true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_POLICE, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_CIVILIANS, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_UNKNOWNCREATURES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_POLICE_NEUTRAL, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_09_UNKNOWNCREATURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_15_ROACHES_HOSTILE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, 13, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_POLICE, gv_pLAYER_03_CIVILIANS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_POLICE, gv_pLAYER_04_UNKNOWNCREATURES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_POLICE, gv_pLAYER_05_POLICE_NEUTRAL, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_POLICE, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_POLICE, gv_pLAYER_15_ROACHES_HOSTILE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_CIVILIANS, gv_pLAYER_04_UNKNOWNCREATURES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_CIVILIANS, gv_pLAYER_05_POLICE_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_CIVILIANS, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_CIVILIANS, gv_pLAYER_15_ROACHES_HOSTILE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_04_UNKNOWNCREATURES, gv_pLAYER_05_POLICE_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_UNKNOWNCREATURES, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_UNKNOWNCREATURES, gv_pLAYER_15_ROACHES_HOSTILE, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_05_POLICE_NEUTRAL, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_05_POLICE_NEUTRAL, gv_pLAYER_15_ROACHES_HOSTILE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, gv_pLAYER_15_ROACHES_HOSTILE, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetAlliance(gv_pLAYER_02_POLICE, c_allianceIdPushable, gv_pLAYER_01_USER, true);
    PlayerSetAlliance(gv_pLAYER_05_POLICE_NEUTRAL, c_allianceIdPushable, gv_pLAYER_01_USER, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    PlayerOptionOverride(gv_pLAYER_01_USER, "selectuncontrolable", "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01PlayersUI_Init () {
    gt_Init01PlayersUI = TriggerCreate("gt_Init01PlayersUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init02Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerOptionOverride(gv_pLAYER_01_USER, "simplecommandcard", "0");
    PlayerOptionOverride(gv_pLAYER_01_USER, "gametooltips", "1");
    TechTreeUnitAllow(gv_pLAYER_01_USER, "Z1", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "A6", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "RoutheTank", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "TR17", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLAirstrip", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLForwardOperatingBase", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLExhumer", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLHeadquarters", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLCommStation", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLManufacturingFacility", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLNightjar", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLSolitaire", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLBillet", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLGenerator", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLElectrostaticDefenseTower", false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UPLMiningDroneRepair", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UPLManufacturingFacilityResearch", 2), false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "A6ExplosiveRounds", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLVehiclePlatingLevel1", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLVehiclePlatingLevel2", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLVehiclePlatingLevel3", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLInfantryArmorLevel2", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLInfantryArmorLevel3", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLVehicleWeaponsLevel1", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLVehicleWeaponsLevel2", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLVehicleWeaponsLevel3", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLInfantryWeaponsLevel2", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "UPLInfantryWeaponsLevel3", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "InfantryMedkit", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "InfantryRifleRangeUpgrade", false);
    TechTreeUpgradeAllow(gv_pLAYER_01_USER, "InfantryMortarRangeUpgrade", false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RenameZerg", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, "RenameZerg", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_UNKNOWNCREATURES, "RenameZerg", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_UNKNOWNCREATURES, "Burrow", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, "Burrow", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_UNKNOWNCREATURES, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_15_ROACHES_HOSTILE, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_UNKNOWNCREATURES, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_15_ROACHES_HOSTILE, "overlordspeed", 1);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLHeadquarters", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLGenerator", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLExhumer", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLBillet", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLManufacturingFacility", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLElectrostaticDefenseTower", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLCommStation", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLRnDFacility", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLAirstrip", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLForwardOperatingBase", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLSolitaire", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLNightjar", false);
    TechTreeUnitHelp(1, "UPLGenerator", false);
    TechTreeUnitHelp(1, "UPLBillet", false);
    TechTreeUnitHelp(1, "LillyRollins", false);
    TechTreeUnitHelp(1, "TrevorRand", false);
    TechTreeUnitHelp(1, "AltonPeters", false);
    TechTreeUnitHelp(1, "AltonPetersZ1", false);
    TechTreeUnitHelp(1, "HazmatTechnician", false);
    TechTreeUnitHelp(1, "CARR", false);
    TechTreeUnitHelp(1, "UPLPoliceCruiser", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Technology_Init () {
    gt_Init02Technology = TriggerCreate("gt_Init02Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Abilities/Units
//--------------------------------------------------------------------------------------------------
bool gt_Init04AbilitiesUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8B815E96_g;
    int auto8B815E96_u;
    unit auto8B815E96_var;
    unitgroup autoFD1CBB0B_g;
    int autoFD1CBB0B_u;
    unit autoFD1CBB0B_var;
    unitgroup auto82673428_g;
    int auto82673428_u;
    unit auto82673428_var;
    unitgroup autoF6232F46_g;
    int autoF6232F46_u;
    unit autoF6232F46_var;
    unitgroup autoB270A4A6_g;
    int autoB270A4A6_u;
    unit autoB270A4A6_var;
    unitgroup auto8C0E7A6D_g;
    int auto8C0E7A6D_u;
    unit auto8C0E7A6D_var;
    unitgroup autoD5742DF6_g;
    int autoD5742DF6_u;
    unit autoD5742DF6_var;
    unitgroup auto9C149E71_g;
    int auto9C149E71_u;
    unit auto9C149E71_var;
    unitgroup auto4FFD5760_g;
    int auto4FFD5760_u;
    unit auto4FFD5760_var;
    unitgroup autoF07EFA3D_g;
    int autoF07EFA3D_u;
    unit autoF07EFA3D_var;
    unitgroup autoE916BBB9_g;
    int autoE916BBB9_u;
    unit autoE916BBB9_var;
    unitgroup auto48ABDC4C_g;
    int auto48ABDC4C_u;
    unit auto48ABDC4C_var;
    unitgroup auto0E8FB201_g;
    int auto0E8FB201_u;
    unit auto0E8FB201_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B815E96_g = UnitGroup("InfantryMortar", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8B815E96_u = UnitGroupCount(auto8B815E96_g, c_unitCountAll);
    for (;; auto8B815E96_u -= 1) {
        auto8B815E96_var = UnitGroupUnitFromEnd(auto8B815E96_g, auto8B815E96_u);
        if (auto8B815E96_var == null) { break; }
        UnitSetTeamColorIndex(auto8B815E96_var, 0);
    }
    if ((lib1926661B_gf_DifficultyValueBoolean(false, true) == false)) {
        autoFD1CBB0B_g = UnitGroup(null, c_playerAny, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoFD1CBB0B_u = UnitGroupCount(autoFD1CBB0B_g, c_unitCountAll);
        for (;; autoFD1CBB0B_u -= 1) {
            autoFD1CBB0B_var = UnitGroupUnitFromEnd(autoFD1CBB0B_g, autoFD1CBB0B_u);
            if (autoFD1CBB0B_var == null) { break; }
            UnitRemove(autoFD1CBB0B_var);
        }
        auto82673428_g = UnitGroup(null, c_playerAny, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto82673428_u = UnitGroupCount(auto82673428_g, c_unitCountAll);
        for (;; auto82673428_u -= 1) {
            auto82673428_var = UnitGroupUnitFromEnd(auto82673428_g, auto82673428_u);
            if (auto82673428_var == null) { break; }
            UnitRemove(auto82673428_var);
        }
    }

    gv_bossHKUnit = UnitFromId(861931838);
    gv_mYRADAVIS = UnitFromId(1570415012);
    lib1926661B_gf_SetHeroPanelUnit(1, gv_mYRADAVIS);
    UnitSetPropertyFixed(gv_mYRADAVIS, c_unitPropLifeMax, 150.0);
    UnitSetPropertyFixed(gv_mYRADAVIS, c_unitPropLife, 150.0);
    UnitSetPropertyFixed(gv_mYRADAVIS, c_unitPropMovementSpeed, 3.375);
    UnitSetPropertyFixed(UnitFromId(861931838), c_unitPropMovementSpeed, 2.7);
    UnitSetState(UnitFromId(861931838), c_unitStateStoppable, false);
    UnitSetState(UnitFromId(1033119260), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(1033119260), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1033119260), c_unitStateHighlightable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1033119260), true);
    UnitSetState(UnitFromId(315830421), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(315830421), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(315830421), c_unitStateHighlightable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(315830421), true);
    libNtve_gf_ChangeUnitDamage(UnitFromId(1959), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(UnitFromId(1959), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(255013863), c_unitStateFidget, false);
    libNtve_gf_SetCinematicTransitionStyle(libNtve_ge_CinematicTransitionStyle_Story);
    PlayerOptionOverride(gv_pLAYER_01_USER, "simplecommandcard", "0");
    PlayerOptionOverride(gv_pLAYER_01_USER, "selectuncontrolable", "0");
    UnitSetState(UnitFromId(1761979590), c_unitStateMoveSuppressed, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1761979590), true);
    UnitSetState(UnitFromId(315830421), c_unitStateMoveSuppressed, false);
    UnitSetState(UnitFromId(315830421), c_unitStateFidget, false);
    autoF6232F46_g = UnitGroup("InfantryMortar", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF6232F46_u = UnitGroupCount(autoF6232F46_g, c_unitCountAll);
    for (;; autoF6232F46_u -= 1) {
        autoF6232F46_var = UnitGroupUnitFromEnd(autoF6232F46_g, autoF6232F46_u);
        if (autoF6232F46_var == null) { break; }
        UnitSetTeamColorIndex(autoF6232F46_var, 0);
    }
    autoB270A4A6_g = UnitGroup("SecretDocuments", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB270A4A6_u = UnitGroupCount(autoB270A4A6_g, c_unitCountAll);
    for (;; autoB270A4A6_u -= 1) {
        autoB270A4A6_var = UnitGroupUnitFromEnd(autoB270A4A6_g, autoB270A4A6_u);
        if (autoB270A4A6_var == null) { break; }
        UnitSetState(autoB270A4A6_var, c_unitStateSelectable, false);
        UnitSetState(autoB270A4A6_var, c_unitStateTargetable, false);
        UnitSetState(autoB270A4A6_var, c_unitStateHighlightable, false);
        libNtve_gf_MakeUnitInvulnerable(autoB270A4A6_var, true);
    }
    auto8C0E7A6D_g = UnitGroup("Hatchery", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8C0E7A6D_u = UnitGroupCount(auto8C0E7A6D_g, c_unitCountAll);
    for (;; auto8C0E7A6D_u -= 1) {
        auto8C0E7A6D_var = UnitGroupUnitFromEnd(auto8C0E7A6D_g, auto8C0E7A6D_u);
        if (auto8C0E7A6D_var == null) { break; }
        UnitSetState(auto8C0E7A6D_var, c_unitStateSelectable, false);
        UnitSetState(auto8C0E7A6D_var, c_unitStateTargetable, false);
        UnitSetState(auto8C0E7A6D_var, c_unitStateHighlightable, false);
        libNtve_gf_ChangeUnitDamage(auto8C0E7A6D_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    autoD5742DF6_g = UnitGroup("SunkenColony", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD5742DF6_u = UnitGroupCount(autoD5742DF6_g, c_unitCountAll);
    for (;; autoD5742DF6_u -= 1) {
        autoD5742DF6_var = UnitGroupUnitFromEnd(autoD5742DF6_g, autoD5742DF6_u);
        if (autoD5742DF6_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoD5742DF6_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    }
    auto9C149E71_g = UnitGroup("AiurRockDebris4x4", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9C149E71_u = UnitGroupCount(auto9C149E71_g, c_unitCountAll);
    for (;; auto9C149E71_u -= 1) {
        auto9C149E71_var = UnitGroupUnitFromEnd(auto9C149E71_g, auto9C149E71_u);
        if (auto9C149E71_var == null) { break; }
        UnitSetState(auto9C149E71_var, c_unitStateSelectable, false);
        UnitSetState(auto9C149E71_var, c_unitStateTargetable, false);
        UnitSetState(auto9C149E71_var, c_unitStateHighlightable, false);
        libNtve_gf_MakeUnitInvulnerable(auto9C149E71_var, true);
    }
    auto4FFD5760_g = UnitGroup("Beacon_UPL", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4FFD5760_u = UnitGroupCount(auto4FFD5760_g, c_unitCountAll);
    for (;; auto4FFD5760_u -= 1) {
        auto4FFD5760_var = UnitGroupUnitFromEnd(auto4FFD5760_g, auto4FFD5760_u);
        if (auto4FFD5760_var == null) { break; }
        UnitSetState(auto4FFD5760_var, c_unitStateSelectable, false);
        UnitSetState(auto4FFD5760_var, c_unitStateTargetable, false);
        UnitSetState(auto4FFD5760_var, c_unitStateHighlightable, false);
    }
    autoF07EFA3D_g = UnitGroup("PickupEngineCharge", gv_pLAYER_00_NEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF07EFA3D_u = UnitGroupCount(autoF07EFA3D_g, c_unitCountAll);
    for (;; autoF07EFA3D_u -= 1) {
        autoF07EFA3D_var = UnitGroupUnitFromEnd(autoF07EFA3D_g, autoF07EFA3D_u);
        if (autoF07EFA3D_var == null) { break; }
        UnitSetState(autoF07EFA3D_var, c_unitStateSelectable, false);
        UnitSetState(autoF07EFA3D_var, c_unitStateTargetable, false);
        UnitSetState(autoF07EFA3D_var, c_unitStateHighlightable, false);
    }
    autoE916BBB9_g = UnitGroup("UPLCivilianFemale", gv_pLAYER_03_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE916BBB9_u = UnitGroupCount(autoE916BBB9_g, c_unitCountAll);
    for (;; autoE916BBB9_u -= 1) {
        autoE916BBB9_var = UnitGroupUnitFromEnd(autoE916BBB9_g, autoE916BBB9_u);
        if (autoE916BBB9_var == null) { break; }
        UnitSetTeamColorIndex(autoE916BBB9_var, PlayerGetColorIndex(RandomInt(1, 15), false));
    }
    auto48ABDC4C_g = UnitGroup("UPLCivilianMale", gv_pLAYER_03_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto48ABDC4C_u = UnitGroupCount(auto48ABDC4C_g, c_unitCountAll);
    for (;; auto48ABDC4C_u -= 1) {
        auto48ABDC4C_var = UnitGroupUnitFromEnd(auto48ABDC4C_g, auto48ABDC4C_u);
        if (auto48ABDC4C_var == null) { break; }
        UnitSetTeamColorIndex(auto48ABDC4C_var, PlayerGetColorIndex(RandomInt(1, 15), true));
    }
    auto0E8FB201_g = UnitGroup(null, c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0E8FB201_u = UnitGroupCount(auto0E8FB201_g, c_unitCountAll);
    for (;; auto0E8FB201_u -= 1) {
        auto0E8FB201_var = UnitGroupUnitFromEnd(auto0E8FB201_g, auto0E8FB201_u);
        if (auto0E8FB201_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0E8FB201_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04AbilitiesUnits_Init () {
    gt_Init04AbilitiesUnits = TriggerCreate("gt_Init04AbilitiesUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Music/Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05MusicEnvironment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, false);
    GameSetLighting("StarshipDark", 0.0);
    FogSetStartHeightOverTime(-16.0, 0.0);
    GameTimeOfDaySet("00");
    GameTimeOfDayPause(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05MusicEnvironment_Init () {
    gt_Init05MusicEnvironment = TriggerCreate("gt_Init05MusicEnvironment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Davis Damage Freebie
//--------------------------------------------------------------------------------------------------
bool gt_DavisDamageFreebie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(gv_mYRADAVIS, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    Wait(10.0, c_timeGame);
    libNtve_gf_ChangeUnitDamage(gv_mYRADAVIS, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DavisDamageFreebie_Init () {
    gt_DavisDamageFreebie = TriggerCreate("gt_DavisDamageFreebie_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: No Zerg or Civilian Selectable
//--------------------------------------------------------------------------------------------------
bool gt_NoZergorCivilianSelectable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7A51EC4D_g;
    int auto7A51EC4D_u;
    unit auto7A51EC4D_var;
    unitgroup autoB559F31B_g;
    int autoB559F31B_u;
    unit autoB559F31B_var;
    unitgroup auto2DFAFDD4_g;
    int auto2DFAFDD4_u;
    unit auto2DFAFDD4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7A51EC4D_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7A51EC4D_u = UnitGroupCount(auto7A51EC4D_g, c_unitCountAll);
    for (;; auto7A51EC4D_u -= 1) {
        auto7A51EC4D_var = UnitGroupUnitFromEnd(auto7A51EC4D_g, auto7A51EC4D_u);
        if (auto7A51EC4D_var == null) { break; }
        UnitSetState(auto7A51EC4D_var, c_unitStateSelectable, false);
    }
    autoB559F31B_g = UnitGroup(null, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB559F31B_u = UnitGroupCount(autoB559F31B_g, c_unitCountAll);
    for (;; autoB559F31B_u -= 1) {
        autoB559F31B_var = UnitGroupUnitFromEnd(autoB559F31B_g, autoB559F31B_u);
        if (autoB559F31B_var == null) { break; }
        UnitSetState(autoB559F31B_var, c_unitStateSelectable, false);
    }
    auto2DFAFDD4_g = UnitGroup(null, gv_pLAYER_03_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2DFAFDD4_u = UnitGroupCount(auto2DFAFDD4_g, c_unitCountAll);
    for (;; auto2DFAFDD4_u -= 1) {
        auto2DFAFDD4_var = UnitGroupUnitFromEnd(auto2DFAFDD4_g, auto2DFAFDD4_u);
        if (auto2DFAFDD4_var == null) { break; }
        UnitSetState(auto2DFAFDD4_var, c_unitStateSelectable, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NoZergorCivilianSelectable_Init () {
    gt_NoZergorCivilianSelectable = TriggerCreate("gt_NoZergorCivilianSelectable_Func");
    TriggerAddEventTimePeriodic(gt_NoZergorCivilianSelectable, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Police Cruiser Explosion Sound
//--------------------------------------------------------------------------------------------------
bool gt_PoliceCruiserExplosionSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UPLPoliceCruiser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("M2RaptorExplosion1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoliceCruiserExplosionSound_Init () {
    gt_PoliceCruiserExplosionSound = TriggerCreate("gt_PoliceCruiserExplosionSound_Func");
    TriggerAddEventUnitDied(gt_PoliceCruiserExplosionSound, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CARR Dies
//--------------------------------------------------------------------------------------------------
bool gt_CARRDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_cARR == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_ShowHideHeroPanel(3, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CARRDies_Init () {
    gt_CARRDies = TriggerCreate("gt_CARRDies_Func");
    TriggerAddEventUnitDied(gt_CARRDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CARR Built
//--------------------------------------------------------------------------------------------------
bool gt_CARRBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_sewerSectionComplete == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CARR"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cARR = EventUnit();
    Wait(0.5, c_timeGame);
    lib1926661B_gf_SetHeroPanelUnit(3, gv_cARR);
    lib1926661B_gf_ShowHideHeroPanel(3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CARRBuilt_Init () {
    gt_CARRBuilt = TriggerCreate("gt_CARRBuilt_Func");
    TriggerAddEventUnitRegion(gt_CARRBuilt, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mortars Built
//--------------------------------------------------------------------------------------------------
bool gt_MortarsBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "InfantryMortar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetTeamColorIndex(EventUnit(), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MortarsBuilt_Init () {
    gt_MortarsBuilt = TriggerCreate("gt_MortarsBuilt_Func");
    TriggerAddEventUnitRegion(gt_MortarsBuilt, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoChip1
//--------------------------------------------------------------------------------------------------
bool gt_InfoChip1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(603090911));
    gv_loreFound += 1;
    lib1926661B_gf_DisplayLoreWindow("M02P2-Sewer System");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoChip1_Init () {
    gt_InfoChip1 = TriggerCreate("gt_InfoChip1_Func");
    TriggerAddEventUnitRegion(gt_InfoChip1, null, RegionFromId(22), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoChip2
//--------------------------------------------------------------------------------------------------
bool gt_InfoChip2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(1279237059));
    gv_loreFound += 1;
    lib1926661B_gf_DisplayLoreWindow("M02P2-Outposts");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoChip2_Init () {
    gt_InfoChip2 = TriggerCreate("gt_InfoChip2_Func");
    TriggerAddEventUnitRegion(gt_InfoChip2, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoChip3
//--------------------------------------------------------------------------------------------------
bool gt_InfoChip3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(261865366));
    gv_loreFound += 1;
    lib1926661B_gf_DisplayLoreWindow("M02P2-UndergroundTunnels");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoChip3_Init () {
    gt_InfoChip3 = TriggerCreate("gt_InfoChip3_Func");
    TriggerAddEventUnitRegion(gt_InfoChip3, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - R&D
//--------------------------------------------------------------------------------------------------
bool gt_TipRD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_title = UnitTypeGetName("UPLRnDFacility");

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lv_title, libNtve_ge_TipType_NewUnit), StringExternal("Param/Value/0E2C2797"), lv_title, "Assets\\Textures\\btn-building-upl-uplr&d.dds");
    TechTreeUnitHelp(gv_pLAYER_01_USER, "UPLRnDFacility", true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipRD_Init () {
    gt_TipRD = TriggerCreate("gt_TipRD_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Manufacturing Facility
//--------------------------------------------------------------------------------------------------
bool gt_TipManufacturingFacility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_title = UnitTypeGetName("UPLManufacturingFacility");

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lv_title, libNtve_ge_TipType_NewUnit), StringExternal("Param/Value/D1DB7C89"), lv_title, "Assets\\Textures\\btn-building-upl-uplmanufacturingfacility.dds");
    TechTreeUnitHelp(gv_pLAYER_01_USER, "UPLManufacturingFacility", true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipManufacturingFacility_Init () {
    gt_TipManufacturingFacility = TriggerCreate("gt_TipManufacturingFacility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Headquarters
//--------------------------------------------------------------------------------------------------
bool gt_TipHeadquarters_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_title = UnitTypeGetName("UPLHeadquarters");

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/2C8C78BC"), libNtve_ge_TipType_NewUnit), StringExternal("Param/Value/64B5E2AE"), StringExternal("Param/Value/8A39381D"), "Assets\\Textures\\btn-building-upl-uplheadquarters.dds");
    TechTreeUnitHelp(gv_pLAYER_01_USER, "UPLHeadquarters", true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipHeadquarters_Init () {
    gt_TipHeadquarters = TriggerCreate("gt_TipHeadquarters_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Explosives
//--------------------------------------------------------------------------------------------------
bool gt_TipExplosives_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/E8338CC3"), libNtve_ge_TipType_MissionStrategy), StringExternal("Param/Value/8F06590F"), StringExternal("Param/Value/994902F1"), "Assets\\icons\\Button_InfantryFlameThrower\\btn-ability-UPL-NaniteIgnition.dds");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipExplosives_Init () {
    gt_TipExplosives = TriggerCreate("gt_TipExplosives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Fusion Generators
//--------------------------------------------------------------------------------------------------
bool gt_TipFusionGenerators_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_title = UnitTypeGetName("UPLGenerator");

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lv_title, libNtve_ge_TipType_NewUnit), StringExternal("Param/Value/9301F52E"), lv_title, "Assets\\Textures\\btn-building-upl-uplgenerator.dds");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipFusionGenerators_Init () {
    gt_TipFusionGenerators = TriggerCreate("gt_TipFusionGenerators_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - ESD
//--------------------------------------------------------------------------------------------------
bool gt_TipESD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_title = StringExternal("Param/Value/B544C5EA");

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UnitTypeGetName("UPLElectrostaticDefenseTower"), libNtve_ge_TipType_NewUnit), StringExternal("Param/Value/FF250427"), lv_title, "Assets\\Textures\\btn-building-upl-uplelectrostaticdefensetower.dds");
    TechTreeUnitHelp(gv_pLAYER_01_USER, "UPLElectrostaticDefenseTower", true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipESD_Init () {
    gt_TipESD = TriggerCreate("gt_TipESD_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Mining Drone
//--------------------------------------------------------------------------------------------------
bool gt_TipMiningDrone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_title = UnitTypeGetName("MiningDrone");

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lv_title, libNtve_ge_TipType_NewUnit), StringExternal("Param/Value/00CFC83C"), lv_title, "Assets\\Textures\\btn-ability-upl-miningdroneharvestmode.dds");
    TechTreeUnitHelp(gv_pLAYER_01_USER, "MiningDrone", true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMiningDrone_Init () {
    gt_TipMiningDrone = TriggerCreate("gt_TipMiningDrone_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Mortar Trooper
//--------------------------------------------------------------------------------------------------
bool gt_TipMortarTrooper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_title = UnitTypeGetName("InfantryMortar");

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lv_title, libNtve_ge_TipType_NewUnit), StringExternal("Param/Value/81D289BF"), lv_title, "Assets\\icons\\Button_InfantryMortar\\btn-unit-UPL-InfantryMortar.dds");
    TechTreeUnitHelp(gv_pLAYER_01_USER, "InfantryMortar", true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMortarTrooper_Init () {
    gt_TipMortarTrooper = TriggerCreate("gt_TipMortarTrooper_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Routhe Tank
//--------------------------------------------------------------------------------------------------
bool gt_TipRoutheTank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_title = UnitTypeGetName("RoutheTank");

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lv_title, libNtve_ge_TipType_NewUnit), StringExternal("Param/Value/40974876"), lv_title, "Assets\\Textures\\btn-unit-UPL-RoutheTank.dds");
    TechTreeUnitHelp(gv_pLAYER_01_USER, "RoutheTank", true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipRoutheTank_Init () {
    gt_TipRoutheTank = TriggerCreate("gt_TipRoutheTank_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Tunnel System
//--------------------------------------------------------------------------------------------------
bool gt_TipTunnelSystem_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/755B595A"), libNtve_ge_TipType_MissionStrategy), StringExternal("Param/Value/9E60ED24"), StringExternal("Param/Value/23FF2255"), "Assets\\Textures\\ui_tip_questionmark.dds");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipTunnelSystem_Init () {
    gt_TipTunnelSystem = TriggerCreate("gt_TipTunnelSystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Evacuation
//--------------------------------------------------------------------------------------------------
bool gt_TipEvacuation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/55A16C20"), libNtve_ge_TipType_MissionStrategy), StringExternal("Param/Value/7F58C7BB"), StringExternal("Param/Value/C06323F6"), "Assets\\Textures\\btn-unit-upl-swatvan.dds");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipEvacuation_Init () {
    gt_TipEvacuation = TriggerCreate("gt_TipEvacuation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Civs Die
//--------------------------------------------------------------------------------------------------
bool gt_StatCivsDie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "UPLCivilianFemale") || (UnitGetType(EventUnit()) == "UPLCivilianMale")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stat_CivsDead += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatCivsDie_Init () {
    gt_StatCivsDie = TriggerCreate("gt_StatCivsDie_Func");
    TriggerAddEventUnitDied(gt_StatCivsDie, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Davis Hit
//--------------------------------------------------------------------------------------------------
bool gt_StatDavisHit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MyraDavisRiotOfficer"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_stat_DavisHit = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatDavisHit_Init () {
    gt_StatDavisHit = TriggerCreate("gt_StatDavisHit_Func");
    TriggerAddEventUnitAttacked2(gt_StatDavisHit, null, "HunterKillerMelee");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Mortar Kills
//--------------------------------------------------------------------------------------------------
bool gt_StatMortarKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "InfantryMortar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stat_MortarKills += 1;
    if ((gv_stat_MortarKills == 400)) {
        libAE8FC9D3_gf_AwardAchievement("EP01M02-P2-Normal", gv_pLAYER_01_USER);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatMortarKills_Init () {
    gt_StatMortarKills = TriggerCreate("gt_StatMortarKills_Func");
    TriggerAddEventUnitDied(gt_StatMortarKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Exceeded
//--------------------------------------------------------------------------------------------------
bool gt_SupplyExceeded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(1, c_playerPropSuppliesMade) > 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_stat_SuppliesExceeded = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyExceeded_Init () {
    gt_SupplyExceeded = TriggerCreate("gt_SupplyExceeded_Func");
    TriggerAddEventPlayerPropChange(gt_SupplyExceeded, gv_pLAYER_01_USER, c_playerPropSuppliesMade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Davis Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatDavisDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    ObjectiveSetState(gv_dabisLivesObjective, c_objectiveStateFailed);
    ObjectiveSetState(gv_uPLHoldoutDavisandPetersSurvive, c_objectiveStateFailed);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/E67BEED0"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatDavisDies_Init () {
    gt_DefeatDavisDies = TriggerCreate("gt_DefeatDavisDies_Func");
    TriggerAddEventUnitDied(gt_DefeatDavisDies, UnitRefFromVariable("gv_mYRADAVIS"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Peters Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPetersDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    ObjectiveSetState(gv_dabisLivesObjective, c_objectiveStateFailed);
    ObjectiveSetState(gv_uPLHoldoutDavisandPetersSurvive, c_objectiveStateFailed);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/AFF4ED20"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPetersDies_Init () {
    gt_DefeatPetersDies = TriggerCreate("gt_DefeatPetersDies_Func");
    TriggerAddEventUnitDied(gt_DefeatPetersDies, UnitRefFromVariable("gv_peters"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat HQ Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatHQDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UPLHeadquarters"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    ObjectiveSetState(gv_uPLHoldoutProtectHQ, c_objectiveStateFailed);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/015D7C4C"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatHQDestroyed_Init () {
    gt_DefeatHQDestroyed = TriggerCreate("gt_DefeatHQDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatHQDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Gen Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatGenDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UPLHeadquarters"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 5.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ArmoredGenerator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", UnitGetPosition(UnitFromId(1959)));
    UnitKill(UnitFromId(1959));
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    ObjectiveSetState(gv_uPLHoldoutSectionHoldtheLine, c_objectiveStateFailed);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/EAF5AFF7"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatGenDestroyed_Init () {
    gt_DefeatGenDestroyed = TriggerCreate("gt_DefeatGenDestroyed_Func");
    TriggerAddEventUnitProperty(gt_DefeatGenDestroyed, null, c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Van Killed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatVanKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UPLHeadquarters"))) {
            return false;
        }

        if (!((gv_towerDefenseVanUnit == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    ObjectiveSetState(gv_towerDefenseEscortSwatVanObjective, c_objectiveStateFailed);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/0A34A634"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatVanKilled_Init () {
    gt_DefeatVanKilled = TriggerCreate("gt_DefeatVanKilled_Func");
    TriggerAddEventUnitDied(gt_DefeatVanKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Civs Killed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCivsKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UPLHeadquarters"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "UPLCivilianFemale") || (UnitGetType(EventUnit()) == "UPLCivilianMale")))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((gv_towerDefenseDeadCivilians > 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    ObjectiveSetState(gv_towerDefenseProtectCiviliansObjective, c_objectiveStateFailed);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/07801F7E"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCivsKilled_Init () {
    gt_DefeatCivsKilled = TriggerCreate("gt_DefeatCivsKilled_Func");
    TriggerAddEventUnitDied(gt_DefeatCivsKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    lib1926661B_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    bool autoD9F777A7_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_stat_SuppliesExceeded == false) && (lib1926661B_gf_DifficultyValueBoolean(false, true) == true)) {
        libAE8FC9D3_gf_AwardAchievement("EP01M02-P2-Feat", gv_pLAYER_01_USER);
    }
    lib1926661B_gf_AddVictoryPanelStatistic("UnitsLostCount");
    lib1926661B_gf_AddVictoryPanelStatistic("UnitsProduced");
    lib1926661B_gf_AddVictoryPanelStatistic("UnitsKilledCount");
    lib1926661B_gf_AddVictoryPanelCustomStatistic("Mortar Kills", IntToString(gv_stat_MortarKills));
    lib1926661B_gf_AddVictoryPanelCustomStatistic("Civilians Lost", IntToString(gv_stat_CivsDead));
    autoD9F777A7_val = gv_stat_DavisHit;
    if (autoD9F777A7_val == true) {
        lib1926661B_gf_AddVictoryPanelCustomStatistic("Hit by Creature", "Yes");
    }
    else if (autoD9F777A7_val == false) {
        lib1926661B_gf_AddVictoryPanelCustomStatistic("Hit by Creature", "No");
    }
    else {
    }
    lib1926661B_gf_AddVictoryPanelCustomStatistic("Lore Collected", (IntToString(gv_loreFound) + " / 3"));
    lib1926661B_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib1926661B_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    lib1926661B_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss HK Eggs
//--------------------------------------------------------------------------------------------------
bool gt_BossHKEggs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto058FA988_n = 150;
    int auto058FA988_i;

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gf_DifficultyValueBoolean(false, true) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HunterKiller"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto058FA988_i = 1; auto058FA988_i <= auto058FA988_n; auto058FA988_i += 1) {
        Wait(RandomInt(21, 26), c_timeGame);
        if ((UnitIsAlive(gv_bossHKUnit) == true)) {
            UnitIssueOrder(gv_bossHKUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetState(gv_bossHKUnit, c_unitStateMoveSuppressed, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(gv_bossHKUnit));
            gv_bossEggs = UnitLastCreated();
            libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
            Wait(2.0, c_timeGame);
            UnitSetState(gv_bossHKUnit, c_unitStateMoveSuppressed, true);
            Wait(RandomInt(6, 9), c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(1, 1), "Hydralisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(gv_bossEggs));
            libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(2, 4), "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(gv_bossEggs));
            UnitKill(gv_bossEggs);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossHKEggs_Init () {
    gt_BossHKEggs = TriggerCreate("gt_BossHKEggs_Func");
    TriggerEnable(gt_BossHKEggs, false);
    TriggerAddEventUnitRegion(gt_BossHKEggs, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss HK Constant Aggression
//--------------------------------------------------------------------------------------------------
bool gt_BossHKConstantAggression_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9AC0B50E_g;
    int auto9AC0B50E_u;
    unit auto9AC0B50E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto9AC0B50E_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9AC0B50E_u = UnitGroupCount(auto9AC0B50E_g, c_unitCountAll);
    for (;; auto9AC0B50E_u -= 1) {
        auto9AC0B50E_var = UnitGroupUnitFromEnd(auto9AC0B50E_g, auto9AC0B50E_u);
        if (auto9AC0B50E_var == null) { break; }
        UnitIssueOrder(auto9AC0B50E_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_mYRADAVIS), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossHKConstantAggression_Init () {
    gt_BossHKConstantAggression = TriggerCreate("gt_BossHKConstantAggression_Func");
    TriggerEnable(gt_BossHKConstantAggression, false);
    TriggerAddEventTimePeriodic(gt_BossHKConstantAggression, 0.3, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss HK Death
//--------------------------------------------------------------------------------------------------
bool gt_BossHKDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_larva1;
    unit lv_larva2;
    unit lv_larva3;
    unit lv_larva4;
    unit lv_larva5;
    unit lv_larva6;
    unit lv_larva7;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gf_DifficultyValueBoolean(false, true) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_bossHKUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_BossHKEggs);
    SoundPlayForPlayer(SoundLink("M2HKDeath3", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    libNtve_gf_CreateActorAtPoint("ZergBloodLargeBuilding", UnitGetPosition(gv_bossHKUnit));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionZergLarge", UnitGetPosition(gv_bossHKUnit));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva1 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva2 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva3 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva4 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva5 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva6 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva7 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    Wait(16.0, c_timeGame);
    UnitKill(lv_larva1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva1));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva1 = UnitLastCreated();
    UnitKill(lv_larva2);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva2));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva2 = UnitLastCreated();
    UnitKill(lv_larva3);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva3));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva3 = UnitLastCreated();
    UnitKill(lv_larva4);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva4));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva4 = UnitLastCreated();
    UnitKill(lv_larva5);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva5));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva5 = UnitLastCreated();
    UnitKill(lv_larva6);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva6));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva6 = UnitLastCreated();
    UnitKill(lv_larva7);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva7));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva7 = UnitLastCreated();
    Wait(11.0, c_timeGame);
    UnitKill(lv_larva1);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva1));
    UnitKill(lv_larva2);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva2));
    Wait(9.0, c_timeGame);
    UnitKill(lv_larva3);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva3));
    Wait(12.0, c_timeGame);
    UnitKill(lv_larva7);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HunterKiller", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva7));
    SoundPlayForPlayer(SoundLink("M2HKGrowl1222", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_bossHKUnit = UnitLastCreated();
    gv_bossHKSplitCount = 7;
    Wait(8.0, c_timeGame);
    UnitKill(lv_larva5);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva5));
    UnitKill(lv_larva6);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva6));
    Wait(11.0, c_timeGame);
    UnitKill(lv_larva4);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva4));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossHKDeath_Init () {
    gt_BossHKDeath = TriggerCreate("gt_BossHKDeath_Func");
    TriggerAddEventUnitDied(gt_BossHKDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss HK Death 2
//--------------------------------------------------------------------------------------------------
bool gt_BossHKDeath2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_larva1;
    unit lv_larva2;
    unit lv_larva3;
    unit lv_larva4;
    unit lv_larva5;
    unit lv_larva6;
    unit lv_larva7;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gf_DifficultyValueBoolean(false, true) == false))) {
            return false;
        }

        if (!((EventUnit() == gv_bossHKUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_BossHKEggs);
    SoundPlayForPlayer(SoundLink("M2HKDeath3", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    libNtve_gf_CreateActorAtPoint("ZergBloodLargeBuilding", UnitGetPosition(gv_bossHKUnit));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionZergLarge", UnitGetPosition(gv_bossHKUnit));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva1 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva2 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva3 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva4 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva5 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva6 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LarvalQueen", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, UnitGetPosition(gv_bossHKUnit));
    lv_larva7 = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueAddToEnd);
    Wait(16.0, c_timeGame);
    UnitKill(lv_larva1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva1));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva1 = UnitLastCreated();
    UnitKill(lv_larva2);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva2));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva2 = UnitLastCreated();
    UnitKill(lv_larva3);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva3));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva3 = UnitLastCreated();
    UnitKill(lv_larva4);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva4));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva4 = UnitLastCreated();
    UnitKill(lv_larva5);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva5));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva5 = UnitLastCreated();
    UnitKill(lv_larva6);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva6));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva6 = UnitLastCreated();
    UnitKill(lv_larva7);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva7));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    lv_larva7 = UnitLastCreated();
    Wait(11.0, c_timeGame);
    UnitKill(lv_larva1);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva1));
    UnitKill(lv_larva2);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva2));
    Wait(9.0, c_timeGame);
    UnitKill(lv_larva3);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva2));
    Wait(12.0, c_timeGame);
    UnitKill(lv_larva7);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HunterKiller", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva7));
    SoundPlayForPlayer(SoundLink("M2HKGrowl1222", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_bossHKUnit = UnitLastCreated();
    gv_bossHKSplitCount = 7;
    Wait(8.0, c_timeGame);
    UnitKill(lv_larva5);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva6));
    UnitKill(lv_larva6);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva6));
    Wait(11.0, c_timeGame);
    UnitKill(lv_larva4);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_larva4));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossHKDeath2_Init () {
    gt_BossHKDeath2 = TriggerCreate("gt_BossHKDeath2_Func");
    TriggerAddEventUnitDied(gt_BossHKDeath2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Section Start
//--------------------------------------------------------------------------------------------------
bool gt_SewerSectionStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4E28B18E_g;
    int auto4E28B18E_u;
    unit auto4E28B18E_var;
    unitgroup auto2CA7CC9F_g;
    int auto2CA7CC9F_u;
    unit auto2CA7CC9F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4E28B18E_g = UnitGroup(null, c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4E28B18E_u = UnitGroupCount(auto4E28B18E_g, c_unitCountAll);
    for (;; auto4E28B18E_u -= 1) {
        auto4E28B18E_var = UnitGroupUnitFromEnd(auto4E28B18E_g, auto4E28B18E_u);
        if (auto4E28B18E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4E28B18E_var, true);
    }
    RegionPlayableMapSet(RegionFromId(7));
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    UISetMiniMapBounds(PlayerGroupAll(), RegionPlayableMap());
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "M2SewerMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    lib1926661B_gf_SetHeroPanelUnit(1, gv_mYRADAVIS);
    lib1926661B_gf_ShowHideHeroPanel(1, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    VisFillArea(gv_pLAYER_01_USER, RegionFromId(7), c_fillTypeUnexplored, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1109018692), 0.0, -1, 10.0, true);
    auto2CA7CC9F_g = UnitGroup("AiurRockDebris4x4", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto2CA7CC9F_u = UnitGroupCount(auto2CA7CC9F_g, c_unitCountAll);
    for (;; auto2CA7CC9F_u -= 1) {
        auto2CA7CC9F_var = UnitGroupUnitFromEnd(auto2CA7CC9F_g, auto2CA7CC9F_u);
        if (auto2CA7CC9F_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2CA7CC9F_var, true);
    }
    TriggerEnable(gt_BossHKEggs, true);
    TriggerEnable(gt_BossHKConstantAggression, true);
    TriggerExecute(gt_BossHKEggs, false, false);
    TriggerEnable(gt_SewerSectionHideFallingDebris, true);
    ObjectiveCreate(StringExternal("Param/Value/052C4087"), StringToText(""), c_objectiveStateActive, true);
    gv_dabisLivesObjective = ObjectiveLastCreated();
    ObjectiveShow(gv_dabisLivesObjective, PlayerGroupAll(), true);
    ObjectiveCreate(StringExternal("Param/Value/3D98F8B4"), StringToText(""), c_objectiveStateActive, true);
    gv_sewerSectionEscapeObjective = ObjectiveLastCreated();
    ObjectiveShow(gv_sewerSectionEscapeObjective, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("M2HKGrowl122", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerSectionStart_Init () {
    gt_SewerSectionStart = TriggerCreate("gt_SewerSectionStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Section Hide Falling Debris
//--------------------------------------------------------------------------------------------------
bool gt_SewerSectionHideFallingDebris_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "SpaceFallingDebris");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerSectionHideFallingDebris_Init () {
    gt_SewerSectionHideFallingDebris = TriggerCreate("gt_SewerSectionHideFallingDebris_Func");
    TriggerEnable(gt_SewerSectionHideFallingDebris, false);
    TriggerAddEventTimePeriodic(gt_SewerSectionHideFallingDebris, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Section Charges
//--------------------------------------------------------------------------------------------------
bool gt_SewerSectionCharges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2A212D0C_g;
    int auto2A212D0C_u;
    unit auto2A212D0C_var;

    // Conditions
    if (testConds) {
        if (!((gv_sewerSectionAmmoniaPartLive == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto2A212D0C_g = UnitGroup("AiurRockDebris4x4", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A212D0C_u = UnitGroupCount(auto2A212D0C_g, c_unitCountAll);
    for (;; auto2A212D0C_u -= 1) {
        auto2A212D0C_var = UnitGroupUnitFromEnd(auto2A212D0C_g, auto2A212D0C_u);
        if (auto2A212D0C_var == null) { break; }
        UnitSetInfoTip(auto2A212D0C_var, StringExternal("Param/Value/4DFEAD7A"));
    }
    gv_sewerSectionAmmoniaPartLive = true;
    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/96C5CF32"));
    lib1926661B_gf_CreateReticleEffectAndTextTagAtPoint(lib1926661B_ge_CampaginReticleType_TerranMainObjective, lib1926661B_ge_CampaginReticleSize_Large, StringExternal("Param/Value/DD7CFF72"), PointFromId(97609829));
    gv_sewerSectionActor = libNtve_gf_ActorLastCreated();
    gv_sewerSectionTextTag = TextTagLastCreated();
    TriggerExecute(gt_TipExplosives, true, false);
    Wait(4.0, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitFromId(1625000841), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1472802851), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1290556368), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1091611762), true);
    lib1926661B_gf_CreateObjectivePing(false, PointFromId(1365797475), StringExternal("Param/Value/8B44BE62"));
    gv_sewerSectionAmmonia1 = PingLastCreated();
    lib1926661B_gf_CreateObjectivePing(false, PointFromId(686222431), StringExternal("Param/Value/D7E02563"));
    gv_sewerSectionAmmonia2 = PingLastCreated();
    lib1926661B_gf_CreateObjectivePing(true, PointFromId(902936854), StringExternal("Param/Value/8ED7F504"));
    gv_sewerSectionExitPing = PingLastCreated();
    TextTagCreate(StringExternal("Param/Value/709E6BDA"), 32, libNtve_gf_PointFacingAngle(RegionGetCenter(RegionFromId(10)), 270.0), 2.0, true, false, PlayerGroupAll());
    gv_sewerSectionDynamiteTextTag1 = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/7C122AD8"), 32, libNtve_gf_PointFacingAngle(RegionGetCenter(RegionFromId(11)), 270.0), 2.0, true, false, PlayerGroupAll());
    gv_sewerSectionDynamiteTextTag2 = TextTagLastCreated();
    Wait(4.0, c_timeGame);
    libVCUI_gf_HideCampaignDirective();
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3B4A8033"));
    ObjectiveSetName(gv_sewerSectionEscapeObjective, StringExternal("Param/Value/3B1ED78A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerSectionCharges_Init () {
    gt_SewerSectionCharges = TriggerCreate("gt_SewerSectionCharges_Func");
    TriggerAddEventUnitRegion(gt_SewerSectionCharges, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Section Ammonia Pickup1
//--------------------------------------------------------------------------------------------------
bool gt_SewerSectionAmmoniaPickup1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_sewerSectionAmmoniaPartLive == true))) {
            return false;
        }

        if (!((gv_sewerSectionCarryingAmmonia == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sewerSectionCarryingAmmonia = true;
    UnitKill(UnitFromId(1472802851));
    UnitBehaviorAdd(gv_mYRADAVIS, "LotC_EP01M02_CarryingCanister", gv_mYRADAVIS, 1);
    SoundPlayForPlayer(SoundLink("M2AmmoniaGrab", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E931FADB"));
    PingDestroy(gv_sewerSectionAmmonia1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerSectionAmmoniaPickup1_Init () {
    gt_SewerSectionAmmoniaPickup1 = TriggerCreate("gt_SewerSectionAmmoniaPickup1_Func");
    TriggerAddEventUnitRegion(gt_SewerSectionAmmoniaPickup1, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Section Ammonia Pickup2
//--------------------------------------------------------------------------------------------------
bool gt_SewerSectionAmmoniaPickup2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_sewerSectionAmmoniaPartLive == true))) {
            return false;
        }

        if (!((gv_sewerSectionCarryingAmmonia == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sewerSectionCarryingAmmonia = true;
    UnitKill(UnitFromId(1625000841));
    UnitBehaviorAdd(gv_mYRADAVIS, "LotC_EP01M02_CarryingCanister", gv_mYRADAVIS, 1);
    SoundPlayForPlayer(SoundLink("M2AmmoniaGrab", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4599F846"));
    PingDestroy(gv_sewerSectionAmmonia2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerSectionAmmoniaPickup2_Init () {
    gt_SewerSectionAmmoniaPickup2 = TriggerCreate("gt_SewerSectionAmmoniaPickup2_Func");
    TriggerAddEventUnitRegion(gt_SewerSectionAmmoniaPickup2, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Section Ammonia Dropoff1
//--------------------------------------------------------------------------------------------------
bool gt_SewerSectionAmmoniaDropoff1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_sewerSectionAmmoniaPartLive == true))) {
            return false;
        }

        if (!((gv_sewerSectionCarryingAmmonia == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sewerSectionCarryingAmmonia = false;
    UnitBehaviorRemove(gv_mYRADAVIS, "LotC_EP01M02_CarryingCanister", 1);
    libNtve_gf_ShowHideUnit(UnitFromId(265082614), true);
    UnitKill(UnitFromId(1091611762));
    TextTagDestroy(gv_sewerSectionDynamiteTextTag1);
    SoundPlayForPlayer(SoundLink("M2AmmoniaDropoff", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6F8E5737"));
    gv_sewerSectionAmmoniaCratesRetrieved += 1;
    TriggerExecute(gt_SewerSectionVictory, true, false);
    lib1926661B_gf_FlashCheckpointReminder();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerSectionAmmoniaDropoff1_Init () {
    gt_SewerSectionAmmoniaDropoff1 = TriggerCreate("gt_SewerSectionAmmoniaDropoff1_Func");
    TriggerAddEventUnitRegion(gt_SewerSectionAmmoniaDropoff1, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Section Ammonia Dropoff2
//--------------------------------------------------------------------------------------------------
bool gt_SewerSectionAmmoniaDropoff2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_sewerSectionAmmoniaPartLive == true))) {
            return false;
        }

        if (!((gv_sewerSectionCarryingAmmonia == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sewerSectionCarryingAmmonia = false;
    UnitBehaviorRemove(gv_mYRADAVIS, "LotC_EP01M02_CarryingCanister", 1);
    libNtve_gf_ShowHideUnit(UnitFromId(2056514458), true);
    UnitKill(UnitFromId(1290556368));
    TextTagDestroy(gv_sewerSectionDynamiteTextTag2);
    SoundPlayForPlayer(SoundLink("M2AmmoniaDropoff", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C755D519"));
    gv_sewerSectionAmmoniaCratesRetrieved += 1;
    TriggerExecute(gt_SewerSectionVictory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerSectionAmmoniaDropoff2_Init () {
    gt_SewerSectionAmmoniaDropoff2 = TriggerCreate("gt_SewerSectionAmmoniaDropoff2_Func");
    TriggerAddEventUnitRegion(gt_SewerSectionAmmoniaDropoff2, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Section Victory
//--------------------------------------------------------------------------------------------------
bool gt_SewerSectionVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_sewerSectionAmmoniaCratesRetrieved == 2))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_StatDavisHit, false);
    if ((gv_stat_DavisHit == false) && (lib1926661B_gf_DifficultyValueBoolean(false, true) == true)) {
        libAE8FC9D3_gf_AwardAchievement("EP01M02-P2-Hard", gv_pLAYER_01_USER);
    }
    libNtve_gf_ChangeUnitDamage(gv_mYRADAVIS, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    ObjectiveSetState(gv_sewerSectionEscapeObjective, c_objectiveStateCompleted);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    Wait(2.5, c_timeReal);
    gv_sewerSectionComplete = true;
    TriggerEnable(gt_BossHKConstantAggression, false);
    TriggerEnable(gt_BossHKDeath, false);
    TriggerEnable(gt_BossHKDeath2, false);
    TriggerStop(gt_BossHKDeath);
    TriggerStop(gt_BossHKDeath2);
    TriggerStop(gt_BossHKConstantAggression);
    TriggerDestroy(gt_BossHKDeath);
    TriggerDestroy(gt_BossHKDeath2);
    TriggerDestroy(gt_BossHKConstantAggression);
    TriggerExecute(gt_SewerEscapeCinematicSetup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerSectionVictory_Init () {
    gt_SewerSectionVictory = TriggerCreate("gt_SewerSectionVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Zerg Attack After Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutZergAttackAfterUnburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4FF5ABF2_g;
    int auto4FF5ABF2_u;
    unit auto4FF5ABF2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4FF5ABF2_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4FF5ABF2_u = UnitGroupCount(auto4FF5ABF2_g, c_unitCountAll);
    for (;; auto4FF5ABF2_u -= 1) {
        auto4FF5ABF2_var = UnitGroupUnitFromEnd(auto4FF5ABF2_g, auto4FF5ABF2_u);
        if (auto4FF5ABF2_var == null) { break; }
        UnitIssueOrder(auto4FF5ABF2_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        UnitIssueOrder(auto4FF5ABF2_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueAddToEnd);
        UnitIssueOrder(auto4FF5ABF2_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueAddToEnd);
        UnitIssueOrder(auto4FF5ABF2_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueAddToEnd);
        UnitIssueOrder(auto4FF5ABF2_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutZergAttackAfterUnburrow_Init () {
    gt_UPLHoldoutZergAttackAfterUnburrow = TriggerCreate("gt_UPLHoldoutZergAttackAfterUnburrow_Func");
    TriggerEnable(gt_UPLHoldoutZergAttackAfterUnburrow, false);
    TriggerAddEventTimePeriodic(gt_UPLHoldoutZergAttackAfterUnburrow, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout First Attack 1
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutFirstAttack1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4058CC74_n;
    int auto4058CC74_i;
    int auto28639328_n;
    int auto28639328_i;
    int autoA70D5B53_n;
    int autoA70D5B53_i;
    int autoD195C0D7_n;
    int autoD195C0D7_i;
    int autoBC1B8565_n;
    int autoBC1B8565_i;
    int autoBFDDD111_n;
    int autoBFDDD111_i;
    int autoBBE39665_n;
    int autoBBE39665_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4058CC74_n = lib1926661B_gf_DifficultyValueInteger(7, 19);
    for (auto4058CC74_i = 1; auto4058CC74_i <= auto4058CC74_n; auto4058CC74_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(286)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    Wait(10.0, c_timeGame);
    auto28639328_n = lib1926661B_gf_DifficultyValueInteger(11, 23);
    for (auto28639328_i = 1; auto28639328_i <= auto28639328_n; auto28639328_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(286)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    autoA70D5B53_n = lib1926661B_gf_DifficultyValueInteger(2, 4);
    for (autoA70D5B53_i = 1; autoA70D5B53_i <= autoA70D5B53_n; autoA70D5B53_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(286)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    autoD195C0D7_n = lib1926661B_gf_DifficultyValueInteger(4, 11);
    for (autoD195C0D7_i = 1; autoD195C0D7_i <= autoD195C0D7_n; autoD195C0D7_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(286)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    autoBC1B8565_n = lib1926661B_gf_DifficultyValueInteger(10, 23);
    for (autoBC1B8565_i = 1; autoBC1B8565_i <= autoBC1B8565_n; autoBC1B8565_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(286)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    autoBFDDD111_n = lib1926661B_gf_DifficultyValueInteger(10, 22);
    for (autoBFDDD111_i = 1; autoBFDDD111_i <= autoBFDDD111_n; autoBFDDD111_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    Wait(15.0, c_timeGame);
    autoBBE39665_n = lib1926661B_gf_DifficultyValueInteger(4, 9);
    for (autoBBE39665_i = 1; autoBBE39665_i <= autoBBE39665_n; autoBBE39665_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutFirstAttack1_Init () {
    gt_UPLHoldoutFirstAttack1 = TriggerCreate("gt_UPLHoldoutFirstAttack1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout First Attack 2
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutFirstAttack2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto70FC9E6B_n;
    int auto70FC9E6B_i;
    int auto9A705F66_n;
    int auto9A705F66_i;
    int auto3C3D1FE7_n;
    int auto3C3D1FE7_i;
    int auto89B696DB_n;
    int auto89B696DB_i;
    int autoC81B5E76_n;
    int autoC81B5E76_i;
    int auto1319B2BF_n;
    int auto1319B2BF_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto70FC9E6B_n = lib1926661B_gf_DifficultyValueInteger(11, 23);
    for (auto70FC9E6B_i = 1; auto70FC9E6B_i <= auto70FC9E6B_n; auto70FC9E6B_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(283)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    auto9A705F66_n = lib1926661B_gf_DifficultyValueInteger(9, 22);
    for (auto9A705F66_i = 1; auto9A705F66_i <= auto9A705F66_n; auto9A705F66_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    Wait(15.0, c_timeGame);
    auto3C3D1FE7_n = lib1926661B_gf_DifficultyValueInteger(12, 28);
    for (auto3C3D1FE7_i = 1; auto3C3D1FE7_i <= auto3C3D1FE7_n; auto3C3D1FE7_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(283)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    auto89B696DB_n = lib1926661B_gf_DifficultyValueInteger(3, 8);
    for (auto89B696DB_i = 1; auto89B696DB_i <= auto89B696DB_n; auto89B696DB_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    autoC81B5E76_n = lib1926661B_gf_DifficultyValueInteger(3, 7);
    for (autoC81B5E76_i = 1; autoC81B5E76_i <= autoC81B5E76_n; autoC81B5E76_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        UnitGroupAdd(gv_uPLHoldoutSectionRoachGroup, UnitLastCreated());
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    auto1319B2BF_n = lib1926661B_gf_DifficultyValueInteger(2, 5);
    for (auto1319B2BF_i = 1; auto1319B2BF_i <= auto1319B2BF_n; auto1319B2BF_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        UnitGroupAdd(gv_uPLHoldoutSectionRoachGroup, UnitLastCreated());
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    gv_uPLHoldoutSectionActive = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutFirstAttack2_Init () {
    gt_UPLHoldoutFirstAttack2 = TriggerCreate("gt_UPLHoldoutFirstAttack2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout First Attack 3
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutFirstAttack3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8648CB41_n;
    int auto8648CB41_i;
    int autoADD88FE7_n;
    int autoADD88FE7_i;
    int auto26D11077_n;
    int auto26D11077_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8648CB41_n = lib1926661B_gf_DifficultyValueInteger(11, 25);
    for (auto8648CB41_i = 1; auto8648CB41_i <= auto8648CB41_n; auto8648CB41_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(286)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    autoADD88FE7_n = lib1926661B_gf_DifficultyValueInteger(7, 18);
    for (autoADD88FE7_i = 1; autoADD88FE7_i <= autoADD88FE7_n; autoADD88FE7_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    Wait(15.0, c_timeGame);
    auto26D11077_n = lib1926661B_gf_DifficultyValueInteger(5, 12);
    for (auto26D11077_i = 1; auto26D11077_i <= auto26D11077_n; auto26D11077_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(286)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutFirstAttack3_Init () {
    gt_UPLHoldoutFirstAttack3 = TriggerCreate("gt_UPLHoldoutFirstAttack3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Second Attack 1
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSecondAttack1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB23A6AEE_n;
    int autoB23A6AEE_i;
    int auto6D01524B_n;
    int auto6D01524B_i;
    int auto1BAB5598_n;
    int auto1BAB5598_i;
    int auto428158A2_n;
    int auto428158A2_i;
    int auto637F3AA9_n;
    int auto637F3AA9_i;
    int auto19C295AB_n;
    int auto19C295AB_i;
    int auto890D1B80_n;
    int auto890D1B80_i;
    int autoEAB15FB8_n;
    int autoEAB15FB8_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB23A6AEE_n = lib1926661B_gf_DifficultyValueInteger(13, 30);
    for (autoB23A6AEE_i = 1; autoB23A6AEE_i <= autoB23A6AEE_n; autoB23A6AEE_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    auto6D01524B_n = lib1926661B_gf_DifficultyValueInteger(13, 30);
    for (auto6D01524B_i = 1; auto6D01524B_i <= auto6D01524B_n; auto6D01524B_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    Wait(10.0, c_timeGame);
    auto1BAB5598_n = lib1926661B_gf_DifficultyValueInteger(15, 35);
    for (auto1BAB5598_i = 1; auto1BAB5598_i <= auto1BAB5598_n; auto1BAB5598_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    auto428158A2_n = lib1926661B_gf_DifficultyValueInteger(3, 6);
    for (auto428158A2_i = 1; auto428158A2_i <= auto428158A2_n; auto428158A2_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.6, 1.4), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    auto637F3AA9_n = lib1926661B_gf_DifficultyValueInteger(3, 8);
    for (auto637F3AA9_i = 1; auto637F3AA9_i <= auto637F3AA9_n; auto637F3AA9_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.6, 1.4), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    auto19C295AB_n = lib1926661B_gf_DifficultyValueInteger(13, 30);
    for (auto19C295AB_i = 1; auto19C295AB_i <= auto19C295AB_n; auto19C295AB_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    auto890D1B80_n = lib1926661B_gf_DifficultyValueInteger(13, 30);
    for (auto890D1B80_i = 1; auto890D1B80_i <= auto890D1B80_n; auto890D1B80_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.8), c_timeGame);
    }
    Wait(15.0, c_timeGame);
    autoEAB15FB8_n = lib1926661B_gf_DifficultyValueInteger(7, 18);
    for (autoEAB15FB8_i = 1; autoEAB15FB8_i <= autoEAB15FB8_n; autoEAB15FB8_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.6, 1.4), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSecondAttack1_Init () {
    gt_UPLHoldoutSecondAttack1 = TriggerCreate("gt_UPLHoldoutSecondAttack1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Second Attack 2
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSecondAttack2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB3574767_n;
    int autoB3574767_i;
    const int auto81363745_n = 1;
    int auto81363745_i;
    int auto5692A35B_n;
    int auto5692A35B_i;
    int autoEF241642_n;
    int autoEF241642_i;
    int auto355CC896_n;
    int auto355CC896_i;
    int autoFD392592_n;
    int autoFD392592_i;
    int autoEEA7DB82_n;
    int autoEEA7DB82_i;
    int auto838EEE1F_n;
    int auto838EEE1F_i;
    int auto81A36AAB_n;
    int auto81A36AAB_i;
    int auto4F59F8EC_n;
    int auto4F59F8EC_i;
    int auto00F72E22_n;
    int auto00F72E22_i;
    int autoA713F23F_n;
    int autoA713F23F_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB3574767_n = lib1926661B_gf_DifficultyValueInteger(13, 30);
    for (autoB3574767_i = 1; autoB3574767_i <= autoB3574767_n; autoB3574767_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    for (auto81363745_i = 1; auto81363745_i <= auto81363745_n; auto81363745_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(5)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    auto5692A35B_n = lib1926661B_gf_DifficultyValueInteger(13, 30);
    for (auto5692A35B_i = 1; auto5692A35B_i <= auto5692A35B_n; auto5692A35B_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    Wait(10.0, c_timeGame);
    autoEF241642_n = lib1926661B_gf_DifficultyValueInteger(14, 35);
    for (autoEF241642_i = 1; autoEF241642_i <= autoEF241642_n; autoEF241642_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(283)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    auto355CC896_n = lib1926661B_gf_DifficultyValueInteger(3, 6);
    for (auto355CC896_i = 1; auto355CC896_i <= auto355CC896_n; auto355CC896_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    autoFD392592_n = lib1926661B_gf_DifficultyValueInteger(4, 8);
    for (autoFD392592_i = 1; autoFD392592_i <= autoFD392592_n; autoFD392592_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    autoEEA7DB82_n = lib1926661B_gf_DifficultyValueInteger(13, 30);
    for (autoEEA7DB82_i = 1; autoEEA7DB82_i <= autoEEA7DB82_n; autoEEA7DB82_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    auto838EEE1F_n = lib1926661B_gf_DifficultyValueInteger(13, 30);
    for (auto838EEE1F_i = 1; auto838EEE1F_i <= auto838EEE1F_n; auto838EEE1F_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    Wait(15.0, c_timeGame);
    auto81A36AAB_n = lib1926661B_gf_DifficultyValueInteger(6, 17);
    for (auto81A36AAB_i = 1; auto81A36AAB_i <= auto81A36AAB_n; auto81A36AAB_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    Wait(17.0, c_timeGame);
    auto4F59F8EC_n = lib1926661B_gf_DifficultyValueInteger(13, 30);
    for (auto4F59F8EC_i = 1; auto4F59F8EC_i <= auto4F59F8EC_n; auto4F59F8EC_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    auto00F72E22_n = lib1926661B_gf_DifficultyValueInteger(0, 1);
    for (auto00F72E22_i = 1; auto00F72E22_i <= auto00F72E22_n; auto00F72E22_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(4)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    autoA713F23F_n = lib1926661B_gf_DifficultyValueInteger(0, 1);
    for (autoA713F23F_i = 1; autoA713F23F_i <= autoA713F23F_n; autoA713F23F_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GuardianMP", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(4)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSecondAttack2_Init () {
    gt_UPLHoldoutSecondAttack2 = TriggerCreate("gt_UPLHoldoutSecondAttack2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Second Attack 3
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSecondAttack3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoADDEF6F6_n;
    int autoADDEF6F6_i;
    int auto1D584F1A_n;
    int auto1D584F1A_i;
    int auto63C8D039_n;
    int auto63C8D039_i;
    int auto180736AD_n;
    int auto180736AD_i;
    int auto196B3F80_n;
    int auto196B3F80_i;
    int auto030B22C8_n;
    int auto030B22C8_i;
    int auto85342799_n;
    int auto85342799_i;
    int auto99BE83FF_n;
    int auto99BE83FF_i;
    int auto96C8D7F5_n;
    int auto96C8D7F5_i;
    const int auto3470FE68_n = 13;
    int auto3470FE68_i;
    int auto250CACC0_n;
    int auto250CACC0_i;
    int auto6BD7D2F5_n;
    int auto6BD7D2F5_i;
    int auto28EFB38E_n;
    int auto28EFB38E_i;
    const int autoE4084264_n = 1;
    int autoE4084264_i;
    int autoF16D5B16_n;
    int autoF16D5B16_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoADDEF6F6_n = lib1926661B_gf_DifficultyValueInteger(8, 21);
    for (autoADDEF6F6_i = 1; autoADDEF6F6_i <= autoADDEF6F6_n; autoADDEF6F6_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    auto1D584F1A_n = lib1926661B_gf_DifficultyValueInteger(1, 2);
    for (auto1D584F1A_i = 1; auto1D584F1A_i <= auto1D584F1A_n; auto1D584F1A_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(6)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    auto63C8D039_n = lib1926661B_gf_DifficultyValueInteger(7, 18);
    for (auto63C8D039_i = 1; auto63C8D039_i <= auto63C8D039_n; auto63C8D039_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    Wait(10.0, c_timeGame);
    auto180736AD_n = lib1926661B_gf_DifficultyValueInteger(7, 15);
    for (auto180736AD_i = 1; auto180736AD_i <= auto180736AD_n; auto180736AD_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(283)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    auto196B3F80_n = lib1926661B_gf_DifficultyValueInteger(2, 4);
    for (auto196B3F80_i = 1; auto196B3F80_i <= auto196B3F80_n; auto196B3F80_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.8, 1.4), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    auto030B22C8_n = lib1926661B_gf_DifficultyValueInteger(2, 4);
    for (auto030B22C8_i = 1; auto030B22C8_i <= auto030B22C8_n; auto030B22C8_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.8, 1.4), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    auto85342799_n = lib1926661B_gf_DifficultyValueInteger(7, 18);
    for (auto85342799_i = 1; auto85342799_i <= auto85342799_n; auto85342799_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(283)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    auto99BE83FF_n = lib1926661B_gf_DifficultyValueInteger(0, 1);
    for (auto99BE83FF_i = 1; auto99BE83FF_i <= auto99BE83FF_n; auto99BE83FF_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(4)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    auto96C8D7F5_n = lib1926661B_gf_DifficultyValueInteger(0, 1);
    for (auto96C8D7F5_i = 1; auto96C8D7F5_i <= auto96C8D7F5_n; auto96C8D7F5_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GuardianMP", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(4)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    for (auto3470FE68_i = 1; auto3470FE68_i <= auto3470FE68_n; auto3470FE68_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    Wait(15.0, c_timeGame);
    auto250CACC0_n = lib1926661B_gf_DifficultyValueInteger(0, 1);
    for (auto250CACC0_i = 1; auto250CACC0_i <= auto250CACC0_n; auto250CACC0_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(5)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    auto6BD7D2F5_n = lib1926661B_gf_DifficultyValueInteger(3, 6);
    for (auto6BD7D2F5_i = 1; auto6BD7D2F5_i <= auto6BD7D2F5_n; auto6BD7D2F5_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.8, 1.4), c_timeGame);
    }
    Wait(17.0, c_timeGame);
    auto28EFB38E_n = lib1926661B_gf_DifficultyValueInteger(5, 13);
    for (auto28EFB38E_i = 1; auto28EFB38E_i <= auto28EFB38E_n; auto28EFB38E_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    for (autoE4084264_i = 1; autoE4084264_i <= autoE4084264_n; autoE4084264_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(6)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    autoF16D5B16_n = lib1926661B_gf_DifficultyValueInteger(2, 5);
    for (autoF16D5B16_i = 1; autoF16D5B16_i <= autoF16D5B16_n; autoF16D5B16_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(1.2, 2.8), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSecondAttack3_Init () {
    gt_UPLHoldoutSecondAttack3 = TriggerCreate("gt_UPLHoldoutSecondAttack3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Second Attack 4
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSecondAttack4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2C60B4DF_n;
    int auto2C60B4DF_i;
    int auto59E36D6A_n;
    int auto59E36D6A_i;
    int autoABB88B79_n;
    int autoABB88B79_i;
    int autoCBFFC54B_n;
    int autoCBFFC54B_i;
    int autoDC322CB0_n;
    int autoDC322CB0_i;
    int autoDA2FBD67_n;
    int autoDA2FBD67_i;
    int autoB7514C33_n;
    int autoB7514C33_i;
    int auto9FECBDAF_n;
    int auto9FECBDAF_i;
    int auto1E316907_n;
    int auto1E316907_i;
    int auto7CC7BD64_n;
    int auto7CC7BD64_i;
    int auto876C6399_n;
    int auto876C6399_i;
    const int autoDE3AEA5D_n = 1;
    int autoDE3AEA5D_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2C60B4DF_n = lib1926661B_gf_DifficultyValueInteger(9, 21);
    for (auto2C60B4DF_i = 1; auto2C60B4DF_i <= auto2C60B4DF_n; auto2C60B4DF_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    auto59E36D6A_n = lib1926661B_gf_DifficultyValueInteger(0, 1);
    for (auto59E36D6A_i = 1; auto59E36D6A_i <= auto59E36D6A_n; auto59E36D6A_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(4)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    autoABB88B79_n = lib1926661B_gf_DifficultyValueInteger(7, 18);
    for (autoABB88B79_i = 1; autoABB88B79_i <= autoABB88B79_n; autoABB88B79_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    Wait(10.0, c_timeGame);
    autoCBFFC54B_n = lib1926661B_gf_DifficultyValueInteger(6, 14);
    for (autoCBFFC54B_i = 1; autoCBFFC54B_i <= autoCBFFC54B_n; autoCBFFC54B_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(283)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    autoDC322CB0_n = lib1926661B_gf_DifficultyValueInteger(3, 6);
    for (autoDC322CB0_i = 1; autoDC322CB0_i <= autoDC322CB0_n; autoDC322CB0_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.7, 1.2), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    autoDA2FBD67_n = lib1926661B_gf_DifficultyValueInteger(2, 5);
    for (autoDA2FBD67_i = 1; autoDA2FBD67_i <= autoDA2FBD67_n; autoDA2FBD67_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.7, 1.2), c_timeGame);
    }
    Wait(22.0, c_timeGame);
    autoB7514C33_n = lib1926661B_gf_DifficultyValueInteger(11, 25);
    for (autoB7514C33_i = 1; autoB7514C33_i <= autoB7514C33_n; autoB7514C33_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.6), c_timeGame);
    }
    auto9FECBDAF_n = lib1926661B_gf_DifficultyValueInteger(18, 43);
    for (auto9FECBDAF_i = 1; auto9FECBDAF_i <= auto9FECBDAF_n; auto9FECBDAF_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.6), c_timeGame);
    }
    Wait(15.0, c_timeGame);
    auto1E316907_n = lib1926661B_gf_DifficultyValueInteger(13, 27);
    for (auto1E316907_i = 1; auto1E316907_i <= auto1E316907_n; auto1E316907_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.8, 1.4), c_timeGame);
    }
    Wait(17.0, c_timeGame);
    auto7CC7BD64_n = lib1926661B_gf_DifficultyValueInteger(12, 27);
    for (auto7CC7BD64_i = 1; auto7CC7BD64_i <= auto7CC7BD64_n; auto7CC7BD64_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.6), c_timeGame);
    }
    auto876C6399_n = lib1926661B_gf_DifficultyValueInteger(0, 1);
    for (auto876C6399_i = 1; auto876C6399_i <= auto876C6399_n; auto876C6399_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(6)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    for (autoDE3AEA5D_i = 1; autoDE3AEA5D_i <= autoDE3AEA5D_n; autoDE3AEA5D_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GuardianMP", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(4)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSecondAttack4_Init () {
    gt_UPLHoldoutSecondAttack4 = TriggerCreate("gt_UPLHoldoutSecondAttack4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Second Attack 5
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSecondAttack5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE2C9B814_n;
    int autoE2C9B814_i;
    const int auto89D0D402_n = 1;
    int auto89D0D402_i;
    int auto2B7316BD_n;
    int auto2B7316BD_i;
    int autoCE3D1229_n;
    int autoCE3D1229_i;
    int autoF0C636BE_n;
    int autoF0C636BE_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE2C9B814_n = lib1926661B_gf_DifficultyValueInteger(7, 20);
    for (autoE2C9B814_i = 1; autoE2C9B814_i <= autoE2C9B814_n; autoE2C9B814_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.5), c_timeGame);
    }
    for (auto89D0D402_i = 1; auto89D0D402_i <= auto89D0D402_n; auto89D0D402_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(6)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    auto2B7316BD_n = lib1926661B_gf_DifficultyValueInteger(8, 16);
    for (auto2B7316BD_i = 1; auto2B7316BD_i <= auto2B7316BD_n; auto2B7316BD_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.5), c_timeGame);
    }
    Wait(10.0, c_timeGame);
    autoCE3D1229_n = lib1926661B_gf_DifficultyValueInteger(8, 16);
    for (autoCE3D1229_i = 1; autoCE3D1229_i <= autoCE3D1229_n; autoCE3D1229_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.5), c_timeGame);
    }
    autoF0C636BE_n = lib1926661B_gf_DifficultyValueInteger(5, 16);
    for (autoF0C636BE_i = 1; autoF0C636BE_i <= autoF0C636BE_n; autoF0C636BE_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.7, 1.2), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSecondAttack5_Init () {
    gt_UPLHoldoutSecondAttack5 = TriggerCreate("gt_UPLHoldoutSecondAttack5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Second Attack 6
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSecondAttack6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto067AF021_n;
    int auto067AF021_i;
    int auto6949D722_n;
    int auto6949D722_i;
    int auto48A3FAC8_n;
    int auto48A3FAC8_i;
    int autoF2E8736D_n;
    int autoF2E8736D_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto067AF021_n = lib1926661B_gf_DifficultyValueInteger(9, 21);
    for (auto067AF021_i = 1; auto067AF021_i <= auto067AF021_n; auto067AF021_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.5), c_timeGame);
    }
    auto6949D722_n = lib1926661B_gf_DifficultyValueInteger(7, 16);
    for (auto6949D722_i = 1; auto6949D722_i <= auto6949D722_n; auto6949D722_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.2, 0.5), c_timeGame);
    }
    Wait(11.0, c_timeGame);
    auto48A3FAC8_n = lib1926661B_gf_DifficultyValueInteger(6, 16);
    for (auto48A3FAC8_i = 1; auto48A3FAC8_i <= auto48A3FAC8_n; auto48A3FAC8_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(283)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHunterKillerUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.4, 0.6), c_timeGame);
    }
    Wait(11.0, c_timeGame);
    autoF2E8736D_n = lib1926661B_gf_DifficultyValueInteger(8, 19);
    for (autoF2E8736D_i = 1; autoF2E8736D_i <= autoF2E8736D_n; autoF2E8736D_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(283)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHunterKillerUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.4, 0.6), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSecondAttack6_Init () {
    gt_UPLHoldoutSecondAttack6 = TriggerCreate("gt_UPLHoldoutSecondAttack6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Second Attack Ongoing 1
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSecondAttackOngoing1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoFEB4B415_n = 10;
    int autoFEB4B415_i;
    int auto267E87D7_n;
    int auto267E87D7_i;
    int auto357ED860_n;
    int auto357ED860_i;
    int autoCC616B6C_n;
    int autoCC616B6C_i;
    unitgroup auto0D1AF498_g;
    int auto0D1AF498_u;
    unit auto0D1AF498_var;
    unitgroup auto177BFB9B_g;
    int auto177BFB9B_u;
    unit auto177BFB9B_var;
    int auto651F573F_n;
    int auto651F573F_i;
    int auto69C7D792_n;
    int auto69C7D792_i;
    int autoFD7C9D96_n;
    int autoFD7C9D96_i;
    unitgroup auto4870419F_g;
    int auto4870419F_u;
    unit auto4870419F_var;
    int auto82FB2217_n;
    int auto82FB2217_i;
    unitgroup auto0438FF35_g;
    int auto0438FF35_u;
    unit auto0438FF35_var;
    int autoE836C325_n;
    int autoE836C325_i;
    int auto9FAF8FE6_n;
    int auto9FAF8FE6_i;
    int auto3B6A25EA_n;
    int auto3B6A25EA_i;
    const int autoD1084D86_n = 7;
    int autoD1084D86_i;
    const int auto456CC2F3_n = 2;
    int auto456CC2F3_i;
    int autoA1926A42_n;
    int autoA1926A42_i;
    int auto28E404D5_n;
    int auto28E404D5_i;
    int auto331A81C5_n;
    int auto331A81C5_i;
    const int autoD9F126F6_n = 3;
    int autoD9F126F6_i;
    int auto6B81B529_n;
    int auto6B81B529_i;
    int autoBCDBE118_n;
    int autoBCDBE118_i;
    int auto6DCCFFFC_n;
    int auto6DCCFFFC_i;
    int auto36A6642C_n;
    int auto36A6642C_i;
    int auto2B21248F_n;
    int auto2B21248F_i;
    int auto8BE0722B_n;
    int auto8BE0722B_i;
    const int autoD4EC332E_n = 12;
    int autoD4EC332E_i;

    // Conditions
    if (testConds) {
        if (!((gv_uPLHoldoutSectionRecurring == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoFEB4B415_i = 1; autoFEB4B415_i <= autoFEB4B415_n; autoFEB4B415_i += 1) {
        auto267E87D7_n = lib1926661B_gf_DifficultyValueInteger(4, 9);
        for (auto267E87D7_i = 1; auto267E87D7_i <= auto267E87D7_n; auto267E87D7_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        auto357ED860_n = lib1926661B_gf_DifficultyValueInteger(4, 9);
        for (auto357ED860_i = 1; auto357ED860_i <= auto357ED860_n; auto357ED860_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(6)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        autoCC616B6C_n = lib1926661B_gf_DifficultyValueInteger(4, 9);
        for (autoCC616B6C_i = 1; autoCC616B6C_i <= autoCC616B6C_n; autoCC616B6C_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OverlordTransport", 0, gv_pLAYER_15_ROACHES_HOSTILE, RegionRandomPoint(RegionFromId(5)));
        auto0D1AF498_g = UnitLastCreatedGroup();
        auto0D1AF498_u = UnitGroupCount(auto0D1AF498_g, c_unitCountAll);
        for (;; auto0D1AF498_u -= 1) {
            auto0D1AF498_var = UnitGroupUnitFromEnd(auto0D1AF498_g, auto0D1AF498_u);
            if (auto0D1AF498_var == null) { break; }
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        }
        UnitCargoCreate(UnitLastCreated(), "Zergling", 8);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "OverlordTransport", 0, gv_pLAYER_15_ROACHES_HOSTILE, RegionRandomPoint(RegionFromId(6)));
        auto177BFB9B_g = UnitLastCreatedGroup();
        auto177BFB9B_u = UnitGroupCount(auto177BFB9B_g, c_unitCountAll);
        for (;; auto177BFB9B_u -= 1) {
            auto177BFB9B_var = UnitGroupUnitFromEnd(auto177BFB9B_g, auto177BFB9B_u);
            if (auto177BFB9B_var == null) { break; }
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        }
        UnitCargoCreate(UnitLastCreated(), "Zergling", 8);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        auto651F573F_n = lib1926661B_gf_DifficultyValueInteger(0, 9);
        for (auto651F573F_i = 1; auto651F573F_i <= auto651F573F_n; auto651F573F_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "GuardianMP", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(6)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(10.0, 15.0), c_timeGame);
        auto69C7D792_n = lib1926661B_gf_DifficultyValueInteger(3, 9);
        for (auto69C7D792_i = 1; auto69C7D792_i <= auto69C7D792_n; auto69C7D792_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(4)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(7.0, 9.0), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(10.0, 15.0), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        autoFD7C9D96_n = lib1926661B_gf_DifficultyValueInteger(0, 9);
        for (autoFD7C9D96_i = 1; autoFD7C9D96_i <= autoFD7C9D96_n; autoFD7C9D96_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OverlordTransport", 0, gv_pLAYER_15_ROACHES_HOSTILE, RegionRandomPoint(RegionFromId(5)));
        auto4870419F_g = UnitLastCreatedGroup();
        auto4870419F_u = UnitGroupCount(auto4870419F_g, c_unitCountAll);
        for (;; auto4870419F_u -= 1) {
            auto4870419F_var = UnitGroupUnitFromEnd(auto4870419F_g, auto4870419F_u);
            if (auto4870419F_var == null) { break; }
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        }
        UnitCargoCreate(UnitLastCreated(), "Zergling", 8);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(17.0, 22.0), c_timeGame);
        auto82FB2217_n = lib1926661B_gf_DifficultyValueInteger(3, 9);
        for (auto82FB2217_i = 1; auto82FB2217_i <= auto82FB2217_n; auto82FB2217_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        Wait(RandomFixed(7.0, 9.0), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "OverlordTransport", 0, gv_pLAYER_15_ROACHES_HOSTILE, RegionRandomPoint(RegionFromId(4)));
        auto0438FF35_g = UnitLastCreatedGroup();
        auto0438FF35_u = UnitGroupCount(auto0438FF35_g, c_unitCountAll);
        for (;; auto0438FF35_u -= 1) {
            auto0438FF35_var = UnitGroupUnitFromEnd(auto0438FF35_g, auto0438FF35_u);
            if (auto0438FF35_var == null) { break; }
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        }
        UnitCargoCreate(UnitLastCreated(), "Roach", lib1926661B_gf_DifficultyValueInteger(2, 4));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "GuardianMP", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(6)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        autoE836C325_n = lib1926661B_gf_DifficultyValueInteger(3, 9);
        for (autoE836C325_i = 1; autoE836C325_i <= autoE836C325_n; autoE836C325_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        Wait(RandomFixed(41.0, 45.0), c_timeGame);
        auto9FAF8FE6_n = lib1926661B_gf_DifficultyValueInteger(4, 9);
        for (auto9FAF8FE6_i = 1; auto9FAF8FE6_i <= auto9FAF8FE6_n; auto9FAF8FE6_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        auto3B6A25EA_n = lib1926661B_gf_DifficultyValueInteger(4, 8);
        for (auto3B6A25EA_i = 1; auto3B6A25EA_i <= auto3B6A25EA_n; auto3B6A25EA_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        for (autoD1084D86_i = 1; autoD1084D86_i <= autoD1084D86_n; autoD1084D86_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        for (auto456CC2F3_i = 1; auto456CC2F3_i <= auto456CC2F3_n; auto456CC2F3_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(0.4, c_timeGame);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        autoA1926A42_n = lib1926661B_gf_DifficultyValueInteger(1, 4);
        for (autoA1926A42_i = 1; autoA1926A42_i <= autoA1926A42_n; autoA1926A42_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(5)));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
            Wait(0.6, c_timeGame);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        auto28E404D5_n = lib1926661B_gf_DifficultyValueInteger(5, 12);
        for (auto28E404D5_i = 1; auto28E404D5_i <= auto28E404D5_n; auto28E404D5_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        auto331A81C5_n = lib1926661B_gf_DifficultyValueInteger(0, 1);
        for (auto331A81C5_i = 1; auto331A81C5_i <= auto331A81C5_n; auto331A81C5_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(4)));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
            Wait(0.6, c_timeGame);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        for (autoD9F126F6_i = 1; autoD9F126F6_i <= autoD9F126F6_n; autoD9F126F6_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
            Wait(1.2, c_timeGame);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        auto6B81B529_n = lib1926661B_gf_DifficultyValueInteger(5, 12);
        for (auto6B81B529_i = 1; auto6B81B529_i <= auto6B81B529_n; auto6B81B529_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        autoBCDBE118_n = lib1926661B_gf_DifficultyValueInteger(5, 12);
        for (autoBCDBE118_i = 1; autoBCDBE118_i <= autoBCDBE118_n; autoBCDBE118_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        auto6DCCFFFC_n = lib1926661B_gf_DifficultyValueInteger(5, 12);
        for (auto6DCCFFFC_i = 1; auto6DCCFFFC_i <= auto6DCCFFFC_n; auto6DCCFFFC_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        auto36A6642C_n = lib1926661B_gf_DifficultyValueInteger(1, 3);
        for (auto36A6642C_i = 1; auto36A6642C_i <= auto36A6642C_n; auto36A6642C_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
            Wait(1.2, c_timeGame);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        auto2B21248F_n = lib1926661B_gf_DifficultyValueInteger(4, 12);
        for (auto2B21248F_i = 1; auto2B21248F_i <= auto2B21248F_n; auto2B21248F_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        auto8BE0722B_n = lib1926661B_gf_DifficultyValueInteger(4, 12);
        for (auto8BE0722B_i = 1; auto8BE0722B_i <= auto8BE0722B_n; auto8BE0722B_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(285)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        Wait(RandomInt(60, 79), c_timeGame);
        for (autoD4EC332E_i = 1; autoD4EC332E_i <= autoD4EC332E_n; autoD4EC332E_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(284)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSecondAttackOngoing1_Init () {
    gt_UPLHoldoutSecondAttackOngoing1 = TriggerCreate("gt_UPLHoldoutSecondAttackOngoing1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Second Attack Ongoing 2
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSecondAttackOngoing2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoAC51848D_n = 500;
    int autoAC51848D_i;
    int autoE7FB32BC_n;
    int autoE7FB32BC_i;
    int autoC9AD5C1E_n;
    int autoC9AD5C1E_i;
    int auto3A49EAE3_n;
    int auto3A49EAE3_i;
    unitgroup autoD89EDED7_g;
    int autoD89EDED7_u;
    unit autoD89EDED7_var;
    unitgroup auto8108C8E9_g;
    int auto8108C8E9_u;
    unit auto8108C8E9_var;
    int autoB625AAE5_n;
    int autoB625AAE5_i;
    int auto783E8220_n;
    int auto783E8220_i;
    int auto12CEC0FB_n;
    int auto12CEC0FB_i;
    unitgroup auto36FF3892_g;
    int auto36FF3892_u;
    unit auto36FF3892_var;
    int auto9496E85C_n;
    int auto9496E85C_i;
    unitgroup autoA4303D51_g;
    int autoA4303D51_u;
    unit autoA4303D51_var;
    int auto98FDAFB2_n;
    int auto98FDAFB2_i;

    // Conditions
    if (testConds) {
        if (!((gv_uPLHoldoutSectionRecurring == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoAC51848D_i = 1; autoAC51848D_i <= autoAC51848D_n; autoAC51848D_i += 1) {
        autoE7FB32BC_n = lib1926661B_gf_DifficultyValueInteger(3, 9);
        for (autoE7FB32BC_i = 1; autoE7FB32BC_i <= autoE7FB32BC_n; autoE7FB32BC_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        autoC9AD5C1E_n = lib1926661B_gf_DifficultyValueInteger(4, 9);
        for (autoC9AD5C1E_i = 1; autoC9AD5C1E_i <= autoC9AD5C1E_n; autoC9AD5C1E_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        auto3A49EAE3_n = lib1926661B_gf_DifficultyValueInteger(3, 9);
        for (auto3A49EAE3_i = 1; auto3A49EAE3_i <= auto3A49EAE3_n; auto3A49EAE3_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OverlordTransport", 0, gv_pLAYER_15_ROACHES_HOSTILE, RegionRandomPoint(RegionFromId(5)));
        autoD89EDED7_g = UnitLastCreatedGroup();
        autoD89EDED7_u = UnitGroupCount(autoD89EDED7_g, c_unitCountAll);
        for (;; autoD89EDED7_u -= 1) {
            autoD89EDED7_var = UnitGroupUnitFromEnd(autoD89EDED7_g, autoD89EDED7_u);
            if (autoD89EDED7_var == null) { break; }
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        }
        UnitCargoCreate(UnitLastCreated(), "Zergling", 8);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "OverlordTransport", 0, gv_pLAYER_15_ROACHES_HOSTILE, RegionRandomPoint(RegionFromId(6)));
        auto8108C8E9_g = UnitLastCreatedGroup();
        auto8108C8E9_u = UnitGroupCount(auto8108C8E9_g, c_unitCountAll);
        for (;; auto8108C8E9_u -= 1) {
            auto8108C8E9_var = UnitGroupUnitFromEnd(auto8108C8E9_g, auto8108C8E9_u);
            if (auto8108C8E9_var == null) { break; }
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        }
        UnitCargoCreate(UnitLastCreated(), "Zergling", 8);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        autoB625AAE5_n = lib1926661B_gf_DifficultyValueInteger(3, 9);
        for (autoB625AAE5_i = 1; autoB625AAE5_i <= autoB625AAE5_n; autoB625AAE5_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(10.0, 15.0), c_timeGame);
        auto783E8220_n = lib1926661B_gf_DifficultyValueInteger(3, 9);
        for (auto783E8220_i = 1; auto783E8220_i <= auto783E8220_n; auto783E8220_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(10.0, 15.0), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "RoachBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        auto12CEC0FB_n = lib1926661B_gf_DifficultyValueInteger(3, 9);
        for (auto12CEC0FB_i = 1; auto12CEC0FB_i <= auto12CEC0FB_n; auto12CEC0FB_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(lib1926661B_gf_DifficultyValueInteger(0, 1), "OverlordTransport", 0, gv_pLAYER_15_ROACHES_HOSTILE, RegionRandomPoint(RegionFromId(5)));
        auto36FF3892_g = UnitLastCreatedGroup();
        auto36FF3892_u = UnitGroupCount(auto36FF3892_g, c_unitCountAll);
        for (;; auto36FF3892_u -= 1) {
            auto36FF3892_var = UnitGroupUnitFromEnd(auto36FF3892_g, auto36FF3892_u);
            if (auto36FF3892_var == null) { break; }
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        }
        UnitCargoCreate(UnitLastCreated(), "Zergling", 8);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(17.0, 22.0), c_timeGame);
        auto9496E85C_n = lib1926661B_gf_DifficultyValueInteger(3, 9);
        for (auto9496E85C_i = 1; auto9496E85C_i <= auto9496E85C_n; auto9496E85C_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OverlordTransport", 0, gv_pLAYER_15_ROACHES_HOSTILE, RegionRandomPoint(RegionFromId(4)));
        autoA4303D51_g = UnitLastCreatedGroup();
        autoA4303D51_u = UnitGroupCount(autoA4303D51_g, c_unitCountAll);
        for (;; autoA4303D51_u -= 1) {
            autoA4303D51_var = UnitGroupUnitFromEnd(autoA4303D51_g, autoA4303D51_u);
            if (autoA4303D51_var == null) { break; }
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        }
        UnitCargoCreate(UnitLastCreated(), "Roach", 4);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(3.0, 4.5), c_timeGame);
        auto98FDAFB2_n = lib1926661B_gf_DifficultyValueInteger(2, 9);
        for (auto98FDAFB2_i = 1; auto98FDAFB2_i <= auto98FDAFB2_n; auto98FDAFB2_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(2)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(RandomFixed(1.2, 2.1), c_timeGame);
        }
        Wait(RandomFixed(41.0, 45.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSecondAttackOngoing2_Init () {
    gt_UPLHoldoutSecondAttackOngoing2 = TriggerCreate("gt_UPLHoldoutSecondAttackOngoing2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Section Roaches Attack
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSectionRoachesAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_UNKNOWNCREATURES))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSectionRoachesAttack_Init () {
    gt_UPLHoldoutSectionRoachesAttack = TriggerCreate("gt_UPLHoldoutSectionRoachesAttack_Func");
    TriggerAddEventUnitRegion(gt_UPLHoldoutSectionRoachesAttack, null, RegionFromId(287), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Peters Warning
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutPetersWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Overlord") || (UnitGetType(EventUnit()) == "OverlordTransport")))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2SergeantX8", -1), StringExternal("Param/Value/6BEFDF1F"), StringExternal("Param/Value/5698ED4D"), 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutPetersWarning_Init () {
    gt_UPLHoldoutPetersWarning = TriggerCreate("gt_UPLHoldoutPetersWarning_Func");
    TriggerAddEventUnitRegion(gt_UPLHoldoutPetersWarning, null, RegionFromId(287), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Section Start
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSectionStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEC051E43_g;
    int autoEC051E43_u;
    unit autoEC051E43_var;
    unitgroup auto8BB2CFC0_g;
    int auto8BB2CFC0_u;
    unit auto8BB2CFC0_var;
    unitgroup auto9E0DCFC0_g;
    int auto9E0DCFC0_u;
    unit auto9E0DCFC0_var;
    unitgroup autoF2A2B9D1_g;
    int autoF2A2B9D1_u;
    unit autoF2A2B9D1_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEC051E43_g = UnitGroup(null, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, RegionFromId(289), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEC051E43_u = UnitGroupCount(autoEC051E43_g, c_unitCountAll);
    for (;; autoEC051E43_u -= 1) {
        autoEC051E43_var = UnitGroupUnitFromEnd(autoEC051E43_g, autoEC051E43_u);
        if (autoEC051E43_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoEC051E43_var, false);
    }
    ObjectiveDestroy(gv_sewerSectionEscapeObjective);
    PlayerSetLighting(gv_pLAYER_01_USER, "MeinhoffCampaignNight", 0.0);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    CameraSetBounds(PlayerGroupAlliance(c_playerGroupEnemy, gv_pLAYER_01_USER), RegionEntireMap(), true);
    UISetMiniMapBounds(PlayerGroupAll(), RegionPlayableMap());
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    lib1926661B_gf_SetHeroPanelUnit(1, gv_mYRADAVIS);
    lib1926661B_gf_ShowHideHeroPanel(1, true);
    UnitSetPosition(gv_mYRADAVIS, PointFromId(471019321), false);
    UnitIssueOrder(gv_mYRADAVIS, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetState(UnitFromId(654454159), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(654454159), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(654454159), c_unitStateHighlightable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(654454159), true);
    UnitSetInfoTip(UnitFromId(1959), StringExternal("Param/Value/DF1D3ED5"));
    UnitSetPropertyFixed(UnitFromId(1959), c_unitPropLifeMax, 750.0);
    UnitSetPropertyFixed(UnitFromId(1959), c_unitPropLife, 750.0);
    UnitSetInfoTip(UnitFromId(599676176), StringExternal("Param/Value/C3DFAE2B"));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1959), false);
    libNtve_gf_MakeUnitUncommandable(gv_mYRADAVIS, false);
    libNtve_gf_ChangeUnitDamage(gv_mYRADAVIS, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_ShowHideUnit(UnitFromId(1959), true);
    auto8BB2CFC0_g = UnitGroup(null, 12, RegionFromId(281), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8BB2CFC0_u = UnitGroupCount(auto8BB2CFC0_g, c_unitCountAll);
    for (;; auto8BB2CFC0_u -= 1) {
        auto8BB2CFC0_var = UnitGroupUnitFromEnd(auto8BB2CFC0_g, auto8BB2CFC0_u);
        if (auto8BB2CFC0_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8BB2CFC0_var, true);
        UnitSetOwner(auto8BB2CFC0_var, gv_pLAYER_02_POLICE, true);
    }
    auto9E0DCFC0_g = UnitGroup(null, gv_pLAYER_00_NEUTRAL, RegionFromId(281), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9E0DCFC0_u = UnitGroupCount(auto9E0DCFC0_g, c_unitCountAll);
    for (;; auto9E0DCFC0_u -= 1) {
        auto9E0DCFC0_var = UnitGroupUnitFromEnd(auto9E0DCFC0_g, auto9E0DCFC0_u);
        if (auto9E0DCFC0_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9E0DCFC0_var, true);
    }
    autoF2A2B9D1_g = UnitGroup("InfantryMortar", gv_pLAYER_02_POLICE, RegionFromId(281), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF2A2B9D1_u = UnitGroupCount(autoF2A2B9D1_g, c_unitCountAll);
    for (;; autoF2A2B9D1_u -= 1) {
        autoF2A2B9D1_var = UnitGroupUnitFromEnd(autoF2A2B9D1_g, autoF2A2B9D1_u);
        if (autoF2A2B9D1_var == null) { break; }
        UnitIssueOrder(autoF2A2B9D1_var, Order(AbilityCommand("InfantryMortarModeSiege", 0)), c_orderQueueReplace);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1075621625), 0.0, -1, 10.0, true);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundPlayForPlayer(SoundLink("M2DistantDogsBarking", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
    lib1926661B_gf_CreateObjectivePing(true, PointFromId(84866512), StringExternal("Param/Value/8D7EAD38"));
    gv_uPLHoldoutPing = PingLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/66CBFA4A"), StringExternal("Param/Value/A5F8789A"), c_objectiveStateActive, true);
    gv_uPLHoldoutInitialObjective = ObjectiveLastCreated();
    ObjectiveShow(gv_uPLHoldoutInitialObjective, PlayerGroupAll(), true);
    lib1926661B_gf_FlashCheckpointReminder();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSectionStart_Init () {
    gt_UPLHoldoutSectionStart = TriggerCreate("gt_UPLHoldoutSectionStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Arrive At Outpost 497
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutArriveAtOutpost497_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_uPLHoldoutInitialObjective, c_objectiveStateCompleted);
    gv_peters = UnitFromId(582511685);
    libNtve_gf_RescueUnit(gv_peters, gv_pLAYER_01_USER, true);
    Wait(0.5, c_timeGame);
    lib1926661B_gf_SetHeroPanelUnit(2, gv_peters);
    lib1926661B_gf_ShowHideHeroPanel(2, true);
    ObjectiveDestroy(gv_dabisLivesObjective);
    ObjectiveCreate(StringExternal("Param/Value/CD31332D"), StringToText(""), c_objectiveStateActive, true);
    gv_uPLHoldoutDavisandPetersSurvive = ObjectiveLastCreated();
    ObjectiveShow(gv_uPLHoldoutDavisandPetersSurvive, PlayerGroupAll(), true);
    ObjectiveSetLast(gv_uPLHoldoutDavisandPetersSurvive);
    PingDestroy(gv_uPLHoldoutPing);
    RegionPlayableMapSet(RegionFromId(281));
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    CameraSetBounds(PlayerGroupAlliance(c_playerGroupEnemy, gv_pLAYER_01_USER), RegionEntireMap(), true);
    UISetMiniMapBounds(PlayerGroupAll(), RegionPlayableMap());
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B900B4C4"));
    ObjectiveCreate(StringExternal("Param/Value/D23C8105"), StringExternal("Param/Value/82F20FEA"), c_objectiveStateActive, true);
    gv_uPLHoldoutSectionHoldtheLine = ObjectiveLastCreated();
    ObjectiveShow(gv_uPLHoldoutSectionHoldtheLine, PlayerGroupAll(), true);
    ObjectiveCreate(StringExternal("Param/Value/79AAEFEC"), StringExternal("Param/Value/FFCB057D"), c_objectiveStateActive, true);
    gv_uPLHoldoutProtectHQ = ObjectiveLastCreated();
    ObjectiveShow(gv_uPLHoldoutProtectHQ, PlayerGroupAll(), true);
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_UPLHoldoutZergAttackAfterUnburrow, true);
    TriggerExecute(gt_UPLHoldoutFirstAttack1, true, false);
    TriggerExecute(gt_UPLHoldoutSectionTechnology, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2SergeantX1", -1), StringExternal("Param/Value/28701391"), StringExternal("Param/Value/84E994FD"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    Wait(0.25, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2SergeantX4", -1), StringExternal("Param/Value/D6DFB504"), StringExternal("Param/Value/DFFDC329"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2SergeantX2", -1), StringExternal("Param/Value/1DA27256"), StringExternal("Param/Value/D0E79EC4"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    Wait(0.25, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2SergeantX3", -1), StringExternal("Param/Value/63EC626E"), StringExternal("Param/Value/2395A9DF"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_UPLHoldoutOwnershipTransition, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutArriveAtOutpost497_Init () {
    gt_UPLHoldoutArriveAtOutpost497 = TriggerCreate("gt_UPLHoldoutArriveAtOutpost497_Func");
    TriggerAddEventUnitRegion(gt_UPLHoldoutArriveAtOutpost497, null, RegionFromId(281), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Section Technology
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutSectionTechnology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitAllow(gv_pLAYER_01_USER, "Z1", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryRocket", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryMortar", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryFlamethrower", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryRifle", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryHeavy", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "MiningDrone", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLRnDFacility", false);
    UnitAbilityRemove(UnitFromId(1718444733), "CARRIllumination");
    PlayerSetAlliance(gv_pLAYER_02_POLICE, c_allianceIdPushable, gv_pLAYER_01_USER, true);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLHeadquarters", true);
    TechTreeUnitHelp(1, "UPLHeadquarters", true);
    TechTreeUnitHelp(1, "UPLGenerator", true);
    TechTreeUnitHelp(1, "UPLBillet", true);
    TechTreeUnitHelp(1, "InfantryMortar", true);
    TechTreeUnitHelp(1, "CARR", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutSectionTechnology_Init () {
    gt_UPLHoldoutSectionTechnology = TriggerCreate("gt_UPLHoldoutSectionTechnology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Ownership Transition
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutOwnershipTransition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE9735905_g;
    int autoE9735905_u;
    unit autoE9735905_var;
    const int autoFBAE970C_n = 1;
    int autoFBAE970C_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(UnitFromId(1959), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Sergeant15", -1), StringExternal("Param/Value/18E6F780"), StringExternal("Param/Value/ACFBBE4B"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    ActorCreate(ActorScopeFromUnit(gv_mYRADAVIS), "TalkIcon", null, null, null);
    gf_SendTransmissionFromUnitCombat(gv_mYRADAVIS, SoundLink("M2Davis59", -1), StringExternal("Param/Value/9370AD92"), false);
    gv_cARR = UnitFromId(1718444733);
    Wait(0.5, c_timeGame);
    libNtve_gf_RescueUnit(gv_cARR, gv_pLAYER_01_USER, true);
    lib1926661B_gf_SetHeroPanelUnit(3, gv_cARR);
    lib1926661B_gf_ShowHideHeroPanel(3, true);
    autoE9735905_g = UnitGroup(null, gv_pLAYER_02_POLICE, RegionFromId(281), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE9735905_u = UnitGroupCount(autoE9735905_g, c_unitCountAll);
    for (;; autoE9735905_u -= 1) {
        autoE9735905_var = UnitGroupUnitFromEnd(autoE9735905_g, autoE9735905_u);
        if (autoE9735905_var == null) { break; }
        if ((UnitGetType(autoE9735905_var) == "InfantryMortar")) {
            libNtve_gf_RescueUnit(autoE9735905_var, gv_pLAYER_01_USER, false);
            UnitSetTeamColorIndex(autoE9735905_var, 0);
        }
        else {
            libNtve_gf_RescueUnit(autoE9735905_var, gv_pLAYER_01_USER, false);
        }
        Wait(0.2, c_timeGame);
    }
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperAdd, 600);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperAdd, 500);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeMinerals, true);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/43C51EAE"));
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_UPLHoldoutFirstAttack2, true, false);
    Wait(74.0, c_timeGame);
    for (autoFBAE970C_i = 1; autoFBAE970C_i <= autoFBAE970C_n; autoFBAE970C_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(5)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(287))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 6.5), c_timeGame);
    }
    TriggerExecute(gt_UPLHoldoutAerialUnits, true, false);
    Wait(100.0, c_timeGame);
    TriggerExecute(gt_UPLHoldoutFirstAttack1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutOwnershipTransition_Init () {
    gt_UPLHoldoutOwnershipTransition = TriggerCreate("gt_UPLHoldoutOwnershipTransition_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Mining Tutorial
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutMiningTutorial_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_uPLHoldoutSectionRoachGroup, c_unitCountAlive) < 3))) {
            return false;
        }

        if (!((gv_uPLHoldoutSectionActive == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    TriggerStop(gt_UPLHoldoutFirstAttack1);
    TriggerStop(gt_UPLHoldoutFirstAttack2);
    TriggerStop(gt_UPLHoldoutOwnershipTransition);
    TriggerEnable(gt_UPLHoldoutFirstAttack1, false);
    TriggerEnable(gt_UPLHoldoutFirstAttack2, false);
    TriggerEnable(gt_UPLHoldoutOwnershipTransition, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("UPLGeneratorPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2DefNet1", -1), StringExternal("Param/Value/A58C0D7A"), StringExternal("Param/Value/172FD4B6"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("UPLGeneratorPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2DefNet2", -1), StringExternal("Param/Value/C8BD0629"), StringExternal("Param/Value/C6A9AF0B"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("UPLGeneratorPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2DefNet3", -1), StringExternal("Param/Value/A6517ECC"), StringExternal("Param/Value/0FEA08CE"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerExecute(gt_TipHeadquarters, true, false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "MiningDrone", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "MiningDrone", true);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2010D7B6"));
    ObjectiveCreate(StringExternal("Param/Value/CA1DD642"), StringToText(""), c_objectiveStateActive, true);
    gv_uPLHoldoutSectionBuildAMiningDrone = ObjectiveLastCreated();
    ObjectiveShow(gv_uPLHoldoutSectionBuildAMiningDrone, PlayerGroupAll(), true);
    Wait(150.0, c_timeGame);
    TriggerDestroy(gt_UPLMortarTrooperComplete);
    TriggerExecute(gt_UPLMortarTrooperCompleteAlternate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutMiningTutorial_Init () {
    gt_UPLHoldoutMiningTutorial = TriggerCreate("gt_UPLHoldoutMiningTutorial_Func");
    TriggerAddEventUnitDied(gt_UPLHoldoutMiningTutorial, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Mining Drone Complete
//--------------------------------------------------------------------------------------------------
bool gt_UPLMiningDroneComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MiningDrone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "MiningDrone", false);
    ObjectiveDestroy(gv_uPLHoldoutInitialObjective);
    ObjectiveSetState(gv_uPLHoldoutSectionBuildAMiningDrone, c_objectiveStateCompleted);
    TriggerExecute(gt_TipMiningDrone, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("UPLGeneratorPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2DefNet4", -1), StringExternal("Param/Value/9129DE92"), StringExternal("Param/Value/44FEDD72"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("UPLGeneratorPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2DefNet5", -1), StringExternal("Param/Value/4BA4C597"), StringExternal("Param/Value/AA2D02B9"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "InfantryMortar", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "InfantryMortar", true);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "UPLBillet", true);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9A459433"));
    ObjectiveCreate(StringExternal("Param/Value/671B0EE5"), StringExternal("Param/Value/124E961E"), c_objectiveStateActive, true);
    gv_uPLHoldoutSectionBuildAMortarUnit = ObjectiveLastCreated();
    ObjectiveShow(gv_uPLHoldoutSectionBuildAMortarUnit, PlayerGroupAll(), true);
    TriggerEnable(gt_UPLMortarTrooperComplete, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLMiningDroneComplete_Init () {
    gt_UPLMiningDroneComplete = TriggerCreate("gt_UPLMiningDroneComplete_Func");
    TriggerAddEventUnitRegion(gt_UPLMiningDroneComplete, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Mortar Trooper Complete
//--------------------------------------------------------------------------------------------------
bool gt_UPLMortarTrooperComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_uPLHoldoutSectionActive == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "InfantryMortar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDestroy(gt_UPLMortarTrooperCompleteAlternate);
    ObjectiveDestroy(gv_uPLHoldoutSectionBuildAMiningDrone);
    ObjectiveSetState(gv_uPLHoldoutSectionBuildAMortarUnit, c_objectiveStateCompleted);
    gf_UPLMortarTrooperCompleteActions();
    Wait(RandomInt(165, 182), c_timeGame);
    gv_uPLHoldoutSectionRecurring = 1;
    TriggerExecute(gt_UPLHoldoutSecondAttackOngoing1, true, false);
    TriggerExecute(gt_UPLHoldoutSecondAttackOngoing2, true, false);
    Wait(RandomInt(195, 222), c_timeGame);
    TriggerExecute(gt_UPLHoldoutSecondAttack2, true, false);
    Wait(RandomInt(226, 242), c_timeGame);
    TriggerExecute(gt_UPLHoldoutSecondAttack2, true, false);
    Wait(RandomInt(226, 242), c_timeGame);
    TriggerExecute(gt_UPLHoldoutSecondAttack3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLMortarTrooperComplete_Init () {
    gt_UPLMortarTrooperComplete = TriggerCreate("gt_UPLMortarTrooperComplete_Func");
    TriggerEnable(gt_UPLMortarTrooperComplete, false);
    TriggerAddEventUnitRegion(gt_UPLMortarTrooperComplete, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Mortar Trooper Complete Alternate
//--------------------------------------------------------------------------------------------------
bool gt_UPLMortarTrooperCompleteAlternate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDestroy(gt_UPLMortarTrooperComplete);
    TriggerDestroy(gt_UPLHoldoutMiningTutorial);
    ObjectiveDestroy(gv_uPLHoldoutSectionBuildAMiningDrone);
    ObjectiveSetState(gv_uPLHoldoutSectionBuildAMortarUnit, c_objectiveStateFailed);
    gf_UPLMortarTrooperCompleteActions();
    Wait(RandomInt(38, 52), c_timeGame);
    gv_uPLHoldoutSectionRecurring = 1;
    TriggerExecute(gt_UPLHoldoutSecondAttackOngoing1, true, false);
    TriggerExecute(gt_UPLHoldoutSecondAttackOngoing2, true, false);
    Wait(RandomInt(195, 222), c_timeGame);
    TriggerExecute(gt_UPLHoldoutSecondAttack2, true, false);
    Wait(RandomInt(226, 242), c_timeGame);
    TriggerExecute(gt_UPLHoldoutSecondAttack2, true, false);
    Wait(RandomInt(226, 242), c_timeGame);
    TriggerExecute(gt_UPLHoldoutSecondAttack3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLMortarTrooperCompleteAlternate_Init () {
    gt_UPLMortarTrooperCompleteAlternate = TriggerCreate("gt_UPLMortarTrooperCompleteAlternate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Aerial Units
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutAerialUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("M2MutaScream", -1), c_maxPlayers, PlayerGroupAll(), 65.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B0B30BCF"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutAerialUnits_Init () {
    gt_UPLHoldoutAerialUnits = TriggerCreate("gt_UPLHoldoutAerialUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout 75 Supply
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldout75Supply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) > 74))) {
            return false;
        }

        if (!((gv_uPLHoldoutSectionActive == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveDestroy(gv_uPLHoldoutSectionBuildAMortarUnit);
    ObjectiveSetState(gv_uPLHoldoutSectionBuild75, c_objectiveStateCompleted);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Sergeant16", -1), StringExternal("Param/Value/7D2426E6"), StringExternal("Param/Value/4D05D670"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    Wait(5.0, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Sergeant17", -1), StringExternal("Param/Value/7C18CCF3"), StringExternal("Param/Value/B4A5EDFE"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    gf_SendTransmissionFromUnitCombat(gv_mYRADAVIS, SoundLink("M2Davis60", -1), StringExternal("Param/Value/C35C2673"), false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2SergeantX9", -1), StringExternal("Param/Value/EAE2C5C3"), StringExternal("Param/Value/B9233ED5"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    TimerStart(gv_uPLHoldoutTimer, 158.0, false, c_timeGame);
    gv_uPLHoldoutTimer = TimerLastStarted();
    lib1926661B_gf_CreateTimerWindowLotC(TimerLastStarted(), StringExternal("Param/Value/3388BEA2"), true, false, 1);
    TriggerStop(gt_UPLHoldoutFirstAttack1);
    TriggerStop(gt_UPLHoldoutFirstAttack2);
    TriggerStop(gt_UPLHoldoutFirstAttack3);
    TriggerStop(gt_UPLHoldoutSecondAttack1);
    TriggerStop(gt_UPLHoldoutSecondAttack2);
    TriggerStop(gt_UPLHoldoutSecondAttack3);
    TriggerStop(gt_UPLHoldoutSecondAttack4);
    TriggerStop(gt_UPLHoldoutSecondAttack5);
    TriggerStop(gt_UPLHoldoutSecondAttack6);
    TriggerStop(gt_UPLHoldoutSecondAttackOngoing1);
    TriggerEnable(gt_UPLHoldoutTimerExpires, true);
    TriggerEnable(gt_UPLHoldout75Supply, false);
    lib1926661B_gf_FlashCheckpointReminder();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldout75Supply_Init () {
    gt_UPLHoldout75Supply = TriggerCreate("gt_UPLHoldout75Supply_Func");
    TriggerEnable(gt_UPLHoldout75Supply, false);
    TriggerAddEventTimePeriodic(gt_UPLHoldout75Supply, 0.3, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UPL Holdout Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_UPLHoldoutTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_uPLHoldoutTimer) > 156.0))) {
            return false;
        }

        if (!((gv_uPLHoldoutSectionActive == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8D3FE2D9"));
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_HoldoutCinematicSetup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UPLHoldoutTimerExpires_Init () {
    gt_UPLHoldoutTimerExpires = TriggerCreate("gt_UPLHoldoutTimerExpires_Func");
    TriggerEnable(gt_UPLHoldoutTimerExpires, false);
    TriggerAddEventTimePeriodic(gt_UPLHoldoutTimerExpires, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Nydus 1
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseNydus1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localNydusWorm;

    // Automatic Variable Declarations
    const int auto89D4561A_n = 3;
    int auto89D4561A_i;
    const int auto18C17FCB_n = 4;
    int auto18C17FCB_i;
    const int auto0706769A_n = 2;
    int auto0706769A_i;
    const int auto471ED02F_n = 3;
    int auto471ED02F_i;
    const int auto80FB067F_n = 3;
    int auto80FB067F_i;
    const int auto471C1022_n = 6;
    int auto471C1022_i;
    const int autoB8B9172C_n = 3;
    int autoB8B9172C_i;
    const int autoADDBF4E9_n = 1;
    int autoADDBF4E9_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gf_DifficultyValueBoolean(false, true) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/7C7C2F10"));
    MinimapPing(PlayerGroupAll(), PointFromId(1563201102), 15.0, Color(100.00, 0.00, 0.00));
    CameraShake(gv_pLAYER_01_USER, "Medium", "Tremor", 0.5, 1.0, 4.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1563201102));
    lv_localNydusWorm = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("M2NydusWorm1", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.7, c_timeReal);
    for (auto89D4561A_i = 1; auto89D4561A_i <= auto89D4561A_n; auto89D4561A_i += 1) {
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto18C17FCB_i = 1; auto18C17FCB_i <= auto18C17FCB_n; auto18C17FCB_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(0.4, c_timeGame);
            }
        }
        else {
            libVCUI_gf_HideCampaignDirective();
        }
        Wait(2.0, c_timeGame);
        libVCUI_gf_HideCampaignDirective();
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto0706769A_i = 1; auto0706769A_i <= auto0706769A_n; auto0706769A_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto471ED02F_i = 1; auto471ED02F_i <= auto471ED02F_n; auto471ED02F_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
            Wait(2.0, c_timeGame);
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto80FB067F_i = 1; auto80FB067F_i <= auto80FB067F_n; auto80FB067F_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
            Wait(2.0, c_timeGame);
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto471C1022_i = 1; auto471C1022_i <= auto471C1022_n; auto471C1022_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(0.4, c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (autoB8B9172C_i = 1; autoB8B9172C_i <= autoB8B9172C_n; autoB8B9172C_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (autoADDBF4E9_i = 1; autoADDBF4E9_i <= autoADDBF4E9_n; autoADDBF4E9_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseNydus1_Init () {
    gt_TowerDefenseNydus1 = TriggerCreate("gt_TowerDefenseNydus1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Nydus 2
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseNydus2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localNydusWorm;

    // Automatic Variable Declarations
    int auto79704EFD_n;
    int auto79704EFD_i;
    const int auto7EFB42E8_n = 4;
    int auto7EFB42E8_i;
    const int autoA996F6B4_n = 2;
    int autoA996F6B4_i;
    int autoDA17AB9A_n;
    int autoDA17AB9A_i;
    int auto9F426BDC_n;
    int auto9F426BDC_i;
    const int auto0DA8F706_n = 6;
    int auto0DA8F706_i;
    int auto80EF2AAA_n;
    int auto80EF2AAA_i;
    const int auto9BCFD4DD_n = 1;
    int auto9BCFD4DD_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/75457EAE"));
    MinimapPing(PlayerGroupAll(), PointFromId(1638198476), 15.0, Color(100.00, 0.00, 0.00));
    CameraShake(gv_pLAYER_01_USER, "Medium", "Tremor", 0.5, 1.0, 4.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1638198476));
    lv_localNydusWorm = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("M2NydusWorm2", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.7, c_timeReal);
    auto79704EFD_n = lib1926661B_gf_DifficultyValueInteger(1, 3);
    for (auto79704EFD_i = 1; auto79704EFD_i <= auto79704EFD_n; auto79704EFD_i += 1) {
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto7EFB42E8_i = 1; auto7EFB42E8_i <= auto7EFB42E8_n; auto7EFB42E8_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(0.4, c_timeGame);
            }
        }
        else {
            libVCUI_gf_HideCampaignDirective();
        }
        Wait(2.0, c_timeGame);
        libVCUI_gf_HideCampaignDirective();
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (autoA996F6B4_i = 1; autoA996F6B4_i <= autoA996F6B4_n; autoA996F6B4_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            autoDA17AB9A_n = lib1926661B_gf_DifficultyValueInteger(1, 3);
            for (autoDA17AB9A_i = 1; autoDA17AB9A_i <= autoDA17AB9A_n; autoDA17AB9A_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
            Wait(2.0, c_timeGame);
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            auto9F426BDC_n = lib1926661B_gf_DifficultyValueInteger(2, 3);
            for (auto9F426BDC_i = 1; auto9F426BDC_i <= auto9F426BDC_n; auto9F426BDC_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
            Wait(2.0, c_timeGame);
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto0DA8F706_i = 1; auto0DA8F706_i <= auto0DA8F706_n; auto0DA8F706_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(0.4, c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            auto80EF2AAA_n = lib1926661B_gf_DifficultyValueInteger(1, 3);
            for (auto80EF2AAA_i = 1; auto80EF2AAA_i <= auto80EF2AAA_n; auto80EF2AAA_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto9BCFD4DD_i = 1; auto9BCFD4DD_i <= auto9BCFD4DD_n; auto9BCFD4DD_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseNydus2_Init () {
    gt_TowerDefenseNydus2 = TriggerCreate("gt_TowerDefenseNydus2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Nydus 3
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseNydus3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localNydusWorm;

    // Automatic Variable Declarations
    unitgroup autoDD33FE84_g;
    int autoDD33FE84_u;
    unit autoDD33FE84_var;
    const int autoF3283F7C_n = 3;
    int autoF3283F7C_i;
    const int autoF76D5CC0_n = 4;
    int autoF76D5CC0_i;
    const int auto20CC2131_n = 2;
    int auto20CC2131_i;
    const int autoF9A59BDA_n = 3;
    int autoF9A59BDA_i;
    const int auto4B90684A_n = 3;
    int auto4B90684A_i;
    const int autoE548C96F_n = 6;
    int autoE548C96F_i;
    const int auto5B659FE0_n = 3;
    int auto5B659FE0_i;
    const int auto9D1BABEF_n = 1;
    int auto9D1BABEF_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1926661B_gf_DifficultyValueBoolean(false, true) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/0C3A1174"));
    MinimapPing(PlayerGroupAll(), PointFromId(87027837), 15.0, Color(100.00, 0.00, 0.00));
    CameraShake(gv_pLAYER_01_USER, "Medium", "Tremor", 0.5, 1.0, 4.0);
    autoDD33FE84_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(28), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDD33FE84_u = UnitGroupCount(autoDD33FE84_g, c_unitCountAll);
    for (;; autoDD33FE84_u -= 1) {
        autoDD33FE84_var = UnitGroupUnitFromEnd(autoDD33FE84_g, autoDD33FE84_u);
        if (autoDD33FE84_var == null) { break; }
        UnitKill(autoDD33FE84_var);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(87027837));
    lv_localNydusWorm = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("M2NydusWorm2", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.7, c_timeReal);
    for (autoF3283F7C_i = 1; autoF3283F7C_i <= autoF3283F7C_n; autoF3283F7C_i += 1) {
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (autoF76D5CC0_i = 1; autoF76D5CC0_i <= autoF76D5CC0_n; autoF76D5CC0_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(0.4, c_timeGame);
            }
        }
        else {
            libVCUI_gf_HideCampaignDirective();
        }
        Wait(2.0, c_timeGame);
        libVCUI_gf_HideCampaignDirective();
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto20CC2131_i = 1; auto20CC2131_i <= auto20CC2131_n; auto20CC2131_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (autoF9A59BDA_i = 1; autoF9A59BDA_i <= autoF9A59BDA_n; autoF9A59BDA_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
            Wait(2.0, c_timeGame);
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto4B90684A_i = 1; auto4B90684A_i <= auto4B90684A_n; auto4B90684A_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
            Wait(2.0, c_timeGame);
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (autoE548C96F_i = 1; autoE548C96F_i <= autoE548C96F_n; autoE548C96F_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(0.4, c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto5B659FE0_i = 1; auto5B659FE0_i <= auto5B659FE0_n; auto5B659FE0_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto9D1BABEF_i = 1; auto9D1BABEF_i <= auto9D1BABEF_n; auto9D1BABEF_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseNydus3_Init () {
    gt_TowerDefenseNydus3 = TriggerCreate("gt_TowerDefenseNydus3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Nydus 4
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseNydus4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localNydusWorm;

    // Automatic Variable Declarations
    unitgroup autoE83B2CC1_g;
    int autoE83B2CC1_u;
    unit autoE83B2CC1_var;
    int auto7599CC4F_n;
    int auto7599CC4F_i;
    const int auto7F774F34_n = 4;
    int auto7F774F34_i;
    const int auto65EB98ED_n = 2;
    int auto65EB98ED_i;
    int autoA3B1630E_n;
    int autoA3B1630E_i;
    int autoF734819B_n;
    int autoF734819B_i;
    const int autoA22B9AB3_n = 6;
    int autoA22B9AB3_i;
    int auto8BA5AF3B_n;
    int auto8BA5AF3B_i;
    const int auto4EDE8F73_n = 1;
    int auto4EDE8F73_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), PointFromId(1364448043), 15.0, Color(100.00, 0.00, 0.00));
    CameraShake(gv_pLAYER_01_USER, "Medium", "Tremor", 0.5, 1.0, 4.0);
    autoE83B2CC1_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(29), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE83B2CC1_u = UnitGroupCount(autoE83B2CC1_g, c_unitCountAll);
    for (;; autoE83B2CC1_u -= 1) {
        autoE83B2CC1_var = UnitGroupUnitFromEnd(autoE83B2CC1_g, autoE83B2CC1_u);
        if (autoE83B2CC1_var == null) { break; }
        UnitKill(autoE83B2CC1_var);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1364448043));
    lv_localNydusWorm = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("M2NydusWorm1", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.7, c_timeReal);
    auto7599CC4F_n = lib1926661B_gf_DifficultyValueInteger(1, 3);
    for (auto7599CC4F_i = 1; auto7599CC4F_i <= auto7599CC4F_n; auto7599CC4F_i += 1) {
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto7F774F34_i = 1; auto7F774F34_i <= auto7F774F34_n; auto7F774F34_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(0.4, c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto65EB98ED_i = 1; auto65EB98ED_i <= auto65EB98ED_n; auto65EB98ED_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            autoA3B1630E_n = lib1926661B_gf_DifficultyValueInteger(1, 3);
            for (autoA3B1630E_i = 1; autoA3B1630E_i <= autoA3B1630E_n; autoA3B1630E_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
            Wait(2.0, c_timeGame);
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            autoF734819B_n = lib1926661B_gf_DifficultyValueInteger(1, 3);
            for (autoF734819B_i = 1; autoF734819B_i <= autoF734819B_n; autoF734819B_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
            Wait(2.0, c_timeGame);
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (autoA22B9AB3_i = 1; autoA22B9AB3_i <= autoA22B9AB3_n; autoA22B9AB3_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(0.4, c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            auto8BA5AF3B_n = lib1926661B_gf_DifficultyValueInteger(1, 3);
            for (auto8BA5AF3B_i = 1; auto8BA5AF3B_i <= auto8BA5AF3B_n; auto8BA5AF3B_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_localNydusWorm) == true)) {
            for (auto4EDE8F73_i = 1; auto4EDE8F73_i <= auto4EDE8F73_n; auto4EDE8F73_i += 1) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localNydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Roach", c_unitCreateIgnorePlacement, gv_pLAYER_04_UNKNOWNCREATURES, UnitGetPosition(lv_localNydusWorm));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
                Wait(RandomFixed(0.8, 1.4), c_timeGame);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseNydus4_Init () {
    gt_TowerDefenseNydus4 = TriggerCreate("gt_TowerDefenseNydus4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Reticle Dies 1
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseReticleDies1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_towerDefenseActor1);
    TextTagDestroy(gv_towerDefenseTextTagPlacement1);
    PingDestroy(gv_towerDefensePing1);
    TextTagDestroy(gv_towerDefenseTextTagArrow1);
    UnitKill(UnitFromId(724706924));
    UnitKill(UnitFromId(524177549));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseReticleDies1_Init () {
    gt_TowerDefenseReticleDies1 = TriggerCreate("gt_TowerDefenseReticleDies1_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseReticleDies1, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Reticle Dies 2
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseReticleDies2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_towerDefenseActor2);
    TextTagDestroy(gv_towerDefenseTextTagPlacement2);
    PingDestroy(gv_towerDefensePing2);
    TextTagDestroy(gv_towerDefenseTextTagArrow1);
    UnitKill(UnitFromId(724706924));
    UnitKill(UnitFromId(411485593));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseReticleDies2_Init () {
    gt_TowerDefenseReticleDies2 = TriggerCreate("gt_TowerDefenseReticleDies2_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseReticleDies2, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Reticle Dies 3
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseReticleDies3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_towerDefenseActor3);
    TextTagDestroy(gv_towerDefenseTextTagPlacement3);
    PingDestroy(gv_towerDefensePing3);
    TextTagDestroy(gv_towerDefenseTextTagArrow2);
    UnitKill(UnitFromId(1625186644));
    UnitKill(UnitFromId(1397134560));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseReticleDies3_Init () {
    gt_TowerDefenseReticleDies3 = TriggerCreate("gt_TowerDefenseReticleDies3_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseReticleDies3, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Reticle Dies 4
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseReticleDies4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_towerDefenseActor4);
    TextTagDestroy(gv_towerDefenseTextTagPlacement4);
    PingDestroy(gv_towerDefensePing4);
    TextTagDestroy(gv_towerDefenseTextTagArrow2);
    UnitKill(UnitFromId(1625186644));
    UnitKill(UnitFromId(169635545));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseReticleDies4_Init () {
    gt_TowerDefenseReticleDies4 = TriggerCreate("gt_TowerDefenseReticleDies4_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseReticleDies4, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer A
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4FF9EC6F_g;
    int auto4FF9EC6F_u;
    unit auto4FF9EC6F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseTunnelTimerActive = 1;
    TimerStart(gv_towerDefenseTunnelTimer, 242.0, false, c_timeGame);
    gv_towerDefenseTunnelTimer = TimerLastStarted();
    lib1926661B_gf_CreateTimerWindowLotC(TimerLastStarted(), StringExternal("Param/Value/6979E0CB"), true, false, 1);
    Wait(0.5, c_timeGame);
    TriggerEnable(gt_TowerDefenseTimerAExpires, true);
    TriggerExecute(gt_TipTunnelSystem, true, false);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4032FCC4"));
    auto4FF9EC6F_g = UnitGroup("GuideArrowUnit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4FF9EC6F_u = UnitGroupCount(auto4FF9EC6F_g, c_unitCountAll);
    for (;; auto4FF9EC6F_u -= 1) {
        auto4FF9EC6F_var = UnitGroupUnitFromEnd(auto4FF9EC6F_g, auto4FF9EC6F_u);
        if (auto4FF9EC6F_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4FF9EC6F_var, true);
    }
    TextTagCreate(StringExternal("Param/Value/C831E857"), 24, libNtve_gf_PointFacingAngle(PointFromId(1236148399), 270.0), 1.0, true, false, PlayerGroupAll());
    gv_towerDefenseTextTagArrow1 = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/476E938E"), 24, libNtve_gf_PointFacingAngle(PointFromId(2011990434), 270.0), 1.0, true, false, PlayerGroupAll());
    gv_towerDefenseTextTagArrow2 = TextTagLastCreated();
    lib1926661B_gf_CreateReticleEffectAndTextTagAtPoint(lib1926661B_ge_CampaginReticleType_TerranMainObjective, lib1926661B_ge_CampaginReticleSize_Large, StringExternal("Param/Value/5739DBC1"), PointFromId(1650173755));
    gv_towerDefenseTextTagPlacement1 = TextTagLastCreated();
    gv_towerDefenseActor1 = libNtve_gf_ActorLastCreated();
    lib1926661B_gf_CreateReticleEffectAndTextTagAtPoint(lib1926661B_ge_CampaginReticleType_TerranMainObjective, lib1926661B_ge_CampaginReticleSize_Large, StringExternal("Param/Value/8F5153CF"), PointFromId(1025567688));
    gv_towerDefenseTextTagPlacement2 = TextTagLastCreated();
    gv_towerDefenseActor2 = libNtve_gf_ActorLastCreated();
    lib1926661B_gf_CreateReticleEffectAndTextTagAtPoint(lib1926661B_ge_CampaginReticleType_TerranMainObjective, lib1926661B_ge_CampaginReticleSize_Large, StringExternal("Param/Value/CBF1AF17"), PointFromId(1228341818));
    gv_towerDefenseTextTagPlacement3 = TextTagLastCreated();
    gv_towerDefenseActor3 = libNtve_gf_ActorLastCreated();
    lib1926661B_gf_CreateReticleEffectAndTextTagAtPoint(lib1926661B_ge_CampaginReticleType_TerranMainObjective, lib1926661B_ge_CampaginReticleSize_Large, StringExternal("Param/Value/96595851"), PointFromId(1542835278));
    gv_towerDefenseTextTagPlacement4 = TextTagLastCreated();
    gv_towerDefenseActor4 = libNtve_gf_ActorLastCreated();
    lib1926661B_gf_CreateReticleEffectAndTextTagAtPoint(lib1926661B_ge_CampaginReticleType_TerranMainObjective, lib1926661B_ge_CampaginReticleSize_Large, StringExternal("Param/Value/01871EC4"), PointFromId(1104931948));
    gv_towerDefenseBlockedTunnelTextTag = TextTagLastCreated();
    gv_towerDefenseBlockedTunnelActor = libNtve_gf_ActorLastCreated();
    libVCMI_gf_CreateObjectivePing(true, PointFromId(1650173755), StringExternal("Param/Value/751B970F"));
    gv_towerDefensePing1 = PingLastCreated();
    libVCMI_gf_CreateObjectivePing(true, PointFromId(1025567688), StringExternal("Param/Value/B17BE1FD"));
    gv_towerDefensePing2 = PingLastCreated();
    libVCMI_gf_CreateObjectivePing(true, PointFromId(1228341818), StringExternal("Param/Value/B86DFCB9"));
    gv_towerDefensePing3 = PingLastCreated();
    libVCMI_gf_CreateObjectivePing(true, PointFromId(1542835278), StringExternal("Param/Value/6751774A"));
    gv_towerDefensePing4 = PingLastCreated();
    TriggerExecute(gt_UPLHoldoutSecondAttackOngoing1, true, false);
    Wait(6.0, c_timeGame);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarrenRodgersPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Darren5", -1), StringExternal("Param/Value/CD538CE0"), StringExternal("Param/Value/C91D3010"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerA_Init () {
    gt_TowerDefenseTimerA = TriggerCreate("gt_TowerDefenseTimerA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer A Expires
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerAExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_towerDefenseTunnelTimer) > 240.0))) {
            return false;
        }

        if (!((gv_towerDefenseTunnelTimerActive == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CB618097"));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(292)), 5.0, Color(100.00, 0.00, 0.00));
    TriggerExecute(gt_TowerDefenseTimerAAttack, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerAExpires_Init () {
    gt_TowerDefenseTimerAExpires = TriggerCreate("gt_TowerDefenseTimerAExpires_Func");
    TriggerEnable(gt_TowerDefenseTimerAExpires, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseTimerAExpires, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer A Attack
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerAAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA63DCEEE_n;
    int autoA63DCEEE_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA63DCEEE_n = lib1926661B_gf_DifficultyValueInteger(35, 77);
    for (autoA63DCEEE_i = 1; autoA63DCEEE_i <= autoA63DCEEE_n; autoA63DCEEE_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(1.2, 0.6), lib1926661B_gf_DifficultyValueReal(2.4, 0.9)), c_timeGame);
    }
    TriggerExecute(gt_TowerDefenseTimerB, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerAAttack_Init () {
    gt_TowerDefenseTimerAAttack = TriggerCreate("gt_TowerDefenseTimerAAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer B
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseTunnelTimerActive = 2;
    TimerStart(gv_towerDefenseTunnelTimer, 198.0, false, c_timeGame);
    gv_towerDefenseTunnelTimer2 = TimerLastStarted();
    lib1926661B_gf_CreateTimerWindowLotC(TimerLastStarted(), StringExternal("Param/Value/7CB8E3CF"), true, false, 1);
    Wait(0.5, c_timeGame);
    TriggerEnable(gt_TowerDefenseTimerBExpires, true);
    TriggerEnable(gt_TowerDefenseTimerAExpires, false);
    Wait(15.0, c_timeGame);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarrenRodgersPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Darren6", -1), StringExternal("Param/Value/EBE5875C"), StringExternal("Param/Value/DD696939"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    lib1926661B_gf_FlashCheckpointReminder();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerB_Init () {
    gt_TowerDefenseTimerB = TriggerCreate("gt_TowerDefenseTimerB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer B Expires
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerBExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_towerDefenseTunnelTimer2) > 196.0))) {
            return false;
        }

        if (!((gv_towerDefenseTunnelTimerActive == 2))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DB2ADE8D"));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(292)), 5.0, Color(100.00, 0.00, 0.00));
    TriggerExecute(gt_TowerDefenseTimerBAttack, true, false);
    Wait(45.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(643221937));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1650173755)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(643221937));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1025567688)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(643221937));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1542835278)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerBExpires_Init () {
    gt_TowerDefenseTimerBExpires = TriggerCreate("gt_TowerDefenseTimerBExpires_Func");
    TriggerEnable(gt_TowerDefenseTimerBExpires, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseTimerBExpires, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer B Attack
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerBAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFB9785E3_n;
    int autoFB9785E3_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFB9785E3_n = lib1926661B_gf_DifficultyValueInteger(28, 65);
    for (autoFB9785E3_i = 1; autoFB9785E3_i <= autoFB9785E3_n; autoFB9785E3_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(0.8, 1.3), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(0.3, 0.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.4, 0.2), lib1926661B_gf_DifficultyValueReal(0.8, 0.4)), c_timeGame);
    }
    TriggerExecute(gt_TowerDefenseTimerC, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerBAttack_Init () {
    gt_TowerDefenseTimerBAttack = TriggerCreate("gt_TowerDefenseTimerBAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer C
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseTunnelTimerActive = 3;
    TimerStart(gv_towerDefenseTunnelTimer3, 125.0, false, c_timeGame);
    gv_towerDefenseTunnelTimer3 = TimerLastStarted();
    lib1926661B_gf_CreateTimerWindowLotC(TimerLastStarted(), StringExternal("Param/Value/CA77B869"), true, false, 1);
    Wait(0.5, c_timeGame);
    TriggerEnable(gt_TowerDefenseTimerCExpires, true);
    TriggerEnable(gt_TowerDefenseTimerBExpires, false);
    Wait(15.0, c_timeGame);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarrenRodgersPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Darren8", -1), StringExternal("Param/Value/E0B4B96E"), StringExternal("Param/Value/5F3E7F6C"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    lib1926661B_gf_FlashCheckpointReminder();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerC_Init () {
    gt_TowerDefenseTimerC = TriggerCreate("gt_TowerDefenseTimerC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer C Expires
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerCExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_towerDefenseTunnelTimer3) > 123.0))) {
            return false;
        }

        if (!((gv_towerDefenseTunnelTimerActive == 3))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/AB09045C"));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(292)), 5.0, Color(100.00, 0.00, 0.00));
    TriggerExecute(gt_TowerDefenseTimerCAttack, true, false);
    Wait(45.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1287369550));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1650173755)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1287369550));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1025567688)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(643221937));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1542835278)), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1287369550));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1650173755)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1287369550));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1025567688)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(643221937));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1542835278)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerCExpires_Init () {
    gt_TowerDefenseTimerCExpires = TriggerCreate("gt_TowerDefenseTimerCExpires_Func");
    TriggerEnable(gt_TowerDefenseTimerCExpires, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseTimerCExpires, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer C Attack
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerCAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto223E3DE8_n;
    int auto223E3DE8_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_UPLHoldoutSecondAttack5, true, false);
    auto223E3DE8_n = lib1926661B_gf_DifficultyValueInteger(31, 75);
    for (auto223E3DE8_i = 1; auto223E3DE8_i <= auto223E3DE8_n; auto223E3DE8_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 4.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 4.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.8, 0.4), lib1926661B_gf_DifficultyValueReal(1.3, 0.7)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.6, 0.3), lib1926661B_gf_DifficultyValueReal(1.4, 0.7)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(1.0, 0.5), lib1926661B_gf_DifficultyValueReal(1.8, 0.9)), c_timeGame);
    }
    TriggerExecute(gt_TowerDefenseTimerD, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerCAttack_Init () {
    gt_TowerDefenseTimerCAttack = TriggerCreate("gt_TowerDefenseTimerCAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer D
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseTunnelTimerActive = 4;
    TimerStart(gv_towerDefenseTunnelTimer4, 95.0, false, c_timeGame);
    gv_towerDefenseTunnelTimer4 = TimerLastStarted();
    lib1926661B_gf_CreateTimerWindowLotC(TimerLastStarted(), StringExternal("Param/Value/2DE13DBD"), true, false, 1);
    Wait(0.5, c_timeGame);
    TriggerEnable(gt_TowerDefenseTimerDExpires, true);
    TriggerEnable(gt_TowerDefenseTimerCExpires, false);
    Wait(RandomInt(22, 32), c_timeGame);
    TriggerExecute(gt_TowerDefenseNydus1, true, false);
    Wait(RandomInt(22, 32), c_timeGame);
    TriggerExecute(gt_TowerDefenseNydus2, true, false);
    Wait(6.0, c_timeGame);
    TriggerQueueEnter();
    Wait(24.0, c_timeGame);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("RaptorJetPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Raptor1", -1), StringExternal("Param/Value/94B9F56D"), StringExternal("Param/Value/344D0129"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "M2FinaleMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    lib1926661B_gf_FlashCheckpointReminder();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerD_Init () {
    gt_TowerDefenseTimerD = TriggerCreate("gt_TowerDefenseTimerD_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer D Expires
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerDExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_towerDefenseTunnelTimer4) > 93.0))) {
            return false;
        }

        if (!((gv_towerDefenseTunnelTimerActive == 4))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BC0B6E45"));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(292)), 5.0, Color(100.00, 0.00, 0.00));
    TriggerExecute(gt_TowerDefenseTimerDAttack, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerDExpires_Init () {
    gt_TowerDefenseTimerDExpires = TriggerCreate("gt_TowerDefenseTimerDExpires_Func");
    TriggerEnable(gt_TowerDefenseTimerDExpires, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseTimerDExpires, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer D Attack
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerDAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoECB05766_n;
    int autoECB05766_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoECB05766_n = lib1926661B_gf_DifficultyValueInteger(28, 75);
    for (autoECB05766_i = 1; autoECB05766_i <= autoECB05766_n; autoECB05766_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 4.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 4.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.6, 0.3), lib1926661B_gf_DifficultyValueReal(1.0, 0.5)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.4, 0.2), lib1926661B_gf_DifficultyValueReal(0.8, 0.4)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 5.1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.3, 0.1), lib1926661B_gf_DifficultyValueReal(1.0, 0.5)), c_timeGame);
    }
    TriggerExecute(gt_TowerDefenseTimerE, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerDAttack_Init () {
    gt_TowerDefenseTimerDAttack = TriggerCreate("gt_TowerDefenseTimerDAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer E
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseTunnelTimerActive = 5;
    TimerStart(gv_towerDefenseTunnelTimer5, 97.0, false, c_timeGame);
    gv_towerDefenseTunnelTimer5 = TimerLastStarted();
    lib1926661B_gf_CreateTimerWindowLotC(TimerLastStarted(), StringExternal("Param/Value/264908DE"), true, false, 1);
    Wait(0.5, c_timeGame);
    TriggerEnable(gt_TowerDefenseTimerEExpires, true);
    TriggerEnable(gt_TowerDefenseTimerDExpires, false);
    TriggerExecute(gt_TowerDefenseNydus3, true, false);
    Wait(RandomInt(8, 11), c_timeGame);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarrenRodgersPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Darren7", -1), StringExternal("Param/Value/7C963FE6"), StringExternal("Param/Value/FAE6FBFD"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    lib1926661B_gf_FlashCheckpointReminder();
    TriggerQueueExit();
    Wait(RandomInt(12, 15), c_timeGame);
    TriggerExecute(gt_TowerDefenseNydus4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerE_Init () {
    gt_TowerDefenseTimerE = TriggerCreate("gt_TowerDefenseTimerE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer E Expires
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerEExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_towerDefenseTunnelTimer5) > 95.0))) {
            return false;
        }

        if (!((gv_towerDefenseTunnelTimerActive == 5))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8B97BF7D"));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(292)), 5.0, Color(100.00, 0.00, 0.00));
    TriggerExecute(gt_TowerDefenseTimerEAttack, true, false);
    Wait(45.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1287369550));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1650173755)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1287369550));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1025567688)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1287369550));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1650173755)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(1287369550));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1025567688)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(643221937));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1542835278)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(643221937));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1228341818)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, PointFromId(643221937));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1228341818)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerEExpires_Init () {
    gt_TowerDefenseTimerEExpires = TriggerCreate("gt_TowerDefenseTimerEExpires_Func");
    TriggerEnable(gt_TowerDefenseTimerEExpires, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseTimerEExpires, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer E Attack
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerEAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto12954763_n;
    int auto12954763_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto12954763_n = lib1926661B_gf_DifficultyValueInteger(22, 42);
    for (auto12954763_i = 1; auto12954763_i <= auto12954763_n; auto12954763_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.6, 0.3), lib1926661B_gf_DifficultyValueReal(1.0, 0.5)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.4, 0.2), lib1926661B_gf_DifficultyValueReal(0.6, 0.3)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.6, 0.3), lib1926661B_gf_DifficultyValueReal(0.8, 0.4)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(1.6, 0.8), lib1926661B_gf_DifficultyValueReal(2.3, 1.6)), c_timeGame);
    }
    TriggerExecute(gt_TowerDefenseTimerF, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerEAttack_Init () {
    gt_TowerDefenseTimerEAttack = TriggerCreate("gt_TowerDefenseTimerEAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer F
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseTunnelTimerActive = 6;
    TimerStart(gv_towerDefenseTunnelTimer6, 54.0, false, c_timeGame);
    gv_towerDefenseTunnelTimer6 = TimerLastStarted();
    lib1926661B_gf_CreateTimerWindowLotC(TimerLastStarted(), StringExternal("Param/Value/EF31E495"), true, false, 1);
    Wait(0.5, c_timeGame);
    TriggerEnable(gt_TowerDefenseTimerFExpires, true);
    TriggerEnable(gt_TowerDefenseTimerEExpires, false);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("RaptorJetPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Raptor2", -1), StringExternal("Param/Value/8D93623C"), StringExternal("Param/Value/E5B351C5"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2SergeantX7", -1), StringExternal("Param/Value/E8D4D344"), StringExternal("Param/Value/F0D3338B"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(13634308), ColorWithAlpha(95.69, 0.00, 0.00, 0.00), 125.0, 135.0);
    gv_towerDefenseArrowPing1 = PingLastCreated();
    PingSetTooltip(gv_towerDefenseArrowPing1, StringExternal("Param/Value/BB9EE37C"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(2069810000), ColorWithAlpha(95.69, 0.00, 0.00, 0.00), 125.0, 135.0);
    gv_towerDefenseArrowPing2 = PingLastCreated();
    PingSetTooltip(gv_towerDefenseArrowPing2, StringExternal("Param/Value/75B379AA"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(2111355283), ColorWithAlpha(95.69, 0.00, 0.00, 0.00), 125.0, 135.0);
    gv_towerDefenseArrowPing3 = PingLastCreated();
    PingSetTooltip(gv_towerDefenseArrowPing3, StringExternal("Param/Value/0869EDCF"));
    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/D024B862"));
    Wait(7.0, c_timeGame);
    libVCUI_gf_HideCampaignDirective();
    lib1926661B_gf_FlashCheckpointReminder();
    Wait(15.0, c_timeGame);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarrenRodgersPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Darren9", -1), StringExternal("Param/Value/95C12241"), StringExternal("Param/Value/EFF0B0B5"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerF_Init () {
    gt_TowerDefenseTimerF = TriggerCreate("gt_TowerDefenseTimerF_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer F Expires
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerFExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_towerDefenseTunnelTimer6) > 52.0))) {
            return false;
        }

        if (!((gv_towerDefenseTunnelTimerActive == 6))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/68836DCC"));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(292)), 5.0, Color(100.00, 0.00, 0.00));
    TriggerExecute(gt_TowerDefenseTimerFAttack, true, false);
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_TowerDefenseUPLReinforcements, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerFExpires_Init () {
    gt_TowerDefenseTimerFExpires = TriggerCreate("gt_TowerDefenseTimerFExpires_Func");
    TriggerEnable(gt_TowerDefenseTimerFExpires, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseTimerFExpires, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Timer F Attack
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseTimerFAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEA7C40B3_n;
    int autoEA7C40B3_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEA7C40B3_n = lib1926661B_gf_DifficultyValueInteger(38, 82);
    for (autoEA7C40B3_i = 1; autoEA7C40B3_i <= autoEA7C40B3_n; autoEA7C40B3_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 3.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.2, 0.1), lib1926661B_gf_DifficultyValueReal(0.4, 0.2)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 3.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.5, 0.1), lib1926661B_gf_DifficultyValueReal(0.7, 0.2)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 3.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.3, 0.1), lib1926661B_gf_DifficultyValueReal(0.4, 0.2)), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_04_UNKNOWNCREATURES, RegionRandomPoint(RegionFromId(292)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 3.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(303))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(304))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(305))), c_orderQueueAddToEnd);
        Wait(RandomFixed(lib1926661B_gf_DifficultyValueReal(0.3, 0.1), lib1926661B_gf_DifficultyValueReal(0.4, 0.2)), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseTimerFAttack_Init () {
    gt_TowerDefenseTimerFAttack = TriggerCreate("gt_TowerDefenseTimerFAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense UPL Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseUPLReinforcements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto356BA2B9_g;
    int auto356BA2B9_u;
    unit auto356BA2B9_var;
    unitgroup auto4BD51AE3_g;
    int auto4BD51AE3_u;
    unit auto4BD51AE3_var;
    const int auto789E7DD1_n = 6;
    int auto789E7DD1_i;
    const int autoB47AE630_n = 4;
    int autoB47AE630_i;
    const int autoAE270A77_n = 4;
    int autoAE270A77_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(gv_towerDefenseBlockedTunnelTextTag);
    TextTagDestroy(gv_towerDefenseTextTagArrow1);
    TextTagDestroy(gv_towerDefenseTextTagArrow2);
    TextTagDestroy(gv_towerDefenseTextTagPlacement1);
    TextTagDestroy(gv_towerDefenseTextTagPlacement2);
    TextTagDestroy(gv_towerDefenseTextTagPlacement3);
    TextTagDestroy(gv_towerDefenseTextTagPlacement4);
    libNtve_gf_KillModel(gv_towerDefenseActor1);
    libNtve_gf_KillModel(gv_towerDefenseActor2);
    libNtve_gf_KillModel(gv_towerDefenseActor3);
    libNtve_gf_KillModel(gv_towerDefenseActor4);
    libNtve_gf_KillModel(gv_towerDefenseBlockedTunnelActor);
    UnitKill(UnitFromId(169635545));
    UnitKill(UnitFromId(1397134560));
    UnitKill(UnitFromId(411485593));
    UnitKill(UnitFromId(524177549));
    UnitKill(UnitFromId(1625186644));
    UnitKill(UnitFromId(724706924));
    auto356BA2B9_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto356BA2B9_u = UnitGroupCount(auto356BA2B9_g, c_unitCountAll);
    for (;; auto356BA2B9_u -= 1) {
        auto356BA2B9_var = UnitGroupUnitFromEnd(auto356BA2B9_g, auto356BA2B9_u);
        if (auto356BA2B9_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto356BA2B9_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        libNtve_gf_MakeUnitUncommandable(auto356BA2B9_var, true);
        UnitSelect(auto356BA2B9_var, gv_pLAYER_01_USER, false);
    }
    auto4BD51AE3_g = UnitGroup(null, gv_pLAYER_03_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4BD51AE3_u = UnitGroupCount(auto4BD51AE3_g, c_unitCountAll);
    for (;; auto4BD51AE3_u -= 1) {
        auto4BD51AE3_var = UnitGroupUnitFromEnd(auto4BD51AE3_g, auto4BD51AE3_u);
        if (auto4BD51AE3_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto4BD51AE3_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1345759223), 9.0, -1, 10.0, true);
    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/3FA52EFE"));
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("RaptorJetPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), "", "Talk", SoundLink("M2Raptor3", -1), StringExternal("Param/Value/82481778"), StringExternal("Param/Value/41EE9037"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    Wait(4.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1546349501), 25.0, -1, 10.0, true);
    for (auto789E7DD1_i = 1; auto789E7DD1_i <= auto789E7DD1_n; auto789E7DD1_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Osprey", 0, gv_pLAYER_02_POLICE, RegionRandomPoint(RegionFromId(306)));
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(317))), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaptorJet", 0, gv_pLAYER_05_POLICE_NEUTRAL, RegionRandomPoint(RegionFromId(307)));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.75, 6.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 9.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 9.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(308))), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2RaptorFlyby1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaptorJet", 0, gv_pLAYER_05_POLICE_NEUTRAL, RegionRandomPoint(RegionFromId(307)));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.75, 6.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 9.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 9.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(308))), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2RaptorFlyby2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TowerDefenseBombs, true, false);
    libVCUI_gf_HideCampaignDirective();
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_TowerDefenseBombs2, true, false);
    for (autoB47AE630_i = 1; autoB47AE630_i <= autoB47AE630_n; autoB47AE630_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Osprey", 0, gv_pLAYER_02_POLICE, RegionRandomPoint(RegionFromId(306)));
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(319))), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaptorJet", 0, gv_pLAYER_05_POLICE_NEUTRAL, RegionRandomPoint(RegionFromId(307)));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.75, 6.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 9.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 9.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(308))), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2RaptorFlyby3", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaptorJet", 0, gv_pLAYER_05_POLICE_NEUTRAL, RegionRandomPoint(RegionFromId(307)));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.75, 6.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 9.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 9.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(308))), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2RaptorFlyby4", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TowerDefenseBombs, true, false);
    for (autoAE270A77_i = 1; autoAE270A77_i <= autoAE270A77_n; autoAE270A77_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Osprey", 0, gv_pLAYER_02_POLICE, RegionRandomPoint(RegionFromId(306)));
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(318))), c_orderQueueReplace);
    }
    Wait(1.0, c_timeGame);
    TriggerStop(gt_TowerDefenseTimerFAttack);
    TriggerExecute(gt_TowerDefenseBombs2, true, false);
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaptorJet", 0, gv_pLAYER_05_POLICE_NEUTRAL, RegionRandomPoint(RegionFromId(307)));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.75, 6.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 9.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 9.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(308))), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2RaptorFlyby3", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_TowerDefenseBombs, true, true);
    TriggerDestroy(gt_TowerDefenseTimerFAttack);
    ActorCreate(ActorScopeFromUnit(gv_mYRADAVIS), "TalkIcon", null, null, null);
    gf_SendTransmissionFromUnitCombat(gv_mYRADAVIS, SoundLink("M2Davis65", -1), StringExternal("Param/Value/37BFE928"), false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    Wait(5.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), "", "Talk", SoundLink("M2Sergeant20", -1), StringExternal("Param/Value/7BD2FCF8"), StringExternal("Param/Value/DF7CA28E"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    ObjectiveSetState(gv_towerDefenseProtectCiviliansObjective, c_objectiveStateCompleted);
    ObjectiveSetState(gv_uPLHoldoutProtectHQ, c_objectiveStateCompleted);
    ObjectiveSetState(gv_uPLHoldoutSectionHoldtheLine, c_objectiveStateCompleted);
    TriggerEnable(gt_DefeatHQDestroyed, false);
    TriggerEnable(gt_DefeatDavisDies, false);
    TriggerEnable(gt_DefeatCivsKilled, false);
    TriggerEnable(gt_DefeatGenDestroyed, false);
    if ((gv_stat_CivsDead <= 0) && (lib1926661B_gf_DifficultyValueBoolean(false, true) == true)) {
        libAE8FC9D3_gf_AwardAchievement("EP01M02-P2-Brutal", gv_pLAYER_01_USER);
    }
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseUPLReinforcements_Init () {
    gt_TowerDefenseUPLReinforcements = TriggerCreate("gt_TowerDefenseUPLReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Bombs
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseBombs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto43FAB84E_g;
    int auto43FAB84E_u;
    unit auto43FAB84E_var;
    unitgroup autoF4305038_g;
    int autoF4305038_u;
    unit autoF4305038_var;
    unitgroup autoF9579088_g;
    int autoF9579088_u;
    unit autoF9579088_var;
    unitgroup auto508D9CE9_g;
    int auto508D9CE9_u;
    unit auto508D9CE9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("M2RaptorExplosion1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto43FAB84E_g = UnitGroup(null, c_playerAny, RegionFromId(309), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto43FAB84E_u = UnitGroupCount(auto43FAB84E_g, c_unitCountAll);
    for (;; auto43FAB84E_u -= 1) {
        auto43FAB84E_var = UnitGroupUnitFromEnd(auto43FAB84E_g, auto43FAB84E_u);
        if (auto43FAB84E_var == null) { break; }
        UnitDamage(UnitFromId(1761979590), "TR17Damage", auto43FAB84E_var, 300.0);
    }
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(309)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(309)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(309)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(309)));
    Wait(0.75, c_timeGame);
    SoundPlayForPlayer(SoundLink("M2RaptorExplosion3", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoF4305038_g = UnitGroup(null, c_playerAny, RegionFromId(310), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF4305038_u = UnitGroupCount(autoF4305038_g, c_unitCountAll);
    for (;; autoF4305038_u -= 1) {
        autoF4305038_var = UnitGroupUnitFromEnd(autoF4305038_g, autoF4305038_u);
        if (autoF4305038_var == null) { break; }
        UnitDamage(UnitFromId(1761979590), "TR17Damage", autoF4305038_var, 300.0);
    }
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(310)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(310)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(310)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(310)));
    Wait(0.75, c_timeGame);
    SoundPlayForPlayer(SoundLink("M2RaptorExplosion5", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoF9579088_g = UnitGroup(null, c_playerAny, RegionFromId(311), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF9579088_u = UnitGroupCount(autoF9579088_g, c_unitCountAll);
    for (;; autoF9579088_u -= 1) {
        autoF9579088_var = UnitGroupUnitFromEnd(autoF9579088_g, autoF9579088_u);
        if (autoF9579088_var == null) { break; }
        UnitDamage(UnitFromId(1761979590), "TR17Damage", autoF9579088_var, 300.0);
    }
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(311)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(311)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(311)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(311)));
    Wait(0.75, c_timeGame);
    SoundPlayForPlayer(SoundLink("M2RaptorExplosion7", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto508D9CE9_g = UnitGroup(null, c_playerAny, RegionFromId(312), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto508D9CE9_u = UnitGroupCount(auto508D9CE9_g, c_unitCountAll);
    for (;; auto508D9CE9_u -= 1) {
        auto508D9CE9_var = UnitGroupUnitFromEnd(auto508D9CE9_g, auto508D9CE9_u);
        if (auto508D9CE9_var == null) { break; }
        UnitDamage(UnitFromId(1761979590), "TR17Damage", auto508D9CE9_var, 300.0);
    }
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(312)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(312)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(312)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(312)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseBombs_Init () {
    gt_TowerDefenseBombs = TriggerCreate("gt_TowerDefenseBombs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Bombs 2
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseBombs2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF338E120_g;
    int autoF338E120_u;
    unit autoF338E120_var;
    unitgroup autoBF32A9FC_g;
    int autoBF32A9FC_u;
    unit autoBF32A9FC_var;
    unitgroup auto82612475_g;
    int auto82612475_u;
    unit auto82612475_var;
    unitgroup auto4E6F80E1_g;
    int auto4E6F80E1_u;
    unit auto4E6F80E1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("M2RaptorExplosion2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoF338E120_g = UnitGroup(null, c_playerAny, RegionFromId(313), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF338E120_u = UnitGroupCount(autoF338E120_g, c_unitCountAll);
    for (;; autoF338E120_u -= 1) {
        autoF338E120_var = UnitGroupUnitFromEnd(autoF338E120_g, autoF338E120_u);
        if (autoF338E120_var == null) { break; }
        UnitDamage(UnitFromId(1761979590), "TR17Damage", autoF338E120_var, 300.0);
    }
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(313)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(313)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(313)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(313)));
    Wait(0.75, c_timeGame);
    SoundPlayForPlayer(SoundLink("M2RaptorExplosion4", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoBF32A9FC_g = UnitGroup(null, c_playerAny, RegionFromId(314), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBF32A9FC_u = UnitGroupCount(autoBF32A9FC_g, c_unitCountAll);
    for (;; autoBF32A9FC_u -= 1) {
        autoBF32A9FC_var = UnitGroupUnitFromEnd(autoBF32A9FC_g, autoBF32A9FC_u);
        if (autoBF32A9FC_var == null) { break; }
        UnitDamage(UnitFromId(1761979590), "TR17Damage", autoBF32A9FC_var, 300.0);
    }
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(314)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(314)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(314)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(314)));
    Wait(0.75, c_timeGame);
    SoundPlayForPlayer(SoundLink("M2RaptorExplosion6", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto82612475_g = UnitGroup(null, c_playerAny, RegionFromId(315), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82612475_u = UnitGroupCount(auto82612475_g, c_unitCountAll);
    for (;; auto82612475_u -= 1) {
        auto82612475_var = UnitGroupUnitFromEnd(auto82612475_g, auto82612475_u);
        if (auto82612475_var == null) { break; }
        UnitDamage(UnitFromId(1761979590), "TR17Damage", auto82612475_var, 300.0);
    }
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(315)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(315)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(315)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(315)));
    Wait(0.75, c_timeGame);
    SoundPlayForPlayer(SoundLink("M2RaptorExplosion8", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto4E6F80E1_g = UnitGroup(null, c_playerAny, RegionFromId(316), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E6F80E1_u = UnitGroupCount(auto4E6F80E1_g, c_unitCountAll);
    for (;; auto4E6F80E1_u -= 1) {
        auto4E6F80E1_var = UnitGroupUnitFromEnd(auto4E6F80E1_g, auto4E6F80E1_u);
        if (auto4E6F80E1_var == null) { break; }
        UnitDamage(UnitFromId(1761979590), "TR17Damage", auto4E6F80E1_var, 300.0);
    }
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(316)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(316)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(316)));
    libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(316)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseBombs2_Init () {
    gt_TowerDefenseBombs2 = TriggerCreate("gt_TowerDefenseBombs2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Unburrow Civilian A
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseUnburrowCivilianA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto74C91FEE_g;
    int auto74C91FEE_u;
    unit auto74C91FEE_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto74C91FEE_g = UnitGroup(null, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, RegionFromId(301), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto74C91FEE_u = UnitGroupCount(auto74C91FEE_g, c_unitCountAll);
    for (;; auto74C91FEE_u -= 1) {
        auto74C91FEE_var = UnitGroupUnitFromEnd(auto74C91FEE_g, auto74C91FEE_u);
        if (auto74C91FEE_var == null) { break; }
        UnitSetOwner(auto74C91FEE_var, gv_pLAYER_04_UNKNOWNCREATURES, true);
        UnitIssueOrder(auto74C91FEE_var, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(auto74C91FEE_var, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(auto74C91FEE_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(1.2, 1.9), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseUnburrowCivilianA_Init () {
    gt_TowerDefenseUnburrowCivilianA = TriggerCreate("gt_TowerDefenseUnburrowCivilianA_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseUnburrowCivilianA, null, RegionFromId(301), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Unburrow Civilian B
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseUnburrowCivilianB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto019389AE_g;
    int auto019389AE_u;
    unit auto019389AE_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianPickupB == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto019389AE_g = UnitGroup(null, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, RegionFromId(290), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto019389AE_u = UnitGroupCount(auto019389AE_g, c_unitCountAll);
    for (;; auto019389AE_u -= 1) {
        auto019389AE_var = UnitGroupUnitFromEnd(auto019389AE_g, auto019389AE_u);
        if (auto019389AE_var == null) { break; }
        UnitSetOwner(auto019389AE_var, gv_pLAYER_04_UNKNOWNCREATURES, true);
        UnitIssueOrder(auto019389AE_var, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(auto019389AE_var, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(auto019389AE_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(1.2, 1.9), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseUnburrowCivilianB_Init () {
    gt_TowerDefenseUnburrowCivilianB = TriggerCreate("gt_TowerDefenseUnburrowCivilianB_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseUnburrowCivilianB, null, RegionFromId(290), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Unburrow Civilian C
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseUnburrowCivilianC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCF726F42_g;
    int autoCF726F42_u;
    unit autoCF726F42_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianPickupC == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF726F42_g = UnitGroup(null, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, RegionFromId(289), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCF726F42_u = UnitGroupCount(autoCF726F42_g, c_unitCountAll);
    for (;; autoCF726F42_u -= 1) {
        autoCF726F42_var = UnitGroupUnitFromEnd(autoCF726F42_g, autoCF726F42_u);
        if (autoCF726F42_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCF726F42_var, true);
        UnitSetOwner(autoCF726F42_var, gv_pLAYER_04_UNKNOWNCREATURES, true);
        UnitIssueOrder(autoCF726F42_var, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(autoCF726F42_var, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(autoCF726F42_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(1.2, 1.9), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseUnburrowCivilianC_Init () {
    gt_TowerDefenseUnburrowCivilianC = TriggerCreate("gt_TowerDefenseUnburrowCivilianC_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseUnburrowCivilianC, null, RegionFromId(289), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Unburrow Stall
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseUnburrowStall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto57F0BE27_g;
    int auto57F0BE27_u;
    unit auto57F0BE27_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianPickupC == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto57F0BE27_g = UnitGroup(null, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, RegionFromId(320), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto57F0BE27_u = UnitGroupCount(auto57F0BE27_g, c_unitCountAll);
    for (;; auto57F0BE27_u -= 1) {
        auto57F0BE27_var = UnitGroupUnitFromEnd(auto57F0BE27_g, auto57F0BE27_u);
        if (auto57F0BE27_var == null) { break; }
        UnitSetOwner(auto57F0BE27_var, gv_pLAYER_04_UNKNOWNCREATURES, true);
        UnitIssueOrder(auto57F0BE27_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(2.2, 2.9), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseUnburrowStall_Init () {
    gt_TowerDefenseUnburrowStall = TriggerCreate("gt_TowerDefenseUnburrowStall_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseUnburrowStall, null, RegionFromId(320), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilian Dies
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCivilianDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "UPLCivilianFemale") || (UnitGetType(EventUnit()) == "UPLCivilianMale")))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseDeadCivilians += 1;
    TextExpressionSetToken("Param/Expression/982F10C8", "A", IntToText(gv_towerDefenseDeadCivilians));
    ObjectiveSetName(gv_towerDefenseProtectCiviliansObjective, TextExpressionAssemble("Param/Expression/982F10C8"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCivilianDies_Init () {
    gt_TowerDefenseCivilianDies = TriggerCreate("gt_TowerDefenseCivilianDies_Func");
    TriggerAddEventUnitDied(gt_TowerDefenseCivilianDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Van Damaged
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseVanDamaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(gv_towerDefenseVanUnit, c_unitPropLife, c_unitPropCurrent) < 70.0))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins16", -1), StringExternal("Param/Value/E94F789A"), StringExternal("Param/Value/B29ABFE9"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerEnable(gt_TowerDefenseVanDamaged2, true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseVanDamaged_Init () {
    gt_TowerDefenseVanDamaged = TriggerCreate("gt_TowerDefenseVanDamaged_Func");
    TriggerEnable(gt_TowerDefenseVanDamaged, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseVanDamaged, 0.3, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Van Damaged 2
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseVanDamaged2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(gv_towerDefenseVanUnit, c_unitPropLife, c_unitPropCurrent) < 30.0))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Sergeant22", -1), StringExternal("Param/Value/9268C235"), StringExternal("Param/Value/A1FA4421"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseVanDamaged2_Init () {
    gt_TowerDefenseVanDamaged2 = TriggerCreate("gt_TowerDefenseVanDamaged2_Func");
    TriggerEnable(gt_TowerDefenseVanDamaged2, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseVanDamaged2, 0.3, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Section Begins
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseSectionBegins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBA389AA6_g;
    int autoBA389AA6_u;
    unit autoBA389AA6_var;
    unitgroup auto1E805820_g;
    int auto1E805820_u;
    unit auto1E805820_var;

    // Conditions
    if (testConds) {
        if (!((gv_uPLHoldoutSectionActive == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseDoodadsAppear = 1;
    UnitRemove(UnitFromId(1368088584));
    UnitRemove(UnitFromId(858825566));
    autoBA389AA6_g = gv_holdout_PausedPlayerUnits;
    autoBA389AA6_u = UnitGroupCount(autoBA389AA6_g, c_unitCountAll);
    for (;; autoBA389AA6_u -= 1) {
        autoBA389AA6_var = UnitGroupUnitFromEnd(autoBA389AA6_g, autoBA389AA6_u);
        if (autoBA389AA6_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoBA389AA6_var, true);
        libNtve_gf_PauseUnit(autoBA389AA6_var, false);
    }
    auto1E805820_g = UnitGroup(null, gv_pLAYER_02_POLICE, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1E805820_u = UnitGroupCount(auto1E805820_g, c_unitCountAll);
    for (;; auto1E805820_u -= 1) {
        auto1E805820_var = UnitGroupUnitFromEnd(auto1E805820_g, auto1E805820_u);
        if (auto1E805820_var == null) { break; }
        UnitSetOwner(auto1E805820_var, gv_pLAYER_01_USER, true);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1155457225), 0.0, -1, 10.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    lib1926661B_gf_SetHeroPanelUnit(1, gv_mYRADAVIS);
    lib1926661B_gf_ShowHideHeroPanel(1, true);
    lib1926661B_gf_SetHeroPanelUnit(2, gv_peters);
    lib1926661B_gf_ShowHideHeroPanel(2, true);
    if ((UnitIsAlive(gv_cARR) == true)) {
        lib1926661B_gf_SetHeroPanelUnit(3, gv_cARR);
        lib1926661B_gf_ShowHideHeroPanel(3, true);
    }

    TriggerExecute(gt_DavisDamageFreebie, true, false);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    UnitKill(UnitFromId(1214132382));
    TriggerExecute(gt_UPLHoldoutSecondAttack6, true, false);
    TriggerExecute(gt_UPLHoldoutSecondAttack4, true, false);
    lib1926661B_gf_FlashCheckpointReminder();
    Wait(110.0, c_timeGame);
    gv_towerDefenseSectionActive = 1;
    TriggerExecute(gt_TowerDefenseSectionBeginsPart2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseSectionBegins_Init () {
    gt_TowerDefenseSectionBegins = TriggerCreate("gt_TowerDefenseSectionBegins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Section Begins Part 2
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseSectionBeginsPart2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC4EF0CE1_g;
    int autoC4EF0CE1_u;
    unit autoC4EF0CE1_var;
    unitgroup autoE974F01E_g;
    int autoE974F01E_u;
    unit autoE974F01E_var;
    unitgroup auto90AAD271_g;
    int auto90AAD271_u;
    unit auto90AAD271_var;
    unitgroup auto9764D216_g;
    int auto9764D216_u;
    unit auto9764D216_var;
    unitgroup autoF0548F40_g;
    int autoF0548F40_u;
    unit autoF0548F40_var;
    unitgroup autoD74182EB_g;
    int autoD74182EB_u;
    unit autoD74182EB_var;
    unitgroup auto78B09E42_g;
    int auto78B09E42_u;
    unit auto78B09E42_var;
    unitgroup autoB686CC09_g;
    int autoB686CC09_u;
    unit autoB686CC09_var;
    unitgroup auto60C8DEF4_g;
    int auto60C8DEF4_u;
    unit auto60C8DEF4_var;
    unitgroup auto0A651396_g;
    int auto0A651396_u;
    unit auto0A651396_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    autoC4EF0CE1_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4EF0CE1_u = UnitGroupCount(autoC4EF0CE1_g, c_unitCountAll);
    for (;; autoC4EF0CE1_u -= 1) {
        autoC4EF0CE1_var = UnitGroupUnitFromEnd(autoC4EF0CE1_g, autoC4EF0CE1_u);
        if (autoC4EF0CE1_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoC4EF0CE1_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    CameraSave(gv_pLAYER_01_USER);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(RegionFromId(282));
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    UISetMiniMapBounds(PlayerGroupAll(), RegionPlayableMap());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1822727568), 0.0, -1, 10.0, true);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    lib1926661B_gf_ShowHideHeroPanel(1, false);
    lib1926661B_gf_ShowHideHeroPanel(2, false);
    lib1926661B_gf_ShowHideHeroPanel(3, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    autoE974F01E_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE974F01E_u = UnitGroupCount(autoE974F01E_g, c_unitCountAll);
    for (;; autoE974F01E_u -= 1) {
        autoE974F01E_var = UnitGroupUnitFromEnd(autoE974F01E_g, autoE974F01E_u);
        if (autoE974F01E_var == null) { break; }
        libNtve_gf_PauseUnit(autoE974F01E_var, true);
        libNtve_gf_ShowHideUnit(autoE974F01E_var, false);
    }
    PlayerSetLighting(gv_pLAYER_01_USER, "AiurFlashback", 0.0);
    auto90AAD271_g = UnitGroup(null, c_playerAny, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto90AAD271_u = UnitGroupCount(auto90AAD271_g, c_unitCountAll);
    for (;; auto90AAD271_u -= 1) {
        auto90AAD271_var = UnitGroupUnitFromEnd(auto90AAD271_g, auto90AAD271_u);
        if (auto90AAD271_var == null) { break; }
        libNtve_gf_PauseUnit(auto90AAD271_var, false);
        libNtve_gf_ShowHideUnit(auto90AAD271_var, true);
        UnitGroupAdd(gv_towerDefenseUPLDemoGroup, auto90AAD271_var);
        UnitSetOwner(auto90AAD271_var, gv_pLAYER_02_POLICE, true);
        UnitIssueOrder(auto90AAD271_var, Order(AbilityCommand("InfantryMortarModeSiege", 0)), c_orderQueueReplace);
    }
    auto9764D216_g = UnitGroup(null, c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9764D216_u = UnitGroupCount(auto9764D216_g, c_unitCountAll);
    for (;; auto9764D216_u -= 1) {
        auto9764D216_var = UnitGroupUnitFromEnd(auto9764D216_g, auto9764D216_u);
        if (auto9764D216_var == null) { break; }
        libNtve_gf_PauseUnit(auto9764D216_var, false);
        libNtve_gf_ShowHideUnit(auto9764D216_var, true);
        UnitGroupAdd(gv_towerDefenseZergDemoGroup, auto9764D216_var);
        UnitSetOwner(auto9764D216_var, gv_pLAYER_04_UNKNOWNCREATURES, true);
    }
    TriggerExecute(gt_TowerDefenseDemoZergMove, true, false);
    gf_SendTransmissionFromUnit(gv_mYRADAVIS, SoundLink("M2Davis61", -1), StringExternal("Param/Value/BD629AC2"), false);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    PlayerSetLighting(gv_pLAYER_01_USER, "MeinhoffCampaignNight", 0.0);
    autoF0548F40_g = gv_towerDefenseUPLDemoGroup;
    autoF0548F40_u = UnitGroupCount(autoF0548F40_g, c_unitCountAll);
    for (;; autoF0548F40_u -= 1) {
        autoF0548F40_var = UnitGroupUnitFromEnd(autoF0548F40_g, autoF0548F40_u);
        if (autoF0548F40_var == null) { break; }
        UnitRemove(autoF0548F40_var);
    }
    autoD74182EB_g = gv_towerDefenseZergDemoGroup;
    autoD74182EB_u = UnitGroupCount(autoD74182EB_g, c_unitCountAll);
    for (;; autoD74182EB_u -= 1) {
        autoD74182EB_var = UnitGroupUnitFromEnd(autoD74182EB_g, autoD74182EB_u);
        if (autoD74182EB_var == null) { break; }
        UnitRemove(autoD74182EB_var);
    }
    auto78B09E42_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto78B09E42_u = UnitGroupCount(auto78B09E42_g, c_unitCountAll);
    for (;; auto78B09E42_u -= 1) {
        auto78B09E42_var = UnitGroupUnitFromEnd(auto78B09E42_g, auto78B09E42_u);
        if (auto78B09E42_var == null) { break; }
        UnitRemove(auto78B09E42_var);
    }
    autoB686CC09_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB686CC09_u = UnitGroupCount(autoB686CC09_g, c_unitCountAll);
    for (;; autoB686CC09_u -= 1) {
        autoB686CC09_var = UnitGroupUnitFromEnd(autoB686CC09_g, autoB686CC09_u);
        if (autoB686CC09_var == null) { break; }
        libNtve_gf_PauseUnit(autoB686CC09_var, false);
        libNtve_gf_ShowHideUnit(autoB686CC09_var, true);
    }
    auto60C8DEF4_g = UnitGroup("GuideArrowUnit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto60C8DEF4_u = UnitGroupCount(auto60C8DEF4_g, c_unitCountAll);
    for (;; auto60C8DEF4_u -= 1) {
        auto60C8DEF4_var = UnitGroupUnitFromEnd(auto60C8DEF4_g, auto60C8DEF4_u);
        if (auto60C8DEF4_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto60C8DEF4_var, false);
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10.0);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    lib1926661B_gf_SetHeroPanelUnit(1, gv_mYRADAVIS);
    lib1926661B_gf_ShowHideHeroPanel(1, true);
    lib1926661B_gf_SetHeroPanelUnit(2, gv_peters);
    lib1926661B_gf_ShowHideHeroPanel(2, true);
    if ((UnitIsAlive(gv_cARR) == true)) {
        lib1926661B_gf_SetHeroPanelUnit(3, gv_cARR);
        lib1926661B_gf_ShowHideHeroPanel(3, true);
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    auto0A651396_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0A651396_u = UnitGroupCount(auto0A651396_g, c_unitCountAll);
    for (;; auto0A651396_u -= 1) {
        auto0A651396_var = UnitGroupUnitFromEnd(auto0A651396_g, auto0A651396_u);
        if (auto0A651396_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto0A651396_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    TriggerExecute(gt_DavisDamageFreebie, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    ActorCreate(ActorScopeFromUnit(gv_mYRADAVIS), "TalkIcon", null, null, null);
    gf_SendTransmissionFromUnitCombat(gv_mYRADAVIS, SoundLink("M2Davis62", -1), StringExternal("Param/Value/CDC5641E"), false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarrenRodgersPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Darren1", -1), StringExternal("Param/Value/6EA5FE99"), StringExternal("Param/Value/DF2A53F4"), 0.0, c_transmissionDurationSub, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarrenRodgersPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Darren2", -1), StringExternal("Param/Value/BC241CAB"), StringExternal("Param/Value/1C71D2B3"), 0.0, c_transmissionDurationSub, true, c_maxPlayers, false);
    ActorCreate(ActorScopeFromUnit(gv_mYRADAVIS), "TalkIcon", null, null, null);
    gf_SendTransmissionFromUnitCombat(gv_mYRADAVIS, SoundLink("M2Davis63", -1), StringExternal("Param/Value/D439978C"), false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarrenRodgersPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Darren3", -1), StringExternal("Param/Value/4407A041"), StringExternal("Param/Value/526AC722"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TimerStart(gv_towerDefenseWeAreLeavingTimer, 300.0, false, c_timeGame);
    gv_towerDefenseWeAreLeavingTimer = TimerLastStarted();
    lib1926661B_gf_CreateTimerWindowLotC(TimerLastStarted(), StringExternal("Param/Value/FD4520F3"), true, false, 1);
    TriggerExecute(gt_UPLHoldoutSecondAttack4, true, false);
    TriggerExecute(gt_UPLHoldoutSecondAttackOngoing1, true, false);
    Wait(140.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6A0C9AAD"));
    TriggerEnable(gt_TowerDefenseCivilianStand, true);
    TriggerExecute(gt_TowerDefenseCivilianGroupA, true, false);
    ObjectiveDestroy(gv_uPLHoldoutSectionBuild75);
    ObjectiveCreate(StringExternal("Param/Value/224DC209"), StringExternal("Param/Value/ED1B7F9D"), c_objectiveStateActive, true);
    gv_towerDefenseProtectCiviliansObjective = ObjectiveLastCreated();
    ObjectiveShow(gv_towerDefenseProtectCiviliansObjective, PlayerGroupAll(), true);
    lib1926661B_gf_FlashCheckpointReminder();
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_UPLHoldoutSecondAttackOngoing1, true, false);
    TriggerExecute(gt_UPLHoldoutSecondAttackOngoing2, true, false);
    TriggerEnable(gt_TowerDefenseVanAppears, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseSectionBeginsPart2_Init () {
    gt_TowerDefenseSectionBeginsPart2 = TriggerCreate("gt_TowerDefenseSectionBeginsPart2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Demo Zerg Move
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseDemoZergMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDAC6F11B_g;
    int autoDAC6F11B_u;
    unit autoDAC6F11B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    Wait(5.0, c_timeReal);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(2.0, c_timeReal);
    autoDAC6F11B_g = gv_towerDefenseZergDemoGroup;
    autoDAC6F11B_u = UnitGroupCount(autoDAC6F11B_g, c_unitCountAll);
    for (;; autoDAC6F11B_u -= 1) {
        autoDAC6F11B_var = UnitGroupUnitFromEnd(autoDAC6F11B_g, autoDAC6F11B_u);
        if (autoDAC6F11B_var == null) { break; }
        UnitIssueOrder(autoDAC6F11B_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1104931948)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseDemoZergMove_Init () {
    gt_TowerDefenseDemoZergMove = TriggerCreate("gt_TowerDefenseDemoZergMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Remove Civilians From Groups
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseRemoveCiviliansFromGroups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_towerDefenseCivilianAGroup, EventUnit());
    UnitGroupRemove(gv_towerDefenseCivilianBGroup, EventUnit());
    UnitGroupRemove(gv_towerDefenseCivilianCGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseRemoveCiviliansFromGroups_Init () {
    gt_TowerDefenseRemoveCiviliansFromGroups = TriggerCreate("gt_TowerDefenseRemoveCiviliansFromGroups_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseRemoveCiviliansFromGroups, null, RegionFromId(295), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilian Group A
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCivilianGroupA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDC0FE67F_n = 7;
    int autoDC0FE67F_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoDC0FE67F_i = 1; autoDC0FE67F_i <= autoDC0FE67F_n; autoDC0FE67F_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UPLCivilianFemale", 0, gv_pLAYER_03_CIVILIANS, PointFromId(1870891364));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply A A {} Instant");
        UnitSetTeamColorIndex(UnitLastCreated(), PlayerGetColorIndex(RandomInt(1, 15), true));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(288))), c_orderQueueReplace);
        UnitGroupAdd(gv_towerDefenseCivilianAGroup, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UPLCivilianMale", 0, gv_pLAYER_03_CIVILIANS, PointFromId(1870891364));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply A A {} Instant");
        UnitSetTeamColorIndex(UnitLastCreated(), PlayerGetColorIndex(RandomInt(1, 15), true));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(288))), c_orderQueueReplace);
        UnitGroupAdd(gv_towerDefenseCivilianAGroup, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCivilianGroupA_Init () {
    gt_TowerDefenseCivilianGroupA = TriggerCreate("gt_TowerDefenseCivilianGroupA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilian Group B
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCivilianGroupB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3116B5E6_n = 7;
    int auto3116B5E6_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto3116B5E6_i = 1; auto3116B5E6_i <= auto3116B5E6_n; auto3116B5E6_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UPLCivilianFemale", 0, gv_pLAYER_03_CIVILIANS, PointFromId(1870891364));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply A A {} Instant");
        UnitSetTeamColorIndex(UnitLastCreated(), PlayerGetColorIndex(RandomInt(1, 15), true));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(288))), c_orderQueueReplace);
        UnitGroupAdd(gv_towerDefenseCivilianBGroup, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UPLCivilianMale", 0, gv_pLAYER_03_CIVILIANS, PointFromId(1870891364));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply A A {} Instant");
        UnitSetTeamColorIndex(UnitLastCreated(), PlayerGetColorIndex(RandomInt(1, 15), true));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(288))), c_orderQueueReplace);
        UnitGroupAdd(gv_towerDefenseCivilianBGroup, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCivilianGroupB_Init () {
    gt_TowerDefenseCivilianGroupB = TriggerCreate("gt_TowerDefenseCivilianGroupB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilian Group C
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCivilianGroupC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE5046240_n = 7;
    int autoE5046240_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoE5046240_i = 1; autoE5046240_i <= autoE5046240_n; autoE5046240_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UPLCivilianFemale", 0, gv_pLAYER_03_CIVILIANS, PointFromId(1870891364));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply A A {} Instant");
        UnitSetTeamColorIndex(UnitLastCreated(), PlayerGetColorIndex(RandomInt(1, 15), true));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(288))), c_orderQueueReplace);
        UnitGroupAdd(gv_towerDefenseCivilianCGroup, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UPLCivilianMale", 0, gv_pLAYER_03_CIVILIANS, PointFromId(1870891364));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply A A {} Instant");
        UnitSetTeamColorIndex(UnitLastCreated(), PlayerGetColorIndex(RandomInt(1, 15), true));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(288))), c_orderQueueReplace);
        UnitGroupAdd(gv_towerDefenseCivilianCGroup, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCivilianGroupC_Init () {
    gt_TowerDefenseCivilianGroupC = TriggerCreate("gt_TowerDefenseCivilianGroupC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Van Appears
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseVanAppears_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto86CC79CB_n = 7;
    int auto86CC79CB_i;
    unitgroup auto66E7310E_g;
    int auto66E7310E_u;
    unit auto66E7310E_var;

    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_towerDefenseWeAreLeavingTimer) > 298.0))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseLoadCivilians = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins6", -1), StringExternal("Param/Value/BFF3F12C"), StringExternal("Param/Value/71205D7A"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/FC4679DA"));
    ObjectiveCreate(StringExternal("Param/Value/5DA6DBAC"), StringExternal("Param/Value/94736825"), c_objectiveStateActive, true);
    gv_towerDefenseEscortSwatVanObjective = ObjectiveLastCreated();
    ObjectiveShow(gv_towerDefenseEscortSwatVanObjective, PlayerGroupAll(), true);
    gv_towerDefenseVanUnit = UnitFromId(1540169663);
    libNtve_gf_ShowHideUnit(UnitFromId(1540169663), true);
    libNtve_gf_PauseUnit(gv_towerDefenseVanUnit, false);
    UnitSetOwner(UnitFromId(1540169663), gv_pLAYER_02_POLICE, true);
    UnitSetState(UnitFromId(1540169663), c_unitStateStoppable, false);
    UnitSetState(UnitFromId(1540169663), c_unitStateFidget, false);
    for (auto86CC79CB_i = 1; auto86CC79CB_i <= auto86CC79CB_n; auto86CC79CB_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryHeavy", 0, gv_pLAYER_02_POLICE, PointFromId(786343976));
        UnitGroupAdd(gv_towerDefenseGunnerGroup, UnitLastCreated());
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingDiamond", UnitGetPosition(gv_towerDefenseVanUnit), ColorWithAlpha(56.86, 78.04, 93.33, 0.00), 999.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/65A7895C"));
    PingSetScale(PingLastCreated(), 0.5);
    gv_towerDefenseVanPing = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_towerDefenseVanUnit);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1072451993)), c_orderQueueReplace);
    auto66E7310E_g = gv_towerDefenseGunnerGroup;
    auto66E7310E_u = UnitGroupCount(auto66E7310E_g, c_unitCountAll);
    for (;; auto66E7310E_u -= 1) {
        auto66E7310E_var = UnitGroupUnitFromEnd(auto66E7310E_g, auto66E7310E_u);
        if (auto66E7310E_var == null) { break; }
        UnitIssueOrder(auto66E7310E_var, OrderTargetingUnit(AbilityCommand("move", 0), gv_towerDefenseVanUnit), c_orderQueueReplace);
    }
    libNtve_gf_ShareVisionofUnit(gv_towerDefenseVanUnit, true, gv_pLAYER_01_USER);
    TriggerExecute(gt_TipEvacuation, true, false);
    Wait(1.0, c_timeGame);
    TriggerEnable(gt_TowerDefenseVanDamaged, true);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(6.0, c_timeReal);
    libVCUI_gf_HideCampaignDirective();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseVanAppears_Init () {
    gt_TowerDefenseVanAppears = TriggerCreate("gt_TowerDefenseVanAppears_Func");
    TriggerEnable(gt_TowerDefenseVanAppears, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseVanAppears, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Infantry Follows
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseInfantryFollows_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto75530982_g;
    int auto75530982_u;
    unit auto75530982_var;

    // Conditions
    if (testConds) {
        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto75530982_g = gv_towerDefenseGunnerGroup;
    auto75530982_u = UnitGroupCount(auto75530982_g, c_unitCountAll);
    for (;; auto75530982_u -= 1) {
        auto75530982_var = UnitGroupUnitFromEnd(auto75530982_g, auto75530982_u);
        if (auto75530982_var == null) { break; }
        UnitIssueOrder(auto75530982_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_towerDefenseVanUnit)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseInfantryFollows_Init () {
    gt_TowerDefenseInfantryFollows = TriggerCreate("gt_TowerDefenseInfantryFollows_Func");
    TriggerAddEventTimePeriodic(gt_TowerDefenseInfantryFollows, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilians A Run
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCiviliansARun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6214805E_g;
    int auto6214805E_u;
    unit auto6214805E_var;
    unitgroup auto847515B8_g;
    int auto847515B8_u;
    unit auto847515B8_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_POLICE))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDestroy(gt_TowerDefenseInfantryFollows);
    gv_towerDefenseLoadCivilians = true;
    auto6214805E_g = UnitGroupFilter(null, gv_pLAYER_02_POLICE, gv_towerDefenseGunnerGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6214805E_u = UnitGroupCount(auto6214805E_g, c_unitCountAll);
    for (;; auto6214805E_u -= 1) {
        auto6214805E_var = UnitGroupUnitFromEnd(auto6214805E_g, auto6214805E_u);
        if (auto6214805E_var == null) { break; }
        libNtve_gf_RescueUnit(auto6214805E_var, gv_pLAYER_01_USER, true);
    }
    RegionSetCenter(RegionFromId(294), UnitGetPosition(gv_towerDefenseVanUnit));
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2SwatVanAirBrakes", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins7", -1), StringExternal("Param/Value/2A9C00AB"), StringExternal("Param/Value/70A0DDED"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    auto847515B8_g = UnitGroupFilter(null, gv_pLAYER_03_CIVILIANS, gv_towerDefenseCivilianAGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto847515B8_u = UnitGroupCount(auto847515B8_g, c_unitCountAll);
    for (;; auto847515B8_u -= 1) {
        auto847515B8_var = UnitGroupUnitFromEnd(auto847515B8_g, auto847515B8_u);
        if (auto847515B8_var == null) { break; }
        UnitIssueOrder(auto847515B8_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_towerDefenseVanUnit)), c_orderQueueReplace);
        Wait(2.5, c_timeGame);
    }
    TriggerQueueExit();
    Wait(5.0, c_timeGame);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins8", -1), StringExternal("Param/Value/98B54FCB"), StringExternal("Param/Value/2864915E"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerExecute(gt_TowerDefenseVanMoves, true, false);
    Wait(5.0, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarrenRodgersPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Darren4", -1), StringExternal("Param/Value/E1579E05"), StringExternal("Param/Value/8C92B5BF"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    Wait(5.0, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2SergeantX5", -1), StringExternal("Param/Value/E5434938"), StringExternal("Param/Value/EC2FDAC2"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    Wait(0.75, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2SergeantX6", -1), StringExternal("Param/Value/B82C368D"), StringExternal("Param/Value/D570EE0B"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    lib1926661B_gf_FlashCheckpointReminder();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCiviliansARun_Init () {
    gt_TowerDefenseCiviliansARun = TriggerCreate("gt_TowerDefenseCiviliansARun_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseCiviliansARun, null, RegionFromId(293), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilians B Run
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCiviliansBRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto933F465A_g;
    int auto933F465A_u;
    unit auto933F465A_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_POLICE))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianADone == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseLoadCivilians = true;
    RegionSetCenter(RegionFromId(294), UnitGetPosition(gv_towerDefenseVanUnit));
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2SwatVanAirBrakes", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins11", -1), StringExternal("Param/Value/66A7BD51"), StringExternal("Param/Value/5DCC904D"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    auto933F465A_g = UnitGroupFilter(null, gv_pLAYER_03_CIVILIANS, gv_towerDefenseCivilianBGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto933F465A_u = UnitGroupCount(auto933F465A_g, c_unitCountAll);
    for (;; auto933F465A_u -= 1) {
        auto933F465A_var = UnitGroupUnitFromEnd(auto933F465A_g, auto933F465A_u);
        if (auto933F465A_var == null) { break; }
        UnitIssueOrder(auto933F465A_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_towerDefenseVanUnit)), c_orderQueueReplace);
        Wait(2.5, c_timeGame);
    }
    TriggerQueueExit();
    TriggerQueueEnter();
    Wait(5.0, c_timeGame);
    gv_towerDefenseCivilianPickupB = 1;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins12", -1), StringExternal("Param/Value/E3856C70"), StringExternal("Param/Value/5A721C18"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerExecute(gt_TowerDefenseVanMoves, true, false);
    lib1926661B_gf_FlashCheckpointReminder();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCiviliansBRun_Init () {
    gt_TowerDefenseCiviliansBRun = TriggerCreate("gt_TowerDefenseCiviliansBRun_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseCiviliansBRun, null, RegionFromId(293), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilians C Run
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCiviliansCRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1D2B9CC5_g;
    int auto1D2B9CC5_u;
    unit auto1D2B9CC5_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_POLICE))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianBDone == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseLoadCivilians = true;
    RegionSetCenter(RegionFromId(294), UnitGetPosition(gv_towerDefenseVanUnit));
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2SwatVanAirBrakes", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    auto1D2B9CC5_g = UnitGroupFilter(null, gv_pLAYER_03_CIVILIANS, gv_towerDefenseCivilianCGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1D2B9CC5_u = UnitGroupCount(auto1D2B9CC5_g, c_unitCountAll);
    for (;; auto1D2B9CC5_u -= 1) {
        auto1D2B9CC5_var = UnitGroupUnitFromEnd(auto1D2B9CC5_g, auto1D2B9CC5_u);
        if (auto1D2B9CC5_var == null) { break; }
        UnitIssueOrder(auto1D2B9CC5_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_towerDefenseVanUnit)), c_orderQueueReplace);
        Wait(2.5, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    gv_towerDefenseCivilianPickupC = 1;
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins14", -1), StringExternal("Param/Value/262089AA"), StringExternal("Param/Value/EA08C440"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerExecute(gt_TowerDefenseVanMoves, true, false);
    lib1926661B_gf_FlashCheckpointReminder();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCiviliansCRun_Init () {
    gt_TowerDefenseCiviliansCRun = TriggerCreate("gt_TowerDefenseCiviliansCRun_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseCiviliansCRun, null, RegionFromId(293), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilians A Load
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCiviliansALoad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_towerDefenseLoadCivilians == true))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_CIVILIANS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), RegionRandomPoint(RegionFromId(295)), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("Hut_Load", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCiviliansALoad_Init () {
    gt_TowerDefenseCiviliansALoad = TriggerCreate("gt_TowerDefenseCiviliansALoad_Func");
    TriggerAddEventUnitRange(gt_TowerDefenseCiviliansALoad, null, UnitFromId(1540169663), 1.5, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilians B Load
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCiviliansBLoad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_towerDefenseLoadCivilians == true))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianADone == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_CIVILIANS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), RegionRandomPoint(RegionFromId(295)), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("Hut_Load", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCiviliansBLoad_Init () {
    gt_TowerDefenseCiviliansBLoad = TriggerCreate("gt_TowerDefenseCiviliansBLoad_Func");
    TriggerAddEventUnitRange(gt_TowerDefenseCiviliansBLoad, null, UnitFromId(1540169663), 1.5, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilians C Load
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCiviliansCLoad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_towerDefenseLoadCivilians == true))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianBDone == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_CIVILIANS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), RegionRandomPoint(RegionFromId(295)), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("Hut_Load", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCiviliansCLoad_Init () {
    gt_TowerDefenseCiviliansCLoad = TriggerCreate("gt_TowerDefenseCiviliansCLoad_Func");
    TriggerAddEventUnitRange(gt_TowerDefenseCiviliansCLoad, null, UnitFromId(1540169663), 1.5, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Van Moves
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseVanMoves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerDefenseLoadCivilians = false;
    SoundPlayForPlayer(SoundLink("M2SwatVanEngineStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(7.0, c_timeReal);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1320807256)), c_orderQueueReplace);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(134634046)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1312122316)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2121983328)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(388520363)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(142683559)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseVanMoves_Init () {
    gt_TowerDefenseVanMoves = TriggerCreate("gt_TowerDefenseVanMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Van Moves Back
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseVanMovesBack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("M2SwatVanEngineStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(7.0, c_timeReal);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(388520363)), c_orderQueueReplace);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2121983328)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1312122316)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(134634046)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1320807256)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1072451993)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseVanMovesBack_Init () {
    gt_TowerDefenseVanMovesBack = TriggerCreate("gt_TowerDefenseVanMovesBack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Van Stalls
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseVanStalls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_towerDefenseVanUnit == EventUnit()))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianPickupC == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2SwatVanStall", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/5C764831"));
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_TowerDefenseUnburrowStall, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins15", -1), StringExternal("Param/Value/D42F7245"), StringExternal("Param/Value/45E77F4C"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libVCUI_gf_HideCampaignDirective();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Sergeant21", -1), StringExternal("Param/Value/5C581720"), StringExternal("Param/Value/5FEF41BE"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    Wait(RandomInt(38, 43), c_timeReal);
    SoundPlayForPlayer(SoundLink("M2SwatVanEngineStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins17", -1), StringExternal("Param/Value/5A34F37D"), StringExternal("Param/Value/377476C9"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    Wait(4.0, c_timeReal);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2121983328)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(388520363)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_towerDefenseVanUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(142683559)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseVanStalls_Init () {
    gt_TowerDefenseVanStalls = TriggerCreate("gt_TowerDefenseVanStalls_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseVanStalls, null, RegionFromId(320), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilian Stand
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCivilianStand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB9A5C1F6_g;
    int autoB9A5C1F6_u;
    unit autoB9A5C1F6_var;
    unitgroup auto5E877687_g;
    int auto5E877687_u;
    unit auto5E877687_var;

    // Conditions
    if (testConds) {
        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB9A5C1F6_g = UnitGroup("UPLCivilianFemale", gv_pLAYER_02_POLICE, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB9A5C1F6_u = UnitGroupCount(autoB9A5C1F6_g, c_unitCountAll);
    for (;; autoB9A5C1F6_u -= 1) {
        autoB9A5C1F6_var = UnitGroupUnitFromEnd(autoB9A5C1F6_g, autoB9A5C1F6_u);
        if (autoB9A5C1F6_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(autoB9A5C1F6_var), "AnimGroupApply A A {} Instant");
    }
    auto5E877687_g = UnitGroup("UPLCivilianMale", gv_pLAYER_02_POLICE, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5E877687_u = UnitGroupCount(auto5E877687_g, c_unitCountAll);
    for (;; auto5E877687_u -= 1) {
        auto5E877687_var = UnitGroupUnitFromEnd(auto5E877687_g, auto5E877687_u);
        if (auto5E877687_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto5E877687_var), "AnimGroupApply A A {} Instant");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCivilianStand_Init () {
    gt_TowerDefenseCivilianStand = TriggerCreate("gt_TowerDefenseCivilianStand_Func");
    TriggerEnable(gt_TowerDefenseCivilianStand, false);
    TriggerAddEventTimePeriodic(gt_TowerDefenseCivilianStand, 0.3, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilians A Unload
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCiviliansAUnload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE29E762B_g;
    int autoE29E762B_u;
    unit autoE29E762B_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_POLICE))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianADone == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SoundWarning", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/8D11FC94"));
    MinimapPing(PlayerGroupAll(), PointFromId(142683559), 60.0, Color(100.00, 0.00, 0.00));
    Wait(4.0, c_timeReal);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 30.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("UPLGeneratorPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2DefNet6", -1), StringExternal("Param/Value/5AC83DEE"), StringExternal("Param/Value/BB2E3E38"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libVCUI_gf_HideCampaignDirective();
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 30.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins9", -1), StringExternal("Param/Value/613FD8DA"), StringExternal("Param/Value/A0864208"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
    TriggerQueueExit();
    TriggerExecute(gt_TowerDefenseTimerA, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    TriggerExecute(gt_TowerDefenseCivilianGroupB, true, false);
    SoundPlayForPlayer(SoundLink("M2SwatVanAirBrakes", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    Wait(3.0, c_timeReal);
    autoE29E762B_g = UnitGroup(null, gv_pLAYER_03_CIVILIANS, RegionFromId(295), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE29E762B_u = UnitGroupCount(autoE29E762B_g, c_unitCountAll);
    for (;; autoE29E762B_u -= 1) {
        autoE29E762B_var = UnitGroupUnitFromEnd(autoE29E762B_g, autoE29E762B_u);
        if (autoE29E762B_var == null) { break; }
        SoundPlayForPlayer(SoundLink("Medivac_Unload", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        UnitSetPosition(autoE29E762B_var, UnitGetPosition(gv_towerDefenseVanUnit), false);
        UnitIssueOrder(autoE29E762B_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(299))), c_orderQueueReplace);
        Wait(1.25, c_timeGame);
    }
    gv_towerDefenseCivilianADone = 1;
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 30.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins10", -1), StringExternal("Param/Value/7D0F2DA5"), StringExternal("Param/Value/FDFBA0AE"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
    TriggerQueueExit();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", PointFromId(1043486722), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 50000.0, 270.0);
    gv_towerDefenseTunnelNorthPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/41F6307F"));
    libVCMI_gf_CreateObjectivePing(false, PointFromId(1104931948), StringExternal("Param/Value/4F4BA44F"));
    gv_towerDefenseTunnelSouthPing = PingLastCreated();
    TriggerExecute(gt_TowerDefenseVanMovesBack, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCiviliansAUnload_Init () {
    gt_TowerDefenseCiviliansAUnload = TriggerCreate("gt_TowerDefenseCiviliansAUnload_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseCiviliansAUnload, null, RegionFromId(296), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilians B Unload
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCiviliansBUnload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5974FB4E_g;
    int auto5974FB4E_u;
    unit auto5974FB4E_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_POLICE))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianPickupB == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    TriggerExecute(gt_TowerDefenseCivilianGroupC, true, false);
    SoundPlayForPlayer(SoundLink("M2SwatVanAirBrakes", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    Wait(3.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("Medivac_Unload", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    auto5974FB4E_g = UnitGroup(null, gv_pLAYER_03_CIVILIANS, RegionFromId(295), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5974FB4E_u = UnitGroupCount(auto5974FB4E_g, c_unitCountAll);
    for (;; auto5974FB4E_u -= 1) {
        auto5974FB4E_var = UnitGroupUnitFromEnd(auto5974FB4E_g, auto5974FB4E_u);
        if (auto5974FB4E_var == null) { break; }
        SoundPlayForPlayer(SoundLink("Medivac_Unload", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        UnitSetPosition(auto5974FB4E_var, UnitGetPosition(gv_towerDefenseVanUnit), false);
        UnitIssueOrder(auto5974FB4E_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(299))), c_orderQueueReplace);
        Wait(1.25, c_timeGame);
    }
    gv_towerDefenseCivilianBDone = 1;
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins13", -1), StringExternal("Param/Value/93500453"), StringExternal("Param/Value/DABAA0E9"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerExecute(gt_TowerDefenseVanMovesBack, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCiviliansBUnload_Init () {
    gt_TowerDefenseCiviliansBUnload = TriggerCreate("gt_TowerDefenseCiviliansBUnload_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseCiviliansBUnload, null, RegionFromId(296), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Defense Civilians C Unload
//--------------------------------------------------------------------------------------------------
bool gt_TowerDefenseCiviliansCUnload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA2B750AD_g;
    int autoA2B750AD_u;
    unit autoA2B750AD_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_POLICE))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwatVan"))) {
            return false;
        }

        if (!((gv_towerDefenseSectionActive == 1))) {
            return false;
        }

        if (!((gv_towerDefenseCivilianPickupC == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_towerDefenseVanUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2SwatVanAirBrakes", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    Wait(3.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("Medivac_Unload", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    autoA2B750AD_g = UnitGroup(null, gv_pLAYER_03_CIVILIANS, RegionFromId(295), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA2B750AD_u = UnitGroupCount(autoA2B750AD_g, c_unitCountAll);
    for (;; autoA2B750AD_u -= 1) {
        autoA2B750AD_var = UnitGroupUnitFromEnd(autoA2B750AD_g, autoA2B750AD_u);
        if (autoA2B750AD_var == null) { break; }
        SoundPlayForPlayer(SoundLink("Medivac_Unload", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        UnitSetPosition(autoA2B750AD_var, UnitGetPosition(gv_towerDefenseVanUnit), false);
        UnitIssueOrder(autoA2B750AD_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(300))), c_orderQueueReplace);
        Wait(1.25, c_timeGame);
    }
    gv_towerDefenseCivilianCDone = 1;
    TriggerEnable(gt_DefeatVanKilled, false);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MilesJenkinsPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("M2Jenkins18", -1), StringExternal("Param/Value/1BB5FAF0"), StringExternal("Param/Value/F2611D3D"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    ObjectiveSetState(gv_towerDefenseEscortSwatVanObjective, c_objectiveStateCompleted);
    PingDestroy(gv_towerDefenseVanPing);
    SoundPlayForPlayer(SoundLink("SoundDirective", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/131AD3DC"));
    Wait(6.0, c_timeGame);
    libVCUI_gf_HideCampaignDirective();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TowerDefenseCiviliansCUnload_Init () {
    gt_TowerDefenseCiviliansCUnload = TriggerCreate("gt_TowerDefenseCiviliansCUnload_Func");
    TriggerAddEventUnitRegion(gt_TowerDefenseCiviliansCUnload, null, RegionFromId(296), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Cinematic Setup
//--------------------------------------------------------------------------------------------------
bool gt_SewerCinematicSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    gv_sewerCinematic = 1;
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "M2SewerAmbience", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_POLICE);
    PlayerSetState(1, c_playerStateXPGain, false);
    PlayerSetState(2, c_playerStateXPGain, false);
    TriggerExecute(gt_SewerCinematic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerCinematicSetup_Init () {
    gt_SewerCinematicSetup = TriggerCreate("gt_SewerCinematicSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_SewerCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, gt_SewerCinematicCleanup, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1502794679), 0.0, -1, 10.0, true);
    UnitIssueOrder(UnitFromId(861931838), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(9))), c_orderQueueReplace);
    Wait(0.1, c_timeReal);
    SoundPlayForPlayer(SoundLink("M2HKGrowl1", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(2.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/038ADFAD"), StringExternal("Param/Value/A49EFAEE"), 8.0, SoundLink("TextCrawlType", 0), SoundLink("TextCrawlType", 0));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1502794679), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(689565660), 5.0, -1, 0.0, true);
    Wait(5.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(539721963), 5.0, -1, 0.0, true);
    Wait(5.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1085440543), 5.0, -1, 50.0, true);
    Wait(5.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(467127649), 4.0, -1, 20.0, true);
    Wait(4.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(33600111), 4.0, -1, 0.0, true);
    Wait(4.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1791573544), 4.0, -1, 0.0, true);
    Wait(4.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(377677698), 7.0, -1, 50.0, true);
    UnitIssueOrder(gv_mYRADAVIS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(102290453)), c_orderQueueReplace);
    Wait(7.0, c_timeReal);
    TriggerExecute(gt_SewerCinematicCleanup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerCinematic_Init () {
    gt_SewerCinematic = TriggerCreate("gt_SewerCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Cinematic Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_SewerCinematicCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetState(1, c_playerStateXPGain, true);
    PlayerSetState(2, c_playerStateXPGain, true);
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    gv_inCinematic = false;
    gv_sewerCinematic = 0;
    UIHideTextCrawl(PlayerGroupAll());
    TriggerExecute(gt_SewerSectionStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerCinematicCleanup_Init () {
    gt_SewerCinematicCleanup = TriggerCreate("gt_SewerCinematicCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Escape Cinematic Setup
//--------------------------------------------------------------------------------------------------
bool gt_SewerEscapeCinematicSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    gv_sewerCinematic2 = 1;
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_KillModel(gv_sewerSectionActor);
    TextTagDestroy(gv_sewerSectionTextTag);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    Wait(1.0, c_timeReal);
    lib1926661B_gf_ShowHideHeroPanel(0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 3.0);
    libNtve_gf_GlobalCinematicSetting(true);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_POLICE);
    PlayerSetState(1, c_playerStateXPGain, false);
    PlayerSetState(2, c_playerStateXPGain, false);
    TriggerExecute(gt_SewerEscapeCinematicUnits, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerEscapeCinematicSetup_Init () {
    gt_SewerEscapeCinematicSetup = TriggerCreate("gt_SewerEscapeCinematicSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Escape Cinematic Units
//--------------------------------------------------------------------------------------------------
bool gt_SewerEscapeCinematicUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA6C98292_g;
    int autoA6C98292_u;
    unit autoA6C98292_var;
    unitgroup autoFA6D01FB_g;
    int autoFA6D01FB_u;
    unit autoFA6D01FB_var;
    unitgroup auto3111699F_g;
    int auto3111699F_u;
    unit auto3111699F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA6C98292_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA6C98292_u = UnitGroupCount(autoA6C98292_g, c_unitCountAll);
    for (;; autoA6C98292_u -= 1) {
        autoA6C98292_var = UnitGroupUnitFromEnd(autoA6C98292_g, autoA6C98292_u);
        if (autoA6C98292_var == null) { break; }
        UnitRemove(autoA6C98292_var);
    }
    autoFA6D01FB_g = UnitGroup(null, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoFA6D01FB_u = UnitGroupCount(autoFA6D01FB_g, c_unitCountAll);
    for (;; autoFA6D01FB_u -= 1) {
        autoFA6D01FB_var = UnitGroupUnitFromEnd(autoFA6D01FB_g, autoFA6D01FB_u);
        if (autoFA6D01FB_var == null) { break; }
        UnitRemove(autoFA6D01FB_var);
    }
    auto3111699F_g = UnitGroup(null, gv_pLAYER_15_ROACHES_HOSTILE, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto3111699F_u = UnitGroupCount(auto3111699F_g, c_unitCountAll);
    for (;; auto3111699F_u -= 1) {
        auto3111699F_var = UnitGroupUnitFromEnd(auto3111699F_g, auto3111699F_u);
        if (auto3111699F_var == null) { break; }
        UnitRemove(auto3111699F_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HunterKiller", c_unitCreateIgnorePlacement, gv_pLAYER_06_UNKNOWNCREATURES_NEUTRAL, RegionRandomPoint(RegionFromId(9)));
    libNtve_gf_ShowHideUnit(UnitFromId(265082614), false);
    libNtve_gf_ShowHideUnit(UnitFromId(2056514458), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1079970007), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1065187463), true);
    gv_bossHKUnit = UnitLastCreated();
    UnitSetPosition(gv_mYRADAVIS, PointFromId(2098847302), false);
    UnitIssueOrder(gv_mYRADAVIS, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    TriggerExecute(gt_SewerEscapeCinematic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerEscapeCinematicUnits_Init () {
    gt_SewerEscapeCinematicUnits = TriggerCreate("gt_SewerEscapeCinematicUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Escape Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_SewerEscapeCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoACD3F7A9_n = 10;
    int autoACD3F7A9_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, gt_SewerEscapeCinematicCleanup, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(200727576), 0.0, -1, 10.0, true);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(5.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("M2SewerDetonate", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    DataTableSetSound(true, "detonate", SoundLastPlayed());
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.1, 0.03, 100.0, 15.0);
    for (autoACD3F7A9_i = 1; autoACD3F7A9_i <= autoACD3F7A9_n; autoACD3F7A9_i += 1) {
        libNtve_gf_CreateActorAtPoint("DefaultExplosionTerranLarge", RegionRandomPoint(RegionFromId(8)));
        Wait(0.05, c_timeGame);
    }
    UnitKill(UnitFromId(1469946482));
    UnitKill(UnitFromId(1594153776));
    UnitKill(UnitFromId(779480647));
    UnitKill(UnitFromId(1823061732));
    UnitKill(UnitFromId(1079970007));
    UnitKill(UnitFromId(1065187463));
    Wait(2.5, c_timeReal);
    SoundPlayForPlayer(SoundLink("M2SewerQuake", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    DataTableSetSound(true, "quake", SoundLastPlayed());
    UnitIssueOrder(gv_mYRADAVIS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(646521322)), c_orderQueueReplace);
    Wait(2.5, c_timeReal);
    UnitIssueOrder(gv_bossHKUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(8))), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("M2HKGrowl1", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    DataTableSetSound(true, "growl", SoundLastPlayed());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2094127051), 4.0, -1, 20.0, true);
    TriggerEnable(gt_SewerSectionHideFallingDebris, false);
    TriggerStop(gt_SewerSectionHideFallingDebris);
    TriggerDestroy(gt_SewerSectionHideFallingDebris);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(7), "SpaceFallingDebris");
    Wait(7.0, c_timeReal);
    TriggerExecute(gt_SewerEscapeCinematicCleanup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerEscapeCinematic_Init () {
    gt_SewerEscapeCinematic = TriggerCreate("gt_SewerEscapeCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewer Escape Cinematic Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_SewerEscapeCinematicCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_ShowHideHeroPanel(1, true);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundPlayForPlayer(SoundLink("M2SewerCollapse", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    DataTableSetSound(true, "collapse", SoundLastPlayed());
    SoundPlayForPlayer(SoundLink("M2HKDeath1", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    DataTableSetSound(true, "death", SoundLastPlayed());
    Wait(8.0, c_timeReal);
    PlayerSetState(1, c_playerStateXPGain, true);
    PlayerSetState(2, c_playerStateXPGain, true);
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    VisFillArea(gv_pLAYER_01_USER, RegionFromId(30), c_fillTypeMasked, false);
    VisFillArea(gv_pLAYER_01_USER, RegionFromId(30), c_fillTypeHidden, false);
    gv_inCinematic = false;
    gv_sewerCinematic2 = 0;
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    SoundStop(DataTableGetSound(true, "detonate"), true);
    SoundStop(DataTableGetSound(true, "quake"), true);
    SoundStop(DataTableGetSound(true, "collapse"), true);
    SoundStop(DataTableGetSound(true, "death"), true);
    SoundStop(DataTableGetSound(true, "growl"), true);
    CameraShakeStop(gv_pLAYER_01_USER);
    TriggerEnable(gt_SewerSectionHideFallingDebris, false);
    TriggerStop(gt_SewerSectionHideFallingDebris);
    TriggerDestroy(gt_SewerSectionHideFallingDebris);
    TriggerExecute(gt_UPLHoldoutSectionStart, true, false);
    UnitRemove(gv_bossHKUnit);
    TriggerStop(gt_BossHKEggs);
    TriggerDestroy(gt_BossHKEggs);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewerEscapeCinematicCleanup_Init () {
    gt_SewerEscapeCinematicCleanup = TriggerCreate("gt_SewerEscapeCinematicCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Cinematic Setup
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutCinematicSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    gv_holdoutCinematic = 1;
    CinematicFade(false, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    lib1926661B_gf_ShowHideHeroPanel(1, false);
    lib1926661B_gf_ShowHideHeroPanel(2, false);
    lib1926661B_gf_ShowHideHeroPanel(3, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    Wait(0.1, c_timeReal);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_POLICE);
    PlayerSetState(1, c_playerStateXPGain, false);
    PlayerSetState(2, c_playerStateXPGain, false);
    FogSetStartHeight(1.0);
    TriggerStop(gt_UPLHoldoutFirstAttack1);
    TriggerStop(gt_UPLHoldoutFirstAttack2);
    TriggerStop(gt_UPLHoldoutFirstAttack3);
    TriggerStop(gt_UPLHoldoutSecondAttack1);
    TriggerStop(gt_UPLHoldoutSecondAttack2);
    TriggerStop(gt_UPLHoldoutSecondAttack3);
    TriggerStop(gt_UPLHoldoutSecondAttack4);
    TriggerStop(gt_UPLHoldoutSecondAttack5);
    TriggerStop(gt_UPLHoldoutSecondAttack6);
    TriggerStop(gt_UPLHoldoutSecondAttackOngoing1);
    TriggerStop(gt_UPLHoldoutSecondAttackOngoing2);
    TriggerExecute(gt_HoldoutCinematicUnits, true, false);
    TriggerExecute(gt_HoldoutCinematic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutCinematicSetup_Init () {
    gt_HoldoutCinematicSetup = TriggerCreate("gt_HoldoutCinematicSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Cinematic Units
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutCinematicUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto016C9A16_g;
    int auto016C9A16_u;
    unit auto016C9A16_var;
    unitgroup autoE28C92AC_g;
    int autoE28C92AC_u;
    unit autoE28C92AC_var;
    unitgroup autoAA1526CA_g;
    int autoAA1526CA_u;
    unit autoAA1526CA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto016C9A16_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto016C9A16_u = UnitGroupCount(auto016C9A16_g, c_unitCountAll);
    for (;; auto016C9A16_u -= 1) {
        auto016C9A16_var = UnitGroupUnitFromEnd(auto016C9A16_g, auto016C9A16_u);
        if (auto016C9A16_var == null) { break; }
        UnitRemove(auto016C9A16_var);
    }
    autoE28C92AC_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE28C92AC_u = UnitGroupCount(autoE28C92AC_g, c_unitCountAll);
    for (;; autoE28C92AC_u -= 1) {
        autoE28C92AC_var = UnitGroupUnitFromEnd(autoE28C92AC_g, autoE28C92AC_u);
        if (autoE28C92AC_var == null) { break; }
        UnitIssueOrder(autoE28C92AC_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_ShowHideUnit(autoE28C92AC_var, false);
        libNtve_gf_PauseUnit(autoE28C92AC_var, true);
        UnitGroupAdd(gv_holdout_PausedPlayerUnits, autoE28C92AC_var);
    }
    autoAA1526CA_g = UnitGroup(null, 13, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoAA1526CA_u = UnitGroupCount(autoAA1526CA_g, c_unitCountAll);
    for (;; autoAA1526CA_u -= 1) {
        autoAA1526CA_var = UnitGroupUnitFromEnd(autoAA1526CA_g, autoAA1526CA_u);
        if (autoAA1526CA_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoAA1526CA_var, true);
        UnitSetOwner(autoAA1526CA_var, gv_pLAYER_02_POLICE, true);
        libNtve_gf_MakeUnitFacePoint(autoAA1526CA_var, libNtve_gf_PointFacingAngle(PointFromId(1488016846), 270.0), 0.0);
        UnitSetState(autoAA1526CA_var, c_unitStateTurnSuppressed, false);
        UnitSetState(autoAA1526CA_var, c_unitStateFidget, false);
    }
    UnitBehaviorRemove(UnitFromId(627572377), "UPLPoliceOfficerShotgun", 1);
    UnitBehaviorAdd(UnitFromId(627572377), "UPLPoliceOfficerPistol", UnitFromId(627572377), 1);
    UnitBehaviorAdd(UnitFromId(1190318438), "UPLPoliceCruiserSirenLights", UnitFromId(1190318438), 1);
    UnitBehaviorAdd(UnitFromId(858825566), "UPLPoliceOfficerShotgun", UnitFromId(858825566), 1);
    UnitBehaviorAdd(UnitFromId(1368088584), "UPLPoliceOfficerPistol", UnitFromId(1368088584), 1);
    UnitBehaviorRemove(UnitFromId(1944041278), "UPLRiotOfficerShotgun", 1);
    UnitBehaviorRemove(UnitFromId(2068884405), "UPLRiotOfficerShotgun", 1);
    UnitBehaviorAdd(UnitFromId(1944041278), "UPLRiotOfficerRifle", UnitFromId(1944041278), 1);
    UnitBehaviorAdd(UnitFromId(2068884405), "UPLRiotOfficerRifle", UnitFromId(2068884405), 1);
    UnitSetTeamColorIndex(UnitFromId(1368088584), PlayerGetColorIndex(14, false));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutCinematicUnits_Init () {
    gt_HoldoutCinematicUnits = TriggerCreate("gt_HoldoutCinematicUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Aim
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutAim_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto79BA896A_g;
    int auto79BA896A_u;
    unit auto79BA896A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("M2GunsPrimed", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto79BA896A_g = UnitGroup(null, gv_pLAYER_02_POLICE, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto79BA896A_u = UnitGroupCount(auto79BA896A_g, c_unitCountAll);
    for (;; auto79BA896A_u -= 1) {
        auto79BA896A_var = UnitGroupUnitFromEnd(auto79BA896A_g, auto79BA896A_u);
        if (auto79BA896A_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto79BA896A_var), "AnimGroupApply Ready Ready");
        Wait(0.06, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutAim_Init () {
    gt_HoldoutAim = TriggerCreate("gt_HoldoutAim_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA1778BB7_g;
    int autoA1778BB7_u;
    unit autoA1778BB7_var;
    unitgroup auto9A522409_g;
    int auto9A522409_u;
    unit auto9A522409_var;
    unitgroup autoEFEF5C05_g;
    int autoEFEF5C05_u;
    unit autoEFEF5C05_var;
    unitgroup auto78AC700A_g;
    int auto78AC700A_u;
    unit auto78AC700A_var;
    unitgroup auto1A37C799_g;
    int auto1A37C799_u;
    unit auto1A37C799_var;
    unitgroup autoB9EF5D03_g;
    int autoB9EF5D03_u;
    unit autoB9EF5D03_var;
    unitgroup auto6C3CBB17_g;
    int auto6C3CBB17_u;
    unit auto6C3CBB17_var;
    unitgroup auto440902D3_g;
    int auto440902D3_u;
    unit auto440902D3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(RegionFromId(282));
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    UISetMiniMapBounds(PlayerGroupAll(), RegionPlayableMap());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1070536921), 0.0, -1, 10.0, true);
    autoA1778BB7_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA1778BB7_u = UnitGroupCount(autoA1778BB7_g, c_unitCountAll);
    for (;; autoA1778BB7_u -= 1) {
        autoA1778BB7_var = UnitGroupUnitFromEnd(autoA1778BB7_g, autoA1778BB7_u);
        if (autoA1778BB7_var == null) { break; }
        UnitRemove(autoA1778BB7_var);
    }
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("M2RoachesInTheFog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    auto9A522409_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9A522409_u = UnitGroupCount(auto9A522409_g, c_unitCountAll);
    for (;; auto9A522409_u -= 1) {
        auto9A522409_var = UnitGroupUnitFromEnd(auto9A522409_g, auto9A522409_u);
        if (auto9A522409_var == null) { break; }
        UnitRemove(auto9A522409_var);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2083401707), 0.0, -1, 10.0, true);
    Wait(3.0, c_timeReal);
    autoEFEF5C05_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEFEF5C05_u = UnitGroupCount(autoEFEF5C05_g, c_unitCountAll);
    for (;; autoEFEF5C05_u -= 1) {
        autoEFEF5C05_var = UnitGroupUnitFromEnd(autoEFEF5C05_g, autoEFEF5C05_u);
        if (autoEFEF5C05_var == null) { break; }
        UnitRemove(autoEFEF5C05_var);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(941151419), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1213494101), 6.0, -1, 10.0, true);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_HoldoutAim, true, false);
    Wait(5.0, c_timeReal);
    auto78AC700A_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto78AC700A_u = UnitGroupCount(auto78AC700A_g, c_unitCountAll);
    for (;; auto78AC700A_u -= 1) {
        auto78AC700A_var = UnitGroupUnitFromEnd(auto78AC700A_g, auto78AC700A_u);
        if (auto78AC700A_var == null) { break; }
        UnitRemove(auto78AC700A_var);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(71365408), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(507131917), 3.0, -1, 10.0, true);
    Wait(3.0, c_timeReal);
    auto1A37C799_g = UnitGroup(null, gv_pLAYER_04_UNKNOWNCREATURES, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1A37C799_u = UnitGroupCount(auto1A37C799_g, c_unitCountAll);
    for (;; auto1A37C799_u -= 1) {
        auto1A37C799_var = UnitGroupUnitFromEnd(auto1A37C799_g, auto1A37C799_u);
        if (auto1A37C799_var == null) { break; }
        UnitRemove(auto1A37C799_var);
    }
    autoB9EF5D03_g = UnitGroup(null, 14, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB9EF5D03_u = UnitGroupCount(autoB9EF5D03_g, c_unitCountAll);
    for (;; autoB9EF5D03_u -= 1) {
        autoB9EF5D03_var = UnitGroupUnitFromEnd(autoB9EF5D03_g, autoB9EF5D03_u);
        if (autoB9EF5D03_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB9EF5D03_var, true);
        UnitSetOwner(autoB9EF5D03_var, gv_pLAYER_04_UNKNOWNCREATURES, true);
        UnitIssueOrder(autoB9EF5D03_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1562535463)), c_orderQueueReplace);
    }
    auto6C3CBB17_g = UnitGroup(null, 14, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto6C3CBB17_u = UnitGroupCount(auto6C3CBB17_g, c_unitCountAll);
    for (;; auto6C3CBB17_u -= 1) {
        auto6C3CBB17_var = UnitGroupUnitFromEnd(auto6C3CBB17_g, auto6C3CBB17_u);
        if (auto6C3CBB17_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6C3CBB17_var, true);
        UnitSetOwner(auto6C3CBB17_var, gv_pLAYER_04_UNKNOWNCREATURES, true);
        UnitIssueOrder(auto6C3CBB17_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1562535463)), c_orderQueueReplace);
    }
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_peters, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), "", "Talk", SoundLink("M2Sergeant19", -1), StringExternal("Param/Value/F6B12244"), StringExternal("Param/Value/EA04B7E9"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1213494101), 0.0, -1, 10.0, true);
    gf_SendTransmissionFromUnit(gv_mYRADAVIS, SoundLink("M2Davis64", -1), StringExternal("Param/Value/FA46D233"), false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "M2Part1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerStop(gt_HoldoutAim);
    TriggerDestroy(gt_HoldoutAim);
    auto440902D3_g = UnitGroup(null, gv_pLAYER_02_POLICE, RegionFromId(282), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto440902D3_u = UnitGroupCount(auto440902D3_g, c_unitCountAll);
    for (;; auto440902D3_u -= 1) {
        auto440902D3_var = UnitGroupUnitFromEnd(auto440902D3_g, auto440902D3_u);
        if (auto440902D3_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto440902D3_var, "AnimGroupRemove Ready");
        libNtve_gf_SendActorMessageToUnit(auto440902D3_var, "Signal ApplyReady");
        UnitSetState(auto440902D3_var, c_unitStateTurnSuppressed, true);
        UnitSetState(auto440902D3_var, c_unitStateFidget, true);
    }
    Wait(2.0, c_timeReal);
    UnitKill(UnitFromId(1190318438));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2083401707), 0.0, -1, 10.0, true);
    FogSetStartHeight(-2.0);
    CinematicFade(false, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_HoldoutCinematicCleanup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutCinematic_Init () {
    gt_HoldoutCinematic = TriggerCreate("gt_HoldoutCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Cinematic Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutCinematicCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto379A0143_g;
    int auto379A0143_u;
    unit auto379A0143_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetState(1, c_playerStateXPGain, true);
    PlayerSetState(2, c_playerStateXPGain, true);
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    gv_inCinematic = false;
    gv_holdoutCinematic = 0;
    UnitSetState(UnitFromId(255013863), c_unitStateFidget, true);
    RegionPlayableMapSet(RegionFromId(281));
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    CameraSetBounds(PlayerGroupAlliance(c_playerGroupEnemy, gv_pLAYER_01_USER), RegionEntireMap(), true);
    UISetMiniMapBounds(PlayerGroupAll(), RegionPlayableMap());
    auto379A0143_g = UnitGroup("InfantryMortar", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto379A0143_u = UnitGroupCount(auto379A0143_g, c_unitCountAll);
    for (;; auto379A0143_u -= 1) {
        auto379A0143_var = UnitGroupUnitFromEnd(auto379A0143_g, auto379A0143_u);
        if (auto379A0143_var == null) { break; }
        UnitSetTeamColorIndex(auto379A0143_var, 0);
    }
    TriggerExecute(gt_TowerDefenseSectionBegins, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutCinematicCleanup_Init () {
    gt_HoldoutCinematicCleanup = TriggerCreate("gt_HoldoutCinematicCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto857487A4_g;
    int auto857487A4_u;
    unit auto857487A4_var;
    unitgroup auto6E9A5D83_g;
    int auto6E9A5D83_u;
    unit auto6E9A5D83_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    lib1926661B_gf_ShowHideHeroPanel(1, false);
    lib1926661B_gf_ShowHideHeroPanel(2, false);
    lib1926661B_gf_ShowHideHeroPanel(3, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto857487A4_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto857487A4_u = UnitGroupCount(auto857487A4_g, c_unitCountAll);
    for (;; auto857487A4_u -= 1) {
        auto857487A4_var = UnitGroupUnitFromEnd(auto857487A4_g, auto857487A4_u);
        if (auto857487A4_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto857487A4_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto857487A4_var);
            libNtve_gf_PauseUnit(auto857487A4_var, true);
        }

    }
    AITimePause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto6E9A5D83_g = gv_cinematicHiddenUnits;
    auto6E9A5D83_u = UnitGroupCount(auto6E9A5D83_g, c_unitCountAll);
    for (;; auto6E9A5D83_u -= 1) {
        auto6E9A5D83_var = UnitGroupUnitFromEnd(auto6E9A5D83_g, auto6E9A5D83_u);
        if (auto6E9A5D83_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6E9A5D83_var, false);
    }
    VisExploreArea(gv_pLAYER_04_UNKNOWNCREATURES, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_09_UNKNOWNCREATURES, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_15_ROACHES_HOSTILE, RegionEntireMap(), false, false);
    VisFillArea(gv_pLAYER_04_UNKNOWNCREATURES, RegionEntireMap(), c_fillTypeFogged, false);
    VisFillArea(gv_pLAYER_09_UNKNOWNCREATURES, RegionEntireMap(), c_fillTypeFogged, false);
    VisFillArea(gv_pLAYER_15_ROACHES_HOSTILE, RegionEntireMap(), c_fillTypeFogged, false);
    VisFillArea(gv_pLAYER_04_UNKNOWNCREATURES, RegionEntireMap(), c_fillTypeHidden, false);
    VisFillArea(gv_pLAYER_09_UNKNOWNCREATURES, RegionEntireMap(), c_fillTypeHidden, false);
    VisFillArea(gv_pLAYER_15_ROACHES_HOSTILE, RegionEntireMap(), c_fillTypeHidden, false);
    VisFillArea(gv_pLAYER_04_UNKNOWNCREATURES, RegionEntireMap(), c_fillTypeUnexplored, false);
    VisFillArea(gv_pLAYER_09_UNKNOWNCREATURES, RegionEntireMap(), c_fillTypeUnexplored, false);
    VisFillArea(gv_pLAYER_15_ROACHES_HOSTILE, RegionEntireMap(), c_fillTypeUnexplored, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01PlayersUI_Init();
    gt_Init02Technology_Init();
    gt_Init04AbilitiesUnits_Init();
    gt_Init05MusicEnvironment_Init();
    gt_DavisDamageFreebie_Init();
    gt_NoZergorCivilianSelectable_Init();
    gt_PoliceCruiserExplosionSound_Init();
    gt_CARRDies_Init();
    gt_CARRBuilt_Init();
    gt_MortarsBuilt_Init();
    gt_InfoChip1_Init();
    gt_InfoChip2_Init();
    gt_InfoChip3_Init();
    gt_TipRD_Init();
    gt_TipManufacturingFacility_Init();
    gt_TipHeadquarters_Init();
    gt_TipExplosives_Init();
    gt_TipFusionGenerators_Init();
    gt_TipESD_Init();
    gt_TipMiningDrone_Init();
    gt_TipMortarTrooper_Init();
    gt_TipRoutheTank_Init();
    gt_TipTunnelSystem_Init();
    gt_TipEvacuation_Init();
    gt_StatCivsDie_Init();
    gt_StatDavisHit_Init();
    gt_StatMortarKills_Init();
    gt_SupplyExceeded_Init();
    gt_DefeatDavisDies_Init();
    gt_DefeatPetersDies_Init();
    gt_DefeatHQDestroyed_Init();
    gt_DefeatGenDestroyed_Init();
    gt_DefeatVanKilled_Init();
    gt_DefeatCivsKilled_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_BossHKEggs_Init();
    gt_BossHKConstantAggression_Init();
    gt_BossHKDeath_Init();
    gt_BossHKDeath2_Init();
    gt_SewerSectionStart_Init();
    gt_SewerSectionHideFallingDebris_Init();
    gt_SewerSectionCharges_Init();
    gt_SewerSectionAmmoniaPickup1_Init();
    gt_SewerSectionAmmoniaPickup2_Init();
    gt_SewerSectionAmmoniaDropoff1_Init();
    gt_SewerSectionAmmoniaDropoff2_Init();
    gt_SewerSectionVictory_Init();
    gt_UPLHoldoutZergAttackAfterUnburrow_Init();
    gt_UPLHoldoutFirstAttack1_Init();
    gt_UPLHoldoutFirstAttack2_Init();
    gt_UPLHoldoutFirstAttack3_Init();
    gt_UPLHoldoutSecondAttack1_Init();
    gt_UPLHoldoutSecondAttack2_Init();
    gt_UPLHoldoutSecondAttack3_Init();
    gt_UPLHoldoutSecondAttack4_Init();
    gt_UPLHoldoutSecondAttack5_Init();
    gt_UPLHoldoutSecondAttack6_Init();
    gt_UPLHoldoutSecondAttackOngoing1_Init();
    gt_UPLHoldoutSecondAttackOngoing2_Init();
    gt_UPLHoldoutSectionRoachesAttack_Init();
    gt_UPLHoldoutPetersWarning_Init();
    gt_UPLHoldoutSectionStart_Init();
    gt_UPLHoldoutArriveAtOutpost497_Init();
    gt_UPLHoldoutSectionTechnology_Init();
    gt_UPLHoldoutOwnershipTransition_Init();
    gt_UPLHoldoutMiningTutorial_Init();
    gt_UPLMiningDroneComplete_Init();
    gt_UPLMortarTrooperComplete_Init();
    gt_UPLMortarTrooperCompleteAlternate_Init();
    gt_UPLHoldoutAerialUnits_Init();
    gt_UPLHoldout75Supply_Init();
    gt_UPLHoldoutTimerExpires_Init();
    gt_TowerDefenseNydus1_Init();
    gt_TowerDefenseNydus2_Init();
    gt_TowerDefenseNydus3_Init();
    gt_TowerDefenseNydus4_Init();
    gt_TowerDefenseReticleDies1_Init();
    gt_TowerDefenseReticleDies2_Init();
    gt_TowerDefenseReticleDies3_Init();
    gt_TowerDefenseReticleDies4_Init();
    gt_TowerDefenseTimerA_Init();
    gt_TowerDefenseTimerAExpires_Init();
    gt_TowerDefenseTimerAAttack_Init();
    gt_TowerDefenseTimerB_Init();
    gt_TowerDefenseTimerBExpires_Init();
    gt_TowerDefenseTimerBAttack_Init();
    gt_TowerDefenseTimerC_Init();
    gt_TowerDefenseTimerCExpires_Init();
    gt_TowerDefenseTimerCAttack_Init();
    gt_TowerDefenseTimerD_Init();
    gt_TowerDefenseTimerDExpires_Init();
    gt_TowerDefenseTimerDAttack_Init();
    gt_TowerDefenseTimerE_Init();
    gt_TowerDefenseTimerEExpires_Init();
    gt_TowerDefenseTimerEAttack_Init();
    gt_TowerDefenseTimerF_Init();
    gt_TowerDefenseTimerFExpires_Init();
    gt_TowerDefenseTimerFAttack_Init();
    gt_TowerDefenseUPLReinforcements_Init();
    gt_TowerDefenseBombs_Init();
    gt_TowerDefenseBombs2_Init();
    gt_TowerDefenseUnburrowCivilianA_Init();
    gt_TowerDefenseUnburrowCivilianB_Init();
    gt_TowerDefenseUnburrowCivilianC_Init();
    gt_TowerDefenseUnburrowStall_Init();
    gt_TowerDefenseCivilianDies_Init();
    gt_TowerDefenseVanDamaged_Init();
    gt_TowerDefenseVanDamaged2_Init();
    gt_TowerDefenseSectionBegins_Init();
    gt_TowerDefenseSectionBeginsPart2_Init();
    gt_TowerDefenseDemoZergMove_Init();
    gt_TowerDefenseRemoveCiviliansFromGroups_Init();
    gt_TowerDefenseCivilianGroupA_Init();
    gt_TowerDefenseCivilianGroupB_Init();
    gt_TowerDefenseCivilianGroupC_Init();
    gt_TowerDefenseVanAppears_Init();
    gt_TowerDefenseInfantryFollows_Init();
    gt_TowerDefenseCiviliansARun_Init();
    gt_TowerDefenseCiviliansBRun_Init();
    gt_TowerDefenseCiviliansCRun_Init();
    gt_TowerDefenseCiviliansALoad_Init();
    gt_TowerDefenseCiviliansBLoad_Init();
    gt_TowerDefenseCiviliansCLoad_Init();
    gt_TowerDefenseVanMoves_Init();
    gt_TowerDefenseVanMovesBack_Init();
    gt_TowerDefenseVanStalls_Init();
    gt_TowerDefenseCivilianStand_Init();
    gt_TowerDefenseCiviliansAUnload_Init();
    gt_TowerDefenseCiviliansBUnload_Init();
    gt_TowerDefenseCiviliansCUnload_Init();
    gt_SewerCinematicSetup_Init();
    gt_SewerCinematic_Init();
    gt_SewerCinematicCleanup_Init();
    gt_SewerEscapeCinematicSetup_Init();
    gt_SewerEscapeCinematicUnits_Init();
    gt_SewerEscapeCinematic_Init();
    gt_SewerEscapeCinematicCleanup_Init();
    gt_HoldoutCinematicSetup_Init();
    gt_HoldoutCinematicUnits_Init();
    gt_HoldoutAim_Init();
    gt_HoldoutCinematic_Init();
    gt_HoldoutCinematicCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
